<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CSCE611-OS-Project07-File-System</title>
      <link href="/2024/05/03/CSCE611-OS-Project07-File-System/"/>
      <url>/2024/05/03/CSCE611-OS-Project07-File-System/</url>
      
        <content type="html"><![CDATA[<h3 id="File-System"><a href="#File-System" class="headerlink" title="File System"></a>File System</h3><p><strong>Introduction:</strong> The File System (FS) described here is a simple implementation designed to manage files on a disk. It provides basic functionality such as mounting a disk, formatting it, creating, deleting, and looking up files by their IDs.</p><p><strong>FileSystem Class:</strong> The <code>FileSystem</code> class is the central component of the file system implementation. It manages the disk, maintains the inode list, and keeps track of free blocks. Below are the details of its member functions:</p><ol><li><p><strong>Constructor (<code>FileSystem::FileSystem()</code>):</strong></p><ul><li>Initializes local data structures.</li><li>Does not connect to the disk yet.</li><li>Outputs a message indicating the construction of the file system.</li></ul></li><li><p><strong>Destructor (<code>FileSystem::~FileSystem()</code>):</strong></p><ul><li>Unmounts the file system if it has been mounted.</li><li>Ensures that the inode list and free block list are saved. Write inode list and free list to block0 and block1.</li></ul></li><li><p><strong>Mount (<code>FileSystem::Mount(SimpleDisk\* _disk)</code>):</strong></p><ul><li><p>Associates the file system with a disk.</p></li><li><p>Reads the inode list and the free block list into memory from the disk. In my file system, the first block is used to store inode list and second block is used for free list. In inode list, eack record contains two items, inode id and block id. Free is a bit map, ‘’*” in free list meas that <code>used</code> and “_” means that unused.</p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/Screenshot%202024-05-03%20at%2014.12.13.png" alt="图片替换文本" width="750" align="bottom" /></li></ul></li><li><p><strong>Format (<code>FileSystem::Format(SimpleDisk\* _disk, unsigned int _size)</code>):</strong></p><ul><li>Formats the disk, wiping any existing file system.</li><li>Populates the disk with an empty file system of the given size.</li><li>Initializes the inode list and the free block list.</li></ul></li><li><p><strong>LookupFile (<code>FileSystem::LookupFile(int _file_id)</code>):</strong></p><ul><li>Finds a file with the given ID in the file system.</li><li>Traverses the inode list to locate the file.</li><li>Returns the inode of the file if found; otherwise, returns null.</li><li>Outputs a message indicating the file lookup process.</li></ul></li><li><p><strong>CreateFile (<code>FileSystem::CreateFile(int _file_id)</code>):</strong></p><ul><li>Creates a file with the given ID in the file system.</li><li>Checks if the file already exists; if so, aborts and returns false.</li><li>Allocates a free block for the file and initializes its inode.</li><li>Adds the inode to the inode list.</li><li>Outputs a message indicating the file creation process.</li></ul></li><li><p><strong>DeleteFile (<code>FileSystem::DeleteFile(int _file_id)</code>):</strong></p><ul><li>Deletes a file with the given ID from the file system.</li><li>Checks if the file exists; if not, returns an error.</li><li>Frees the blocks occupied by the file and removes its inode from the inode list.</li><li>Outputs a message indicating the file deletion process.</li></ul></li></ol><p><strong>Inode Class:</strong> The <code>Inode</code> class represents an index node in the file system. It contains information about a file, such as its ID and the block it occupies on the disk. Additional functions may be needed to read and store inodes from and to the disk.</p><h3 id="File"><a href="#File" class="headerlink" title="File"></a>File</h3><p><strong>Introduction:</strong> The <code>File</code> class represents a file handle in the file system implementation. It provides functionality for sequential read and write operations on a file. Each <code>File</code> object maintains a reference to its corresponding inode in the file system.</p><p><strong>File Class:</strong> Below are the details of the <code>File</code> class member functions:</p><ol><li><strong>Constructor (<code>File::File(FileSystem\* _fs, int _id)</code>):</strong><ul><li>Initializes the file handle with the provided file system reference (<code>_fs</code>) and file ID (<code>_id</code>).</li><li>Sets the current position to the beginning of the file.</li><li>Checks if the file exists in the file system by looking up its inode.</li><li>If the file does not exist, creates a new file with the provided ID.</li><li>Reads the file’s data block into the block cache for sequential read and write operations.</li></ul></li><li><strong>Destructor (<code>File::~File()</code>):</strong><ul><li>Closes the file.</li><li>Writes any cached data to the disk.</li></ul></li><li><strong>Read (<code>File::Read(unsigned int _n, char\* _buf)</code>):</strong><ul><li>Reads <code>_n</code> characters from the file starting at the current position.</li><li>Copies the read characters into the buffer <code>_buf</code>.</li><li>Returns the number of characters read.</li><li>Does not read beyond the end of the file.</li></ul></li><li><strong>Write (<code>File::Write(unsigned int _n, const char\* _buf)</code>):</strong><ul><li>Writes <code>_n</code> characters to the file starting at the current position.</li><li>If the write extends over the end of the file, extends the length of the file until all data is written or until the maximum file size is reached.</li><li>Returns the number of characters written.</li><li>Does not write beyond the maximum length of the file.</li></ul></li><li><strong>Reset (<code>File::Reset()</code>):</strong><ul><li>Sets the current position to the beginning of the file.</li><li>Allows subsequent read or write operations to start from the beginning of the file.</li></ul></li><li><strong>EoF (<code>File::EoF()</code>):</strong><ul><li>Checks if the current position for the file is at the end of the file.</li><li>Returns true if the current position is at the end of the file; otherwise, returns false.</li><li>Helps determine if there are more characters to read from the file.</li></ul></li></ol><h3 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h3><p><strong>Testing File System Functionality</strong></p><p>To ensure the proper functioning of the file system, the following steps are taken to test various operations:</p><ol><li><p><strong>File Creation:</strong></p><ul><li>Two files are created using the <code>CreateFile</code> function of the file system.</li><li>Assertions are used to verify that the files are successfully created.<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">assert</span>(_file_system-&gt;<span class="built_in">CreateFile</span>(<span class="number">1</span>));</span><br><span class="line"><span class="built_in">assert</span>(_file_system-&gt;<span class="built_in">CreateFile</span>(<span class="number">2</span>));</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>File Opening and Writing:</strong></p><ul><li>The two files are “opened” using the <code>File</code> constructor, which initializes file handles.</li><li>Data is written to each file using the <code>Write</code> function, with different content for each file.</li><li>Assertions are used to verify that the write operations are successful.<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">char</span> * STRING1 = <span class="string">&quot;01234567890123456789&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> * STRING2 = <span class="string">&quot;abcdefghijabcdefghij&quot;</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>File Closing:</strong></p><ul><li>The files are automatically closed when they go out of scope.</li></ul></li><li><p><strong>File Opening and Reading:</strong></p><ul><li>The files are “opened” again to simulate reopening.</li><li>Data is read from each file using the <code>Read</code> function.</li><li>Assertions are used to compare the read data with the expected content.</li></ul></li><li><p><strong>File Deletion:</strong></p><ul><li>Both files are deleted using the <code>DeleteFile</code> function.</li><li>Assertions are used to verify that the files are successfully deleted.</li></ul></li><li><p><strong>Comparison with Expected Results:</strong></p><ul><li>The actual results of file read operations are compared with the expected content.</li><li>If any discrepancies are found, assertions will fail, indicating a potential problem with file reading or writing.</li></ul></li></ol><h5 id="Log"><a href="#Log" class="headerlink" title="Log"></a>Log</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br><span class="line">formatting disk</span><br><span class="line">Write Block: <span class="number">1</span><span class="comment"># init free list and inode list</span></span><br><span class="line">Write Block: <span class="number">2</span></span><br><span class="line">mounting file system <span class="keyword">from</span> disk</span><br><span class="line">Read Block: <span class="number">1</span> <span class="comment"># read free list and inode list</span></span><br><span class="line">Read Block: <span class="number">2</span></span><br><span class="line">creating file <span class="keyword">with</span> <span class="built_in">id</span>:<span class="number">1</span></span><br><span class="line"></span><br><span class="line">Created File Name: <span class="number">1</span></span><br><span class="line">Used File Block: <span class="number">3</span></span><br><span class="line"></span><br><span class="line">creating file <span class="keyword">with</span> <span class="built_in">id</span>:<span class="number">2</span></span><br><span class="line"></span><br><span class="line">Created File Name: <span class="number">2</span></span><br><span class="line">Used File Block: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">Opening file.<span class="comment"># open file21</span></span><br><span class="line">looking up file <span class="keyword">with</span> <span class="built_in">id</span> = <span class="number">1</span></span><br><span class="line">Read Block: <span class="number">3</span></span><br><span class="line">Opening file. <span class="comment"># open file 2</span></span><br><span class="line">looking up file <span class="keyword">with</span> <span class="built_in">id</span> = <span class="number">2</span></span><br><span class="line">Read Block: <span class="number">4</span></span><br><span class="line">writing to file</span><br><span class="line">writing to file</span><br><span class="line">Closing file.</span><br><span class="line">Write Block: <span class="number">4</span></span><br><span class="line">Closing file.</span><br><span class="line">Write Block: <span class="number">3</span></span><br><span class="line"></span><br><span class="line">Opening file.<span class="comment"># open file again</span></span><br><span class="line">looking up file <span class="keyword">with</span> <span class="built_in">id</span> = <span class="number">1</span></span><br><span class="line">Read Block: <span class="number">3</span></span><br><span class="line">Opening file.<span class="comment"># open file again</span></span><br><span class="line">looking up file <span class="keyword">with</span> <span class="built_in">id</span> = <span class="number">2</span></span><br><span class="line">Read Block: <span class="number">4</span></span><br><span class="line">resetting file</span><br><span class="line">reading <span class="keyword">from</span> file</span><br><span class="line">resetting file</span><br><span class="line">reading <span class="keyword">from</span> file</span><br><span class="line">Closing file.</span><br><span class="line">Write Block: <span class="number">4</span></span><br><span class="line">Closing file.</span><br><span class="line">Write Block: <span class="number">3</span></span><br><span class="line">deleting file <span class="keyword">with</span> <span class="built_in">id</span>:<span class="number">1</span> <span class="comment"># test passed </span></span><br><span class="line">File successfully deleted.</span><br><span class="line">deleting file <span class="keyword">with</span> <span class="built_in">id</span>:<span class="number">2</span><span class="comment"># test passed </span></span><br><span class="line">File successfully deleted.</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSCE611-OS-Project05-Process</title>
      <link href="/2024/03/26/CSCE611-OS-Project05-Process/"/>
      <url>/2024/03/26/CSCE611-OS-Project05-Process/</url>
      
        <content type="html"><![CDATA[<p>Github Link: <a href="https://github.com/tamu-edu-students/CSCE410-611-Spring2024-Hanzhong_Liu">https://github.com/tamu-edu-students/CSCE410-611-Spring2024-Hanzhong_Liu</a></p><p>Files I modified: </p><p>1.<strong>Scheduler and RR Scheduler</strong>:</p><ul><li>Add rr_scheduler.C/H</li><li>kernel.C : support rr_scheudler</li><li>interrupt.C/H : enable interrupt</li><li>thread.C/H: enable interrupt</li><li>copykernel.sh: Modified to fit Mac OS</li></ul><p>3.<strong>Process</strong>:</p><ul><li>Add process.C/H</li><li>Add rr_scheduler.C/H</li><li>kernel.C</li><li>interrupt.C/H</li><li>thread.C/H</li><li>Add cont_frame_pool.C/H</li><li>Add vm_pool.C/H</li><li>Add page_table.C/H</li><li>copykernel.sh: Modified to fit Mac OS</li></ul><h3 id="1-FIFO-Scheduler"><a href="#1-FIFO-Scheduler" class="headerlink" title="1. FIFO Scheduler"></a>1. FIFO Scheduler</h3><p>In the <code>Scheduler</code>, implement a queue using <code>LinkedList</code> to store <code>Threads</code>. Each time <code>Resume</code> is called, insert the thread at the end of the queue. When <code>yield</code> is called, pop the first thread from the queue and switch to it using <code>Thread::dispatch_to(Thread * _thread)</code>.</p><p>Design of LinkedList: </p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/Screenshot%202024-03-29%20at%2019.42.01.png" alt="图片替换文本" width="750" align="bottom" /><ol><li><code>resume (append)</code>: This indicates that when a new thread is created or when a suspended thread is to be resumed, it is appended to the end of the queue.</li><li><code>yield (pop)</code>: When function yield is called, scheduler will pop the first thread in ready queue and the use <code>Thread::dispatch_to</code> to start this thread.</li><li>Finally, <code>Thread::dispatch_to:</code> will use the low level <code>asm</code> code to set the current thread’s stack to hardware to start the thread. </li></ol><p>To terminate a thread, two steps are involved: 1. releasing memory, and 2. removing the thread from the scheduler. To obtain the stack address of the current thread, I added a <code>Thread::Stack()</code> function.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">thread_shutdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MEMORY_POOL-&gt;<span class="built_in">release</span>((<span class="type">long</span> <span class="type">unsigned</span> <span class="type">int</span>) current_thread-&gt;<span class="built_in">Stack</span>());</span><br><span class="line">    SYSTEM_SCHEDULER-&gt;<span class="built_in">terminate</span>(current_thread);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>TEST:</strong></p><p>Launch the kernel, the output of threads shows on UI:</p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/Screenshot%202024-03-29%20at%2019.51.27.png" alt="图片替换文本" width="650" align="bottom" /><p>We can observe that threads are executed sequentially.</p><h3 id="2-Enable-Interrupt-bonus-1"><a href="#2-Enable-Interrupt-bonus-1" class="headerlink" title="2.Enable Interrupt (bonus 1)"></a>2.Enable Interrupt (bonus 1)</h3><p>Within the <code>Thread</code> class, in the <code>Thread::thread_start</code> function, add <code>Machine::enable_interrupts();</code>.</p><p>In the scheduler, before <code>resume</code> and <code>yield</code>, call <code>Machine::disable_interrupts()</code> to prevent interrupts from occurring during a process switch. The worst-case scenario is when an interrupt occurs during an active process switch, causing the switch to terminate prematurely, and simultaneously triggering a process switch via <code>rr_schedule</code>, which would result in an erroneous switch.</p><p>The test for interrupt is in the RR Scheduler.</p><h3 id="3-Round-Robin-Scheduler-bonus-2"><a href="#3-Round-Robin-Scheduler-bonus-2" class="headerlink" title="3.Round-Robin Scheduler (bonus 2)"></a>3.Round-Robin Scheduler (bonus 2)</h3><p>To control the activation of the round-robin (RR) scheduler, a <code>scheduler_conf.H</code> file has been added. Additionally, an <code>eoq_timer</code> has been introduced, with its constructor taking an <code>RRScheduler</code>. Every 50ms, an interrupt is triggered, and <code>EOQTimer::handle_interrupt</code> calls the scheduler’s <code>resume</code> and <code>yield</code> methods to implement thread preemption.</p><p>The implementation of <code>Interrupt</code> has been modified to add a function <code>InterruptHandler::send_end_of_interrupt(REGS * _r)</code>. In the scheduler, before switching to the next thread, <code>send_end_of_interrupt</code> is called to indicate the end of the current interrupt handling, ensuring that <code>Interrupt</code> can continue processing interrupts. Moreover, in <code>InterruptHandler::dispatch_interrupt</code>, <code>if(int_no!=0) send_end_of_interrupt(_r);</code> is added to indicate that the timer interrupt is handled by the scheduler, preventing the redundant sending of interrupt end signals.</p><p>**TEST: **</p><blockquote><p> In the top of kernel.c, use <code>#define _ENABLE_RR_SCHEDULER_</code> to switch to RR_Scheduler.</p></blockquote><p>According to the figure below, we can see that thread switching includes not only the switching of threads after the “BURST execution”, but also periodic preemption switching</p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/Screenshot%202024-03-29%20at%2020.25.09.png" alt="图片替换文本" width="750" align="bottom" /><h3 id="4-Processes-bonus-3"><a href="#4-Processes-bonus-3" class="headerlink" title="4.Processes (bonus 3)"></a>4.Processes (bonus 3)</h3><p>After a discussion with the professor. In my operating system project, I have implemented a <code>kernel process system</code> with the following features and details:</p><ul><li><p>Ported the memory pool from previous assignments (MP2 to MP4) to the new project (MP5).</p></li><li><p>Enabled virtual memory and implemented a <code>Process</code> class. During the initialization of a <code>Process</code>, two virtual memory pools are declared: <code>kernel_mem_pool</code> (3MB-4MB) for internal objects of the process (e.g., stack, which requires direct mapping) and <code>process_mem_pool</code> (4MB-256MB) for allocating memory to threads during runtime, providing them with new page tables and address spaces.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Process::<span class="built_in">Process</span>(<span class="type">unsigned</span> <span class="type">long</span> address_space_size);</span><br></pre></td></tr></table></figure><p>Within the constructor, the process initially switches to the <code>kernel_page_table</code> and <code>kernel_obj_pool</code>. It then uses the <code>new</code> operator to allocate memory for the process’s page table and virtual memory pools, setting up the necessary environment for process execution.</p></li><li><p>**Memory Management: ** </p><ul><li>Frame Pools: I used two frame pools: <code>kernel_frame_pool</code> and <code>process_frame_pool</code></li><li>I utilized three virtual memory (VM) pools: <code>kernel_obj_pool</code>, <code>kernel_vm_pool</code>, and <code>process_vm_pool</code>:<ol><li><strong><code>kernel_obj_pool</code></strong> (2MB - 3MB): This pool is reserved for kernel objects, such as the kernel page table. When the kernel needs to define a new object, like a new process, it switches to the <code>kernel_obj_pool</code> and uses the <code>new</code> operator to allocate memory for it.</li><li><strong><code>kernel_vm_pool</code></strong> (3MB - 4MB): This pool is used for the kernel stacks of threads. Each thread’s kernel stack is allocated from this pool to ensure have a dedicated memory space.</li><li><strong><code>process_vm_pool</code></strong>(4MB - 256MB): This pool is used for the execution of processes. When a thread starts, the kernel sets <code>current_thread</code> to the thread’s process VM pool, allowing the process to allocate objects within its own address space.</li></ol></li></ul><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/Screenshot%202024-03-29%20at%2020.53.46.png" alt="Screenshot 2024-03-29 at 20.53.46"></p></li><li><p>Retained the <code>Thread</code> class, similar to the original design, containing an <code>esp</code> attribute to store the current process’s stack address, code segment, etc. It includes <code>push</code> and <code>set_context</code> functions to establish the context of the process.<br>Additionally, due to threads belonging to different address spaces, a page table address for the current address space is added to the <code>Thread</code> class (passed in from the process).</p><p>The constructor and functions of the <code>Thread</code> class is designed as follows:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Thread::<span class="built_in">Thread</span>(Thread_Function _tf, <span class="type">char</span> * _stack, <span class="type">unsigned</span> <span class="type">int</span> _stack_size);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Thread::set_process</span><span class="params">(Process * _process)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Thread::set_pt</span><span class="params">(PageTable * pt)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>Thread Management:</strong> Added an <code>add_thread</code> function to the <code>Process</code> class, allowing the addition of a new thread to the process. This function first disables interrupts, then switch to page table of current process, and then allocates memory from the <code>kernel_vm_pool</code> for the stack. It creates a new <code>Thread</code> object, and adds it to the scheduler’s queue (without implementing “Thread level scheduling”).</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Process::<span class="built_in">add_proces</span>(Thread_Function _tf, <span class="type">int</span> _stack_size)</span><br></pre></td></tr></table></figure></li><li><p>When the <code>RRScheduler</code> handles thread switching, it first compares the page table of the next thread with the current one. If they are different, the new page table is loaded into the register (pt-&gt;load()) and <code>current_pool</code> will be set to <code>process_vm_pool</code> of current process.. Since the first 4MB is directly mapped to the kernel pool, switching page tables does not affect system operation.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Console::<span class="built_in">puts</span>(<span class="string">&quot;Switch CURRENT_POOL \n&quot;</span>); </span><br><span class="line">CURRENT_POOL = current_thread-&gt;process-&gt;process_pool;</span><br><span class="line"></span><br><span class="line">PageTable * pt_ = current_thread-&gt;pt;</span><br><span class="line">pt_-&gt;<span class="built_in">load</span>();</span><br></pre></td></tr></table></figure></li><li><p>With this setup, multiple threads can be continuously added to a process, and these threads will share the same address space.</p></li></ul><p>**TEST: **</p><p>For testing, two processes are started: <code>process1</code> contains <code>Thread1</code> and <code>Thread3</code>, while <code>process2</code> contains <code>Thread2</code> and <code>Thread4</code>. </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2 processes and 4 threads</span></span><br><span class="line">process1.<span class="built_in">add_thread</span>(fun1, <span class="number">1024</span>);</span><br><span class="line">process2.<span class="built_in">add_thread</span>(fun2, <span class="number">1024</span>);</span><br><span class="line">process1.<span class="built_in">add_thread</span>(fun3, <span class="number">1024</span>);</span><br><span class="line">process2.<span class="built_in">add_thread</span>(fun4, <span class="number">1024</span>);</span><br></pre></td></tr></table></figure><p>In the test, each thread accumulates its ticks in the memory location at 32MB + ThreadID. The expected result is that the ticks for threads within the same process are visible to each other, while the other locations are 0. </p><blockquote><p>addr[1]                 addr[2]                 addr[3]                addr[4]</p><p>[thread1’s tick]   [thread2’s tick]   [thread3’s tick]   [thread4’s tick]</p></blockquote><p>The test code and output (which meets expectations) is as follows:</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">long</span> tick_addr = <span class="number">32</span> MB;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Console::<span class="built_in">puts</span>(<span class="string">&quot;Thread: &quot;</span>); Console::<span class="built_in">puti</span>(Thread::<span class="built_in">CurrentThread</span>()-&gt;<span class="built_in">ThreadId</span>()); Console::<span class="built_in">puts</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    Console::<span class="built_in">puts</span>(<span class="string">&quot;FUN 1 INVOKED!\n&quot;</span>);</span><br><span class="line">    <span class="type">int</span> id=<span class="number">1</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> * addr = (<span class="type">unsigned</span> <span class="type">long</span> *)(tick_addr);</span><br><span class="line">    addr[id]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// _TERMINATING_FUNCTIONS_</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">        Console::<span class="built_in">puts</span>(<span class="string">&quot;FUN 1 IN BURST[&quot;</span>); Console::<span class="built_in">puti</span>(j); Console::<span class="built_in">puts</span>(<span class="string">&quot;]\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            Console::<span class="built_in">puts</span>(<span class="string">&quot;FUN 1: TICK [&quot;</span>); Console::<span class="built_in">puti</span>(i); Console::<span class="built_in">puts</span>(<span class="string">&quot;]\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">          <span class="comment">// add tick to memory</span></span><br><span class="line">           <span class="type">unsigned</span> <span class="type">long</span> * addr = (<span class="type">unsigned</span> <span class="type">long</span> *)(tick_addr);</span><br><span class="line">            addr[id]+=id;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">pass_on_CPU</span>(thread2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Console::<span class="built_in">puts</span>(<span class="string">&quot;====== FUN 1 ======\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++)&#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">long</span> * addr = (<span class="type">unsigned</span> <span class="type">long</span> *)(tick_addr);</span><br><span class="line">        Console::<span class="built_in">puts</span>(<span class="string">&quot;TICK in Idx &quot;</span>); </span><br><span class="line">        Console::<span class="built_in">puti</span>(i); </span><br><span class="line">        Console::<span class="built_in">puts</span>(<span class="string">&quot;, Num: &quot;</span>); </span><br><span class="line">        Console::<span class="built_in">puti</span>(addr[i]);</span><br><span class="line">        Console::<span class="built_in">puts</span>(<span class="string">&quot;]\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Test Output:</strong></p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Thread 3 finished firstly. </span></span><br><span class="line"><span class="comment"># Got 92 ticks from Thread 1. (because thread 1 haven&#x27;t stop, so not 100)</span></span><br><span class="line"><span class="comment"># Get 300 ticks Thread 3(itself)</span></span><br><span class="line"><span class="comment"># Got 0 ticks from Thread 2 and Thread 4. (since Thread 2 and Thread 4 belong to the different address sapce)</span></span><br><span class="line">====== FUN <span class="number">3</span> ======</span><br><span class="line">TICK <span class="keyword">in</span> Idx <span class="number">1</span>, Num: <span class="number">92</span></span><br><span class="line">TICK <span class="keyword">in</span> Idx <span class="number">2</span>, Num: <span class="number">0</span></span><br><span class="line">TICK <span class="keyword">in</span> Idx <span class="number">3</span>, Num: <span class="number">300</span></span><br><span class="line">TICK <span class="keyword">in</span> Idx <span class="number">4</span>, Num: <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Thread 2 finished. </span></span><br><span class="line"><span class="comment"># Got 368 ticks from Thread 4. (because thread 4 haven&#x27;t stop, so not 400)</span></span><br><span class="line"><span class="comment"># Got 200 ticks from Thread 2. (itself) </span></span><br><span class="line"><span class="comment"># Got 0 ticks from Thread 2 and Thread 4.</span></span><br><span class="line">====== FUN <span class="number">2</span> ======</span><br><span class="line">TICK <span class="keyword">in</span> Idx <span class="number">1</span>, Num: <span class="number">0</span></span><br><span class="line">TICK <span class="keyword">in</span> Idx <span class="number">2</span>, Num: <span class="number">200</span></span><br><span class="line">TICK <span class="keyword">in</span> Idx <span class="number">3</span>, Num: <span class="number">0</span></span><br><span class="line">TICK <span class="keyword">in</span> Idx <span class="number">4</span>, Num: <span class="number">368</span></span><br><span class="line"></span><br><span class="line">====== FUN <span class="number">4</span> ======</span><br><span class="line">TICK <span class="keyword">in</span> Idx <span class="number">1</span>, Num: <span class="number">0</span></span><br><span class="line">TICK <span class="keyword">in</span> Idx <span class="number">2</span>, Num: <span class="number">200</span></span><br><span class="line">TICK <span class="keyword">in</span> Idx <span class="number">3</span>, Num: <span class="number">0</span></span><br><span class="line">TICK <span class="keyword">in</span> Idx <span class="number">4</span>, Num: <span class="number">400</span></span><br><span class="line"></span><br><span class="line">====== FUN <span class="number">1</span> ======</span><br><span class="line">TICK <span class="keyword">in</span> Idx <span class="number">1</span>, Num: <span class="number">100</span></span><br><span class="line">TICK <span class="keyword">in</span> Idx <span class="number">2</span>, Num: <span class="number">0</span></span><br><span class="line">TICK <span class="keyword">in</span> Idx <span class="number">3</span>, Num: <span class="number">300</span></span><br><span class="line">TICK <span class="keyword">in</span> Idx <span class="number">4</span>, Num: <span class="number">0</span></span><br></pre></td></tr></table></figure><p>So this test verified that Process1 and Process2 have different address Spaces. This test also verified the accuracy of Thread running (according to Tick number), thread switching and page table switching.</p><p>This proves that I have completed a basic kernel process.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSCE611-OS-Project05-Thread</title>
      <link href="/2024/03/24/CSCE611-OS-Project05-Thread/"/>
      <url>/2024/03/24/CSCE611-OS-Project05-Thread/</url>
      
        <content type="html"><![CDATA[<p>1.FIFO</p><p>在Scheduler里实现一个队列LinkedList，储存Threads。每次调用Resume，则将thread插入队尾。调用yield，则pop出第一个thread，并使用 Thread::dispatch_to(Thread * _thread) 切换。</p><p>为了实现终止thread，包含两个步骤，1.释放内存，2.从scheduler删除thread。为了获得当前thread的stack地址，我添加了一个Thread::Stack()函数。并修改：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">thread_shutdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* This function should be called when the thread returns from the thread function.</span></span><br><span class="line"><span class="comment">       It terminates the thread by releasing memory and any other resources held by the thread. </span></span><br><span class="line"><span class="comment">       This is a bit complicated because the thread termination interacts with the scheduler.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Console::<span class="built_in">puts</span>(<span class="string">&quot;thread_shutdown\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    MEMORY_POOL-&gt;<span class="built_in">release</span>((<span class="type">long</span> <span class="type">unsigned</span> <span class="type">int</span>) current_thread-&gt;<span class="built_in">Stack</span>());</span><br><span class="line">    SYSTEM_SCHEDULER-&gt;<span class="built_in">terminate</span>(current_thread);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.Enable Interrupt</p><p>在Thread里，Thread::thread_start函数里，添加if(!Machine::interrupts_enabled()) Machine::enable_interrupts();</p><p>在scheduler里，resume和yield前，调用Machine::disable_interrupts()，从而避免进行进程切换时发生中断。（最坏的情况时，进程主动切换时发生中断，切换终止，同时触发rr_schedule的进程切换，此是会产生错误的切换）</p><p>3.RR scheduler</p><ul><li>为了控制是否启用rr scheduler，添加了一个scheduler_conf.H</li><li>添加eoq_timer，构造函数传入RRScheduler。每隔50ms，触发中断，EOQTimer::handle_interrupt调用scheduler的resume和yield</li><li>修改Interrupt实现，增加函数InterruptHandler::send_end_of_interrupt(REGS * <em>r)。在scheduler里，切换到下一个thread前，调用send_end_of_interrupt，表明当前中断处理结束，从而保证Interrupt可以继续处理中断。</em><br>_同时在InterruptHandler::dispatch_interrupt添加 if(int_no!=0) send_end_of_interrupt(_r);，表明时间中断，由timer发送结束信号，避免重复发送中断结束的信息。</li><li>缺点，scheduler不线程安全，Interrupt切换和thread本身的切换，可能冲突，导致队列里的内容不正确。经测试，单独启用RRScheduler，禁用thread本身切换，可以准确实现每隔50ms切换到下一个thread。</li></ul><ul><li></li></ul><p>4.Processes</p><ul><li><p>将之前三个MP的Pool，移植到MP5</p></li><li><p>启用虚拟内存。实现Process类。在初始化Process时，为其声明两个vm_pool，kernel_mem_pool（3MB-4MB） 和 process_mempool（4MB-256MB）。kernel_mem_pool用于process的内部对象声明（例如Stack，需要直接映射），process_mem_pool在线程运行时用于给线程分配内存（因此具有新的页表，地址空间）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Process::Process(VMPool * vm_pool);</span><br></pre></td></tr></table></figure></li><li><p>保留Thread，该Thread类似原有的Thread的设计。其中包含esp用于储存当前precess的stack地址，代码段等。包含push和set_context函数，以完成该process的context声明。<br>此外，由于此时Thread之间属于不同的地址空间，因此需要在Thread里加入当前地址空间的页表地址（传入process）</p><p>该类的构造函数设计：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thread::Thread(Thread_Function _tf, char * _stack, unsigned int _stack_size, Process * process);</span><br></pre></td></tr></table></figure></li><li><p>为Process添加一个add_thread函数，用于向Process增加一个线程。此函数首先会停止中断，然后从kernel_vm_pool申请一块内存，用作stack。然后建立一个新的Thread对象，在本地的队列存储该Thread，同时并将改Thread对象add入scheduler的queue里（不设计“Thread level调度”）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Process::add_proces(Thread_Function _tf,int _stack_size)</span><br></pre></td></tr></table></figure></li><li><p>当Scheduler处理Thread切换时，首先比较下一个Thread的page table与当前是否相同，不同的话则将新的page table load到寄存器。由于前4MB是直接映射到kernel pool，因此切换页表不会影响系统运行。</p></li></ul><ul><li><p>这样以来，就可以向一个Process里不断添加新的Thread，并且这些Thread具有相同的地址空间</p></li><li><p>测试，启动两个Process，process1包含Thread1和2，Process2包含Thread2和4。Thread会向地址为32MB+ThreadID的位置累加本线程的Tick。最终打印四个位置的Tick。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">long</span> tick_addr = <span class="number">32</span> MB;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> id=<span class="number">1</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> * addr = (<span class="type">unsigned</span> <span class="type">long</span> *)(tick_addr);</span><br><span class="line">    </span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> * addr = (<span class="type">unsigned</span> <span class="type">long</span> *)(tick_addr);</span><br><span class="line">addr[id]+=id;</span><br></pre></td></tr></table></figure><p>结构应该是，process1下的两个线程之间的tick相互可见，另外两个tick的位置是0。反之同理。测试结果（符合预期）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">====== FUN 3 ======</span><br><span class="line">TICK in Idx 1, Num: 92]</span><br><span class="line">TICK in Idx 2, Num: 0]</span><br><span class="line">TICK in Idx 3, Num: 300]</span><br><span class="line">TICK in Idx 4, Num: 0]</span><br><span class="line"></span><br><span class="line">====== FUN 2 ======</span><br><span class="line">TICK in Idx 1, Num: 0]</span><br><span class="line">TICK in Idx 2, Num: 200]</span><br><span class="line">TICK in Idx 3, Num: 0]</span><br><span class="line">TICK in Idx 4, Num: 368]</span><br><span class="line"></span><br><span class="line">====== FUN 4 ======</span><br><span class="line">TICK in Idx 1, Num: 0]</span><br><span class="line">TICK in Idx 2, Num: 200]</span><br><span class="line">TICK in Idx 3, Num: 0]</span><br><span class="line">TICK in Idx 4, Num: 400]</span><br><span class="line"></span><br><span class="line">====== FUN 1 ======</span><br><span class="line">TICK in Idx 1, Num: 100]</span><br><span class="line">TICK in Idx 2, Num: 0]</span><br><span class="line">TICK in Idx 3, Num: 300]</span><br><span class="line">TICK in Idx 4, Num: 0]</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSCE611-OS-Project04-Memory</title>
      <link href="/2024/03/18/CSCE611-OS-Project04-Memory/"/>
      <url>/2024/03/18/CSCE611-OS-Project04-Memory/</url>
      
        <content type="html"><![CDATA[<p>Github Link: <a href="https://github.com/tamu-edu-students/CSCE410-611-Spring2024-Hanzhong_Liu">https://github.com/tamu-edu-students/CSCE410-611-Spring2024-Hanzhong_Liu</a></p><p>Files I modified: </p><ul><li>page table.H/C</li><li>vm_pool.H/C</li><li>copykernel.sh<ul><li>Modified to fit Mac OS</li></ul></li></ul><h3 id="Design"><a href="#Design" class="headerlink" title="Design"></a>Design</h3><h4 id="1-Page-Table"><a href="#1-Page-Table" class="headerlink" title="1. Page Table"></a>1. Page Table</h4><p><strong>i. Extension of page table manager</strong></p><p>For <em>register_pool()</em>, I used a linkedlist to store all VMPools in PageTable. In PageTable, I added a new variable:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vm pools</span></span><br><span class="line"><span class="type">static</span> VMPool * pool_link_head;</span><br></pre></td></tr></table></figure><p>This is the head of all vm_pools. In VMPool, there is a new variable <em>next_pool</em> which point to the next pool. By doing this, I realized the register_pool by adding the pool to the end of the linkedlist in VMPool’s constructor.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">PageTable::register_pool</span><span class="params">(VMPool * _vm_pool)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   VMPool * node=pool_link_head;</span><br><span class="line">   <span class="keyword">if</span>(node == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">      pool_link_head = _vm_pool;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">while</span>(node-&gt;next_pool != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">         node=node-&gt;next_pool;</span><br><span class="line">      &#125;</span><br><span class="line">      node-&gt;next_pool = _vm_pool;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> For <em>free_page()</em>, first calculate the address of the page according to the page_no. Then, based on this address, find the corresponding page table. Set the corresponding pte value to 0. Then release the corresponding frame in the frame pool. Thus realize the release of memory.</p><p><strong>ii. Recursive page table lookup</strong></p><p>This is the menory structure:</p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/Screenshot%202024-02-23%20at%2022.05.15.png" alt="图片替换文本" width="350" align="bottom" /><p>process page faluts: </p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/Screenshot%202024-02-25%20at%2010.43.20.png" alt="图片替换文本" width="500" align="bottom" /><p>Firstly, get fault virtual memory address from cr2”</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">long</span> faulting_address = <span class="built_in">read_cr2</span>();</span><br></pre></td></tr></table></figure><p>Before fault handle, function need to check whether the address belong to a registed VMPool.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// check address in vm pool</span></span><br><span class="line"> <span class="type">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"> VMPool * node = pool_link_head;</span><br><span class="line"></span><br><span class="line"><span class="comment">// no vm pool, so not make checking</span></span><br><span class="line"> <span class="keyword">if</span>(node == <span class="literal">nullptr</span>) flag =<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">while</span>(node != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">   <span class="comment">// first two pages, used to store memory usage information</span></span><br><span class="line">    <span class="keyword">if</span>(faulting_address &gt;= node-&gt;base_address &amp;&amp; faulting_address &lt;= (node-&gt;base_address+PAGE_SIZE*<span class="number">2</span>) )&#123;</span><br><span class="line">       flag=<span class="literal">true</span>;</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// is_legitimate ?</span></span><br><span class="line">    flag = flag || node-&gt;<span class="built_in">is_legitimate</span>(faulting_address);</span><br><span class="line"></span><br><span class="line">    node=node-&gt;next_pool;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>If address is legitimate, get page dir index and page table index from address. pd_index is the top 10 bits and pt_index can get from bits from 12 to 22.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">long</span> pd_index = faulting_address &gt;&gt; <span class="number">22</span>; <span class="comment">// index in page dir</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> pt_index = (faulting_address &gt;&gt; <span class="number">12</span>) &amp; <span class="number">0b1111111111</span>; <span class="comment">// index in page table</span></span><br></pre></td></tr></table></figure><p>For two level page table, may the page table is not exist. We can determine it by check the first bit of pd[pd_index].</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!(pd[pd_index] &amp; <span class="number">1</span>)) &#123;</span><br><span class="line"><span class="comment">// page table not exist</span></span><br><span class="line">  <span class="comment">// apply a new frame from kernel pool</span></span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the end, we apply a new frame from process pool and add it to page table.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">long</span> new_frame = process_mem_pool-&gt;<span class="built_in">get_frames</span>(<span class="number">1</span>);</span><br><span class="line">pt[pt_index] = (new_frame * PAGE_SIZE) | <span class="number">3</span>;</span><br></pre></td></tr></table></figure><h4 id="2-VM-Pool"><a href="#2-VM-Pool" class="headerlink" title="2.VM Pool"></a>2.VM Pool</h4><p>The <code>VMPool</code> class is responsible for managing a virtual memory pool, which includes allocating and releasing memory regions as well as checking the legitimacy of addresses. Here’s a detailed breakdown of each function in the class:</p><ol><li><p><strong>Constructor <code>VMPool</code></strong>: Initializes a virtual memory pool with a given base address, size, frame pool, and page table. It registers the pool with the page table and sets up the data structures for tracking used and free memory regions.</p></li><li><p><strong><code>allocate(unsigned long _size)</code></strong>: The <code>allocate</code> method in the <code>VMPool</code> class is responsible for allocating a region of memory from the virtual memory pool. It uses two arrays (first to frames in frame_pool), <code>used_memory_info</code> and <code>free_memory_info</code>, to track the memory usage. Each entry in these arrays consists of a pair of values, representing the start and end addresses of a memory region. This is structure of <code>used_memory_info</code>:</p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/Screenshot%202024-03-18%20at%2019.41.59.png" alt="图片替换文本" width="700" align="bottom" /></li></ol><ol><li><p><strong><code>release(unsigned long _start_address)</code></strong>: Releases a region of previously allocated memory identified by its start address. It removes the region from the used memory info, adds it back to the free memory info, and releases the corresponding pages in the page table.</p></li><li><p><strong><code>is_legitimate(unsigned long _address)</code></strong>: Checks whether a given address is part of a currently allocated region. It returns <code>true</code> if the address is within the range of an allocated block and <code>false</code> otherwise.</p></li></ol><p>Additionally, the class has private member variables for storing the size of the pool, pointers to the frame pool and page table, and arrays for tracking used and free memory regions. It also defines a constant <code>PAGE_SIZE</code> for the page size and has a public member variable <code>base_address</code> for the base address of the pool.</p><h3 id="Testing"><a href="#Testing" class="headerlink" title="Testing:"></a><strong>Testing</strong>:</h3><p><strong><em>TEST_PAGE_TABLE</em> (Passed)</strong> :</p><p>This test is designed to evaluate the implementation of page tables by accessing and writing to unmapped virtual memory. It determines the correctness of the page table implementation by verifying whether data can be accurately written to and read from virtual addresses.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> FAULT_ADDR (4 * 1024 * 1024) <span class="comment">// 4 MB, Address used to cause page faults in the test.</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NACCESS ((1 MB) / 4) <span class="comment">// (1 MB) / 4, Number of integer accesses (4 bytes each) starting from FAULT_ADDR.</span></span></span><br></pre></td></tr></table></figure><p>I also extended this test from “(1 MB) / 4” to “(27 MB) / 4”. This is because the physics address space it 32MB. The first 4MB is direct mapped and 15-16MB is the memory hole. So, there is total 27MB can be mapped. For “(27 MB) / 4”, my code can pass the test too.</p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/Screenshot%202024-03-18%20at%2010.56.06.png" alt="图片替换文本" width="700" align="bottom" /><p><strong><em>TEST_VM_POOL</em> (Passed)</strong> :</p><p>This test involves memory allocation and release operations. It tests the ability to correctly handle memory allocation and release requests, ensuring that memory is properly allocated when requested and correctly freed when no longer needed. </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *arr = <span class="keyword">new</span> <span class="type">int</span>[size2 * i]; <span class="comment">// allocate</span></span><br><span class="line"><span class="keyword">delete</span>[] arr; <span class="comment">// release</span></span><br></pre></td></tr></table></figure><p>My code prints out the IDs of the allocated memory frames and the frames released during the release process. Upon inspection, my vm_pool can correctly allocate and release frames.</p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/Screenshot%202024-03-18%20at%2010.54.45.png" alt="图片替换文本" width="700" align="bottom" />]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSCE611-OS-Project03</title>
      <link href="/2024/02/23/CSCE611-OS-Project03/"/>
      <url>/2024/02/23/CSCE611-OS-Project03/</url>
      
        <content type="html"><![CDATA[<p>Github Link: <a href="https://github.com/tamu-edu-students/CSCE410-611-Spring2024-Hanzhong_Liu">https://github.com/tamu-edu-students/CSCE410-611-Spring2024-Hanzhong_Liu</a></p><p>Files I modified: </p><ul><li>cont_frame_pool.H/C</li><li>page table.H/C</li><li>copykernel.sh<ul><li>Modified to fit Mac OS</li></ul></li></ul><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/Screenshot%202024-02-23%20at%2021.44.43.png" alt="图片替换文本" width="200" align="bottom" /><p><strong>Step 1</strong> Init memory pools:<br>We have two pools : kernel pool and process pool. Kernel pool is used for store infomations from kernel like page table. Process pool is to allocate memory to processes. When a page fault is triggered, the page fault handle will get a frame from process pool and map it from the address that fault happened.</p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/mp2-frame-memory.drawio.png" alt="mp2-frame-memory.drawio (1)"></p><p><strong>Step 2</strong> add page fault handle</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PageFault_Handler</span> : <span class="keyword">public</span> ExceptionHandler &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">      <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">handle_exception</span><span class="params">(REGS * _regs)</span> </span>&#123;</span><br><span class="line">          PageTable::<span class="built_in">handle_fault</span>(_regs);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125; pagefault_handler;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  ExceptionHandler::<span class="built_in">register_handler</span>(<span class="number">14</span>, &amp;pagefault_handler);</span><br></pre></td></tr></table></figure><p>In this code, we add a handle for fault 14, which is page fault. The page fault will be processed by the static function PageTable::handle_fault().</p><p><strong>Step 3</strong> Init paging</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PageTable::<span class="built_in">init_paging</span>(&amp;kernel_mem_pool,</span><br><span class="line">                         &amp;process_mem_pool,</span><br><span class="line">                         <span class="number">4</span> MB); <span class="comment">/* We share the first 4MB */</span></span><br><span class="line">  </span><br><span class="line">  PageTable pt;</span><br><span class="line">  </span><br><span class="line">  pt.<span class="built_in">load</span>();</span><br></pre></td></tr></table></figure><p>In this code, we first init the PageTable’s static variables by pass two memory pools to it (init_paging). In init_paging, we, first apply one frame from kernel pool for page directory. Than, we map the first 4MB of memory to it physical address(use another frame as the first page table). This can help us able to access kernel pool’s frames directly.</p><p>This is the menory structure:</p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/Screenshot%202024-02-23%20at%2022.05.15.png" alt="图片替换文本" width="400" align="bottom" /><p>After that, we use <em>pt.load</em> to anable paging:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">PageTable::load</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">// before we set the paging bit to 1, we must put the address of the page directory into CR3.</span></span><br><span class="line">   current_page_table = <span class="keyword">this</span>;</span><br><span class="line">   <span class="built_in">write_cr3</span>((<span class="type">unsigned</span> <span class="type">long</span>) page_directory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PageTable::enable_paging</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">   paging_enabled = <span class="number">1</span>;</span><br><span class="line">   <span class="comment">//  the paging bit of CR0(bit 31) when set to 1 enables paging</span></span><br><span class="line">   <span class="built_in">write_cr0</span>(<span class="built_in">read_cr0</span>() | <span class="number">0x80000000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Step 4</strong> process page faluts</p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/Screenshot%202024-02-25%20at%2010.43.20.png" alt="图片替换文本" width="500" align="bottom" /><p>Firstly, get fault virtual memory address from cr2”</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">long</span> faulting_address = <span class="built_in">read_cr2</span>();</span><br></pre></td></tr></table></figure><p>Get page dir index and page table index from address. pd_index is the top 10 bits and pt_index can get from bits from 12 to 22.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">long</span> pd_index = faulting_address &gt;&gt; <span class="number">22</span>; <span class="comment">// index in page dir</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> pt_index = (faulting_address &gt;&gt; <span class="number">12</span>) &amp; <span class="number">0b1111111111</span>; <span class="comment">// index in page table</span></span><br></pre></td></tr></table></figure><p>For two level page table, may the page table is not exist. We can determine it by check the first bit of pd[pd_index].</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!(pd[pd_index] &amp; <span class="number">1</span>)) &#123;</span><br><span class="line"><span class="comment">// page table not exist</span></span><br><span class="line">  <span class="comment">// apply a new frame from kernel pool</span></span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the end, we apply a new frame from process pool and add it to page table.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">long</span> new_frame = process_mem_pool-&gt;<span class="built_in">get_frames</span>(<span class="number">1</span>);</span><br><span class="line">pt[pt_index] = (new_frame * PAGE_SIZE) | <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p><strong>Result</strong>:</p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/Screenshot%202024-02-23%20at%2022.22.42.png" alt="Screenshot 2024-02-23 at 22.22.42"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSCE611-OS-Project02-Frame Manager</title>
      <link href="/2024/02/10/CSCE611-OS-Project02-Frame-Manager/"/>
      <url>/2024/02/10/CSCE611-OS-Project02-Frame-Manager/</url>
      
        <content type="html"><![CDATA[<h1 id="CSCE611-OS-MP02-Frame-Manager"><a href="#CSCE611-OS-MP02-Frame-Manager" class="headerlink" title="CSCE611-OS-MP02-Frame-Manager"></a>CSCE611-OS-MP02-Frame-Manager</h1><p>Github Link: <a href="https://github.com/tamu-edu-students/CSCE410-611-Spring2024-Hanzhong_Liu">https://github.com/tamu-edu-students/CSCE410-611-Spring2024-Hanzhong_Liu</a></p><p>Files I modified: </p><ul><li>cont_frame_pool.H</li><li>cont_frame_pool.C</li><li>copykernel.sh<ul><li>Modified to fit Mac OS</li></ul></li><li>makefile<ul><li>Add a new item <code>make run</code> to make it easier to start the kernel<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">run: copy start_vm</span></span><br><span class="line"><span class="section">copy: </span></span><br><span class="line">./copykernel.sh</span><br><span class="line"><span class="section">start_vm:</span></span><br><span class="line">bochs -f bochsrc.bxrc</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="Memory-Structure"><a href="#Memory-Structure" class="headerlink" title="Memory Structure"></a>Memory Structure</h3><p><strong>Design of memory pools:</strong></p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/mp2-frame-memory.drawio.png" alt="mp2-frame-memory.drawio (1)"></p><p><strong>Design of the bitmap:</strong><br>I used two bits to store the status of a frame. The first bit indicates whether the frame is used and the second bit indicates whether the frame is the head of a frame sequence. So, we have the follows:</p><ul><li><code>[0,x]</code> : Not Used (<code>x</code> is 0 or 1)</li><li><code>[1,1]</code> : Used and this frame is the head of a sequence</li><li><code>[1,0]</code> : Used and this frame is not the head of a sequence</li></ul><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/mp2-frame-bitmap.drawio.png" alt="mp2-frame-bitmap.drawio"></p><h3 id="Get-Frames"><a href="#Get-Frames" class="headerlink" title="Get Frames"></a>Get Frames</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">long</span> <span class="title">ContFramePool::get_frames</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> _n_frames)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>The function first determines if there are enough frames to allocate, then iterates through the bitmap, looking for appropriate frames, and returns the frame’s id.</li></ul><h3 id="Release-Frames"><a href="#Release-Frames" class="headerlink" title="Release Frames"></a>Release Frames</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">release_frames_internel</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> _first_frame_no)</span></span>;</span><br><span class="line"></span><br><span class="line">ContFramePool*        next_pool;  <span class="comment">// next pool</span></span><br><span class="line"><span class="type">static</span> ContFramePool* pools_head; <span class="comment">// head point of all polls</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">release_frames</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> _first_frame_no)</span></span>;</span><br></pre></td></tr></table></figure><ul><li><strong><code>release_frames_internel</code></strong>: An internal function to release frames starting from a given frame number within a specific pool.</li><li><strong><code>next_pool</code></strong>: A pointer to the next memory frame pool, enabling a linked list structure for pool management.</li><li><strong><code>pools_head</code></strong>: A static pointer that serves as the head of the list of all memory frame pools.</li><li><strong><code>release_frames</code></strong>: A static function that releases frames by locating the correct pool using the frame’s ID and then invoking <code>release_frames_internel</code> for that pool.</li></ul><p><strong>Release process:</strong></p><ul><li>release_frames is a static function which has only one parameter <code>_first_frame_no</code></li><li>release_frames first determines which pool the frame belongs to, and then use <code>global_kernel_memory_pool</code> and <code>global_process_memory_pool </code> to releases it.</li><li>Since one sequence of frames needs to be released, the release process constantly determines whether a new head (Frame with <code>Used_Head</code> tag in bitmap) has been encountered. If so, the release_frames_internel will finish the release process and return.</li></ul><h3 id="Output-Test"><a href="#Output-Test" class="headerlink" title="Output/Test"></a>Output/Test</h3><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/Screenshot%202024-02-10%20at%2016.26.52.png" alt="Screenshot 2024-02-10 at 16.26.52"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSCE611 OS Project01 Note</title>
      <link href="/2024/01/25/CSCE611-OS-Projest01-Note/"/>
      <url>/2024/01/25/CSCE611-OS-Projest01-Note/</url>
      
        <content type="html"><![CDATA[<p>In this document, I describe the steps I took to add gdb debug support to the kernel in MacBook M2.</p><h2 id="1-Environment-preparation"><a href="#1-Environment-preparation" class="headerlink" title="1) Environment preparation"></a>1) Environment preparation</h2><p>Set up Bochs with  GDB support on MacBook M2:</p><p><strong>Step01</strong>, download source code from bochs’s GitHub releases: <a href="https://github.com/bochs-emu/Bochs/releases/tag/REL_2_7_FINAL">https://github.com/bochs-emu/Bochs/releases/tag/REL_2_7_FINAL</a></p><p><strong>Step02</strong>, set the configure to enable GDB stub:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> [Bochs<span class="string">&#x27; dir]</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="string">./configure --enable-ne2000 \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">            --enable-all-optimizations \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">            --enable-cpu-level=6 \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">            --enable-x86-64 \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">            --enable-vmx=2 \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">            --enable-pci \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">            --enable-usb \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">            --enable-usb-ohci \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">            --enable-e1000 \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">            --enable-disasm \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">            --disable-debugger-gui \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">            --with-sdl \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">            --prefix=$HOME/opt/bochs \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">            --enable-gdb-stub  # important, --enable-debugger is not work</span></span></span><br></pre></td></tr></table></figure><p><strong>Step03</strong>, prepare and make Bochs:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">brew install sdl</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make</span></span><br></pre></td></tr></table></figure><p><strong>Step04</strong>, install GDB:</p><p>Now, no native gdb is supposed in MacBook M2. So I installed another one : i386-elf-gdb</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">brew install i386-elf-gdb</span></span><br></pre></td></tr></table></figure><h2 id="2-Add-debug-support-to-the-kernel"><a href="#2-Add-debug-support-to-the-kernel" class="headerlink" title="2) Add debug support to the kernel"></a>2) Add debug support to the kernel</h2><p><strong>Step05</strong>, modify MP’s makefile:</p><p>Add <em>-g</em> flag in makefile:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">AS=nasm</span><br><span class="line"></span><br><span class="line">GCC=/opt/homebrew/Cellar/x86_64-elf-gcc/13.2.0/bin/x86_64-elf-gcc</span><br><span class="line">LD=/opt/homebrew/Cellar/x86_64-elf-binutils/2.41_1/bin/x86_64-elf-ld</span><br><span class="line"></span><br><span class="line">GCC_OPTIONS = -m32 -nostdlib -fno-builtin -nostartfiles -nodefaultlibs -fno-exceptions -fno-rtti -fno-stack-protector -fleading-underscore -fno-asynchronous-unwind-tables</span><br><span class="line"></span><br><span class="line"><span class="section">all: kernel.bin</span></span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm -f *.o *.bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># ==== KERNEL ENTRY POINT ====</span></span><br><span class="line"><span class="section">start.o: start.asm</span></span><br><span class="line"><span class="variable">$(AS)</span> -f elf -o start.o start.asm</span><br><span class="line"></span><br><span class="line"><span class="comment"># ==== UTILITIES ====</span></span><br><span class="line"><span class="section">utils.o: utils.H utils.C</span></span><br><span class="line"><span class="variable">$(GCC)</span> <span class="variable">$(GCC_OPTIONS)</span> -g -c -o utils.o utils.C</span><br><span class="line"></span><br><span class="line"><span class="comment"># ==== DEVICES ====</span></span><br><span class="line"><span class="section">console.o: console.H console.C</span></span><br><span class="line"><span class="variable">$(GCC)</span> <span class="variable">$(GCC_OPTIONS)</span> -g -c -o console.o console.C</span><br><span class="line"></span><br><span class="line"><span class="comment"># ==== KERNEL MAIN FILE ====</span></span><br><span class="line"><span class="section">kernel.o: kernel.C</span></span><br><span class="line"><span class="variable">$(GCC)</span> <span class="variable">$(GCC_OPTIONS)</span> -g -c -o kernel.o kernel.C</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">kernel.bin: start.o kernel.o console.o utils.o linker.ld</span></span><br><span class="line"><span class="variable">$(LD)</span> -melf_i386 -T linker.ld -o kernel.bin start.o kernel.o console.o utils.o</span><br></pre></td></tr></table></figure><p>Modify linker.ld, delete the first line <em>OUTPUT_FOTMAT(‘binary’)</em>.</p><h2 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h2><p><strong>Step06</strong>, start Bochs:</p><p>I did not install bochs. So I use the path to call its runnable file directly</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">/Users/lhz/bochs/bochs -f bochsrc.bxrc</span></span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/start.png" alt="图片替换文本" width="800" align="bottom" /><p><strong>Step07</strong>, start GDB and connect to Bochs:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">i386-elf-gdb kernel.bin <span class="comment"># start GDB</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">set</span> architecture i386:x86-64:intel</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">target remote localhost:1234 <span class="comment"># connect to bochs</span></span></span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/connect.png" alt="图片替换文本" width="800" align="bottom" /><p><strong>Step08</strong>, set breakpoint and debug in kernel:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ b main() <span class="comment"># set breakpoint</span></span><br><span class="line">$ <span class="built_in">continue</span> <span class="comment"># stop at main(), the breakpoint</span></span><br><span class="line">$ <span class="built_in">continue</span> <span class="comment"># enter main(), start console</span></span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/running.png" alt="图片替换文本" width="800" align="bottom" />]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSCE611 OS Env Prepare (Macbook M-chip)</title>
      <link href="/2024/01/23/CSCE611-MP1/"/>
      <url>/2024/01/23/CSCE611-MP1/</url>
      
        <content type="html"><![CDATA[<p>This assumes that you have at the very least set up developer tools and <a href="https://brew.sh/">Homebrew</a> on your machine.</p><h2 id="Step01-GCC-Install"><a href="#Step01-GCC-Install" class="headerlink" title="Step01, GCC Install"></a>Step01, GCC Install</h2><p>In the class, we need to build a unix-like kernel in X86 arch. Because MacBook with M2 chip is arm arch. So, we can’t use the original gcc in homebrew. Fortunate, there is a <strong>x86_64-elf-gcc</strong> in home-brew repo:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ brew search gcc</span><br><span class="line">==&gt; Formulae</span><br><span class="line">aarch64-elf-gcc ✔                                            libgccjit</span><br><span class="line">arm-none-eabi-gcc                                            nativeos/i386-elf-toolchain/i386-elf-gcc</span><br><span class="line">gcc                                                          nativeos/i386-elf-toolchain/i386-elf-gcc@11.1</span><br><span class="line">gcc@10                                                       nativeos/i386-elf-toolchain/i386-elf-gcc@11.2</span><br><span class="line">gcc@11 ✔                                                     riscv64-elf-gcc</span><br><span class="line">gcc@12 ✔                                                     x86_64-elf-gcc ✔</span><br><span class="line">gcc@5                                                        ghc</span><br><span class="line">gcc@6                                                        grc</span><br><span class="line">gcc@7                                                        scc</span><br><span class="line">gcc@8                                                        tcc</span><br><span class="line">gcc@9                                                        ncc</span><br><span class="line">i686-elf-gcc</span><br></pre></td></tr></table></figure><p>Use <strong>brew search gcc</strong> in terminal, you can find “x86_64-elf-gcc”. So, use “brew install x86_64-elf-gcc” to install it. Now, you can use “aarch64-elf-gcc” to compail the kernel.</p><p>All tool intalled by gcc will be store in this path: <strong>/opt/homebrew/Cellar/</strong>. So you should heve this “/opt/homebrew/Cellar/x86_64-elf-binutils/2.41_1/bin/x86_64-elf-ld”.</p><h2 id="Step2-Tools-Install"><a href="#Step2-Tools-Install" class="headerlink" title="Step2, Tools Install"></a>Step2, Tools Install</h2><ul><li>Install wget <code>brew install wget</code></li><li>Install nasm: <code>brew install nasm</code></li><li>Install qemu and bochs: <code>brew install qemu bochs</code></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2023 Self Review</title>
      <link href="/2023/12/26/2023-Self-Review/"/>
      <url>/2023/12/26/2023-Self-Review/</url>
      
        <content type="html"><![CDATA[<p>2023即将结束，总结下这一年的收获～</p><p>（年末了，正在度过极其无聊的寒假，没事随笔写一写）</p><p><a href="https://carpal-cornflower-8c1.notion.site/2023-Self-Review-c53c8ebfbb294dcc8af60b1631ec5d06">Link</a></p><p><a href="https://carpal-cornflower-8c1.notion.site/2023-Self-Review-c53c8ebfbb294dcc8af60b1631ec5d06">https://carpal-cornflower-8c1.notion.site/2023-Self-Review-c53c8ebfbb294dcc8af60b1631ec5d06</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Color-FaaS-2</title>
      <link href="/2023/10/27/Color-FaaS-2/"/>
      <url>/2023/10/27/Color-FaaS-2/</url>
      
        <content type="html"><![CDATA[<h1 id="Color-FaaS-Doc-Final"><a href="#Color-FaaS-Doc-Final" class="headerlink" title="Color FaaS Doc Final"></a>Color FaaS Doc Final</h1><p>Designed By Hanzhong Liu, Xi Shi</p><p>All Videos: <a href="https://www.youtube.com/playlist?list=PLARUmtazqWjWrdYpJCU77CL7i0meZPqK9">https://www.youtube.com/playlist?list=PLARUmtazqWjWrdYpJCU77CL7i0meZPqK9</a></p><p>Website &amp; Bill Service: <a href="https://github.com/muchengl/tamu-sw-faas">https://github.com/muchengl/tamu-sw-faas</a></p><p>Client: <a href="https://github.com/muchengl/Color-FaaS-Core">https://github.com/muchengl/Color-FaaS-Core</a></p><p>Function SDK: <a href="https://github.com/muchengl/Color-FaaS-SDK">https://github.com/muchengl/Color-FaaS-SDK</a></p><p>Environment: <a href="https://drive.google.com/file/d/1UE5ZxRM66E4el5G-MV9gjSpM_WBBAFvZ/view?usp=drive_link">https://drive.google.com/file/d/1UE5ZxRM66E4el5G-MV9gjSpM_WBBAFvZ/view?usp=drive_link</a></p><p><strong>Catalog</strong></p><p>[toc]</p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a><strong>Introduction</strong></h2><p>In this project, we have undertaken a significant redesign of our existing system, transitioning to a microservices architecture and incorporating multi-modal client interfaces. This iteration represents an evolution of our system, focusing on enhanced scalability, modularity, and user experience.</p><p>Our submission for this iteration includes:</p><ol><li><strong>Requirements:</strong> Detailed descriptions and UI sketches of all use cases, incorporating standard format narratives and sequence diagrams. Video recordings demonstrating the system in action for each defined use case, highlighting functionality and user interaction.</li><li><strong>Database Design:</strong> We redesigned our DB based on MongoDB. Comprehensive outlines of data entities, relationships, and an entity-relationship diagram, accompanied by sample data.</li><li><strong>Architectural Design:</strong> In-depth descriptions of client and server components, communication protocols, data formats, and an overarching system architecture diagram.</li><li><strong>Runnable System:</strong> A fully functional system with a personalized and polished UI.</li><li><strong>Installation and Usage Manual:</strong> A detailed Handbook covering installation procedures, usage instructions, and information on necessary libraries and frameworks.</li></ol><h2 id="User-cases-and-UI-design"><a href="#User-cases-and-UI-design" class="headerlink" title="User cases and UI design"></a><strong>User cases and UI design</strong></h2><h4 id="User-case-Register-amp-Login"><a href="#User-case-Register-amp-Login" class="headerlink" title="**User case **: Register &amp; Login"></a>**User case **: Register &amp; Login</h4><table><thead><tr><th>Items</th><th></th></tr></thead><tbody><tr><td>Actor</td><td>User</td></tr><tr><td>Goal</td><td>Register a new account and login to the platform</td></tr><tr><td>Path</td><td>1.User visits the website landing page<br />2.System returns the html code of the page<br />3.User clicks “New User”<br />4.System display the form for registering a new user<br />5.User fill in the new user information and submit<br />6.System writes the new user information to the database. And jump back to the landing page<br />7.User enters the new user information and clicks Login<br />8.System checks whether the user exists. If yes, go to the home page</td></tr></tbody></table><p>UI of this User case:</p><p>VIdeo: <a href="https://youtu.be/bLijflOhaDs?si=2M6rCZVapOltcmfz">https://youtu.be/bLijflOhaDs?si=2M6rCZVapOltcmfz</a></p><img src="/Users/lhz/Desktop/SW/SW-final/Register.png" alt="图片替换文本" width="600" align="bottom" /><img src="/Users/lhz/Desktop/SW/SW-final/login.png" alt="图片替换文本" width="800" align="bottom" /><h4 id="User-case-Development-Upload-function"><a href="#User-case-Development-Upload-function" class="headerlink" title="**User case **: Development/Upload function"></a>**User case **: Development/Upload function</h4><table><thead><tr><th>Items</th><th></th></tr></thead><tbody><tr><td>Actor</td><td>Developer</td></tr><tr><td>Goal</td><td>A User want to deploy a application in cloud environment</td></tr><tr><td>Path</td><td>1. User develop a func in his/her computer by a SDK and upload this function from the webpage<br />2. System saves the function file (in HDFS), and the function file is successfully created <br />3. User views the corresponding information in the function list</td></tr></tbody></table><p>UI of this User case</p><p>Video: <a href="https://youtu.be/zrBuOFd2jsk?si=BBQKRtWMwfU-F9Aj">https://youtu.be/zrBuOFd2jsk?si=BBQKRtWMwfU-F9Aj</a></p><img src="/Users/lhz/Desktop/SW/SW-final/function.png" alt="图片替换文本" width="800" align="bottom" /><h4 id="User-case-Test-Function-via-web-page"><a href="#User-case-Test-Function-via-web-page" class="headerlink" title="**User case **: Test Function via web page"></a>**User case **: Test Function via web page</h4><table><thead><tr><th>Items</th><th></th></tr></thead><tbody><tr><td>Actor</td><td>User</td></tr><tr><td>Goal</td><td>Test the function from platform’s web page</td></tr><tr><td>Path</td><td>1. User enter the function test page<br />2. System return the web page to user<br />3. User test this function from web page.<br />4. System calls the function and returns the result and log</td></tr></tbody></table><p>UI of this User case:</p><p>Video: <a href="https://youtu.be/nybjcanzMko?si=rx2toB0qJ9R3zZx8">https://youtu.be/nybjcanzMko?si=rx2toB0qJ9R3zZx8</a></p><img src="/Users/lhz/Desktop/SW/SW-final/test.png" alt="图片替换文本" width="700" align="bottom" /><img src="/Users/lhz/Desktop/SW/SW-final/test02.png" alt="图片替换文本" width="700" align="bottom" /><h4 id="User-case-Test-Functions-via-Public-URL"><a href="#User-case-Test-Functions-via-Public-URL" class="headerlink" title="**User case **: Test Functions via Public URL"></a>**User case **: Test Functions via Public URL</h4><table><thead><tr><th>Items</th><th></th></tr></thead><tbody><tr><td>Actor</td><td>User</td></tr><tr><td>Goal</td><td>Test the function from platform’s web page</td></tr><tr><td>Path</td><td>1. User enter the function test page<br />2. System return the web page to user<br />3. User copy the “public url” and test it in Browser<br />4. System calls the function and returns the result and log as JSON. Show it in Browser.</td></tr></tbody></table><p>Video: <a href="https://youtu.be/2_BJYx0JUBU?si=xXDeK_aF2hs8fj2u">https://youtu.be/2_BJYx0JUBU?si=xXDeK_aF2hs8fj2u</a></p><h4 id="User-case-Test-Functions-in-the-Desktop-Tool"><a href="#User-case-Test-Functions-in-the-Desktop-Tool" class="headerlink" title="**User case **: Test Functions in the Desktop Tool"></a>**User case **: Test Functions in the Desktop Tool</h4><p>There are two options to implement this Desktop tool, one is to write an <strong>interactive command line</strong>, and the other is to implement the program with UI. Since my project is a developer-oriented tool, I decided to implement an interactive command line program that more closely resembles a real-world product (like these tools in linux).</p><table><thead><tr><th>Items</th><th></th></tr></thead><tbody><tr><td>Actor</td><td>Developer</td></tr><tr><td>Goal</td><td>Test functions in desktop tool</td></tr><tr><td>Path</td><td>1. User start the Desktop tool and login<br />2. System verifies that user information is correct<br />3. User enter list, history or test command to use different functions<br />4.System process the command and return the result<br />5.User see the output in screen.</td></tr></tbody></table><p>UI of this User case:</p><p>Video: <a href="https://youtu.be/Uq23_F1yW-k?si=FnUfgjdBmk0kwb4i">https://youtu.be/Uq23_F1yW-k?si=FnUfgjdBmk0kwb4i</a></p><img src="/Users/lhz/Desktop/SW/SW-final/tool01.png" alt="图片替换文本" width="300" align="bottom" /><img src="/Users/lhz/Desktop/SW/SW-final/tool02.png" alt="图片替换文本" width="500" align="bottom" /><img src="/Users/lhz/Desktop/SW/SW-final/tool03.png" alt="图片替换文本" width="500" align="bottom" /><h4 id="User-case-Manage-tasks"><a href="#User-case-Manage-tasks" class="headerlink" title="**User case **: Manage tasks"></a>**User case **: Manage tasks</h4><table><thead><tr><th>Items</th><th></th></tr></thead><tbody><tr><td>Actor</td><td>Developer</td></tr><tr><td>Goal</td><td>Trace  the running status of a Func</td></tr><tr><td>Path</td><td>1. User enter Task manage page<br />2. System return the manage page<br />3. User look at the running status, output and time of the function</td></tr></tbody></table><p>Video: <a href="https://youtu.be/dJ60XcTPhV0?si=MnkhJ3wmDE60XXmE">https://youtu.be/dJ60XcTPhV0?si=MnkhJ3wmDE60XXmE</a></p><img src="/Users/lhz/Desktop/SW/SW-final/tasks.png" alt="图片替换文本" width="700" align="bottom" /><h4 id="User-case-Top-up-user’s-account"><a href="#User-case-Top-up-user’s-account" class="headerlink" title="**User case **: Top up user’s account"></a>**User case **: Top up user’s account</h4><table><thead><tr><th>Items</th><th></th></tr></thead><tbody><tr><td>Actor</td><td>Developer</td></tr><tr><td>Goal</td><td>Top up</td></tr><tr><td>Path</td><td>1. User enter the account info page<br />2. System return the web page to user<br />3. User click “Recharge” button<br />4. System show the recharge form<br />5.User type info and click the button “Submit”<br />6.System add money to user’s account</td></tr></tbody></table><p>UI of this User case:</p><p>Video: <a href="https://youtu.be/bL5l1LQHHrw?si=pWOBahXJLAHMEsHh">https://youtu.be/bL5l1LQHHrw?si=pWOBahXJLAHMEsHh</a></p><img src="/Users/lhz/Desktop/SW/SW-final/recarge.png" alt="图片替换文本" width="800" align="bottom" /><h4 id="User-case-Pay-the-bill"><a href="#User-case-Pay-the-bill" class="headerlink" title="**User case **: Pay the bill"></a>**User case **: Pay the bill</h4><table><thead><tr><th>Items</th><th></th></tr></thead><tbody><tr><td>Actor</td><td>Developer</td></tr><tr><td>Goal</td><td>Pay the bill</td></tr><tr><td>Path</td><td>1. User enter the account info page<br />2. System return the web page to user<br />3. User click “Update Bill” button<br />4. System queries all unpaid records and generates a bill. Platform will show the bill in web page<br />5. User click “Pay” button<br />6. System deducts the fee and completes the payment</td></tr></tbody></table><p>UI of this User case:</p><p>Video: <a href="https://youtu.be/XO2TSqXJF0Y?si=Ozx1OBktopRhTn0i">https://youtu.be/XO2TSqXJF0Y?si=Ozx1OBktopRhTn0i</a></p><img src="/Users/lhz/Desktop/SW/SW-final/userdata.png" alt="图片替换文本" width="800" align="bottom" /><h2 id="Architectural-design"><a href="#Architectural-design" class="headerlink" title="Architectural design"></a><strong>Architectural design</strong></h2><h4 id="High-Level-Design"><a href="#High-Level-Design" class="headerlink" title="High Level Design"></a><strong>High Level Design</strong></h4><p>This system comprises three microservices: <strong>Website Service</strong>, <strong>Billing Service</strong>, and <strong>Execution Client</strong>. The Website interact with the Execution Client and Billing Servers using the <strong>Http RestFul API</strong> protocol. The Website Service is responsible for user login, function upload, and function management. The Billing Server handles generating bills and processing user operations for recharge and payment. </p><p>The Execution Client is a multi-instance service, allowing for the deployment of numerous instances to achieve horizontal scaling and enhance system performance. The clients will register its information in ZooKeeper. The Website can then retrieve the list of clients from ZooKeeper and subsequently dispatch function calls to these clients.</p><p>Core cluster may contains many servers, so it can process many tasks in the same time. A <strong>Client</strong> program will run in In these servers. When a task is sent to a Client, it will stand up a Executor to process this task. The communitetion bewteen Client and Executor will been held by <strong>gPRC</strong>. Because, Function files are very big, so worker will use LRU to cache some function instances.</p><p>As for the architecture of this system：</p><img src="/Users/lhz/Desktop/SW/SW-final/arch.png" alt="图片替换文本" width="700" align="bottom" /><h4 id="Data-Storage-System"><a href="#Data-Storage-System" class="headerlink" title="Data Storage System"></a><strong>Data Storage System</strong></h4><p>In Website service and Bill service, we use <strong>MongoDB</strong> to store user’s information. Website will provide user with functions include: add/update a Func, pay for the bill, trace Func status, debug function via webpage.</p><p>For function file storage, we use <strong>HDFS</strong> as the cloud storage system. User’s function files will be uploaded to HDFS and got by Executor.</p><p>For cluster management, we use <strong>ZooKeeper</strong> as the information register system. All clients’ info will be stored in ZooKeeper.</p><h4 id="Data-format-between-services"><a href="#Data-format-between-services" class="headerlink" title="Data format between services"></a><strong>Data format between services</strong></h4><p><strong>User ↔ Website</strong></p><table><thead><tr><th>Request</th><th>Protocol</th><th>Data Type</th><th>Request Data</th><th>Response Data</th><th>URL</th></tr></thead><tbody><tr><td>Login</td><td>POST</td><td>Form</td><td>Username<br />Password</td><td>Redirect to the home page</td><td>/user</td></tr><tr><td>Register new user</td><td>POST</td><td>Form</td><td>Username<br />Password</td><td>register success: “ok”<br />fail to register: “fail”</td><td>/add/user</td></tr><tr><td>Upload a new function</td><td>POST</td><td>Form</td><td>FunctionName<br />Description<br />Function File</td><td>upload success: “ok”<br />fail to upload: “fail”</td><td>/upload/func</td></tr><tr><td>Update function’s data</td><td>POST</td><td>Json</td><td>New FunctionName<br />New Description</td><td>update success: “ok”<br />fail to update: “fail”</td><td>/update/func</td></tr><tr><td>Get user’s function list</td><td>GET</td><td>url</td><td>User ID</td><td>A json list contains all user’s function</td><td>/funcs</td></tr><tr><td>Get user’s function access history</td><td>GET</td><td>url</td><td>User ID</td><td>A json list contains all user’s function access history</td><td>/user/tasks</td></tr><tr><td>Pay for the bill <br />(Forward to the Bill service)</td><td>POST</td><td>Json</td><td>User ID<br />Bill ID</td><td>pay success: “ok”<br />fail to pay: “fail”</td><td>/pay/bill</td></tr><tr><td>Top up<br />(Forward to the Bill service)</td><td>POST</td><td>Json</td><td>User ID<br />Card Number<br />Amount of money</td><td>success: “ok”<br />fail: “fail”</td><td>/user/add/balance</td></tr><tr><td>Update Bill<br />(Forward to the Bill service)</td><td>GET</td><td>Json</td><td>User ID</td><td>success: “ok”<br />fail: “fail”</td><td>/update/bills</td></tr><tr><td>Get Bill List<br />(Forward to the Bill service)</td><td>GET</td><td>Json</td><td>User ID</td><td>A json list contains all user’s bill history</td><td>/bills</td></tr><tr><td>Invoke a function</td><td>POST/GET</td><td>Json</td><td>Function ID<br />Task Input</td><td>A json of output and logs</td><td>/func/invoke</td></tr></tbody></table><p><strong>Website ↔ Bill service</strong></p><table><thead><tr><th>Request</th><th>Protocol</th><th>Data Type</th><th>Request Data</th><th>Response Data</th><th>URL</th></tr></thead><tbody><tr><td>Pay for the bill</td><td>POST</td><td>Json</td><td>User ID<br />Bill ID</td><td>pay success: “ok”<br />fail to pay: “fail”</td><td>/pay/bill</td></tr><tr><td>Top up</td><td>POST</td><td>Json</td><td>User ID<br />Card Number<br />Amount of money</td><td>success: “ok”<br />fail: “fail”</td><td>/user/add/balance</td></tr><tr><td>Update Bill</td><td>GET</td><td>Json</td><td>User ID</td><td>success: “ok”<br />fail: “fail”</td><td>/update/bills</td></tr><tr><td>Get Bill List</td><td>GET</td><td>Json</td><td>User ID</td><td>A json list contains all user’s bill history</td><td>/bills</td></tr></tbody></table><p><strong>Website ↔ Client</strong></p><table><thead><tr><th>Request</th><th>Protocol</th><th>Data Type</th><th>Request Data</th><th>Response Data</th><th>URL</th></tr></thead><tbody><tr><td>Submit a task</td><td>POST</td><td>Json</td><td>TaskID          <br />FuncName        <br />FuncID          <br />FuncStorageType<br />TaskFuncPath     <br />TaskRunningMode <br />FuncType      <br />TaskCPUCore     <br />TaskMem        <br />TaskDiskSpace   <br />TaskMaxTime     <br />TaskInput</td><td>A JSON include:<br />status,<br />msg<br />logs</td><td>/func/invoke</td></tr></tbody></table><h2 id="Database-Design"><a href="#Database-Design" class="headerlink" title="Database Design"></a><strong>Database Design</strong></h2><p>This FaaS platform’s database(MongoDB) design encompasses multiple tables, intended to manage user information, bills, functions, function execution records, billing units, and account history details. Here’s a detailed explanation of these tables:</p><ol><li><strong>User Info Table</strong>:<ul><li><code>User_ID</code>: A unique identifier for the user, of type Bigint.</li><li><code>User_Email</code>: The email address of the user.</li><li><code>User_Name</code>: The name of the user, which can be up to 20 characters.</li><li><code>User_Password</code>: The password of the user, capped at 20 characters.</li><li><code>User_Balance</code>: The balance in the user’s account, of type Bigint.</li></ul></li><li><strong>Bill Table</strong>:<ul><li><code>Bill_ID</code>: A unique identifier for the bill.</li><li><code>User_ID</code>: A unique identifier for the user, serving as an index.</li><li><code>Bill_Date</code>: The date of the bill.</li><li><code>Bill_Balance</code>: The amount of the bill.</li><li><code>Bill_tasks</code>: A JSON document inclueds all unpaid function running records, supported by MongoDB</li><li><code>Status</code>: The status of the bill, where 0 stands for unpaid and 1 for paid.</li></ul></li><li><strong>Function Table</strong>:<ul><li><code>Func_ID</code>: A unique identifier for the function.</li><li><code>User_ID</code>: A unique identifier for the user.</li><li><code>Func_Path</code>: The path to the function’s code in object storage services like S3.</li><li><code>Func_Explanation</code>: An explanation or description of the function.</li><li><code>Func_Resource</code>: Resources required by the function, in JSON format, e.g., {“CPU”:4,”MEM”:1024m,”DISK”:1024m}.</li></ul></li><li><strong>Func Running Record Table</strong>:<ul><li><code>ID</code>: A unique identifier for the execution record.</li><li><code>Func_ID</code>: A unique identifier for the function.</li><li><code>Running_Time</code>: Execution time, e.g., 100ms.</li><li><code>Status</code>: Status of execution, where 0 stands for failure, 1 for success, and 2 for pending.</li><li><code>Input</code>: Input data in JSON format.</li><li><code>Running_Date</code>: The date of execution.</li><li><code>Payment_Status</code>: Payment status, where 0 stands for unpaid and 1 for paid.</li></ul></li><li><strong>Billing Unit Table</strong>:<ul><li><code>Price</code>: The price, e.g., 0.01$/ms for functions.</li></ul></li><li><strong>Account Info History Table</strong>:<ul><li><code>ID</code>: A unique identifier for the record.</li><li><code>Date</code>: The date.</li><li><code>Type</code>: The action type (add fund or payment).</li><li><code>Account_num</code>: Account number.</li><li><code>Bill_ID</code>: The ID of the bill.</li><li><code>Money</code>: The amount.</li><li><code>User_ID</code>: A unique identifier for the user.</li></ul></li></ol><hr><h4 id="User-Info-Table"><a href="#User-Info-Table" class="headerlink" title="- User Info Table:"></a>- User Info Table:</h4><table><thead><tr><th>Item</th><th>Type</th><th>Explanation/Sample Data</th></tr></thead><tbody><tr><td>User_ID</td><td>String</td><td></td></tr><tr><td>User_Email</td><td>String</td><td></td></tr><tr><td>User_Name</td><td>String</td><td></td></tr><tr><td>User_Password</td><td>String</td><td></td></tr><tr><td>User_Balance</td><td>Bigint</td><td>1000.0$</td></tr></tbody></table><h4 id="Bill-Table"><a href="#Bill-Table" class="headerlink" title="- Bill Table"></a>- Bill Table</h4><table><thead><tr><th>Item</th><th>Type</th><th>Explanation/Sample Data</th></tr></thead><tbody><tr><td>Bill_ID</td><td>String</td><td></td></tr><tr><td>User_ID</td><td>String</td><td>Index</td></tr><tr><td>Bill_Date</td><td>String</td><td></td></tr><tr><td>Bill_Balance</td><td>Bigint</td><td></td></tr><tr><td>Bill_Tasks</td><td>Task</td><td>A JSON document inclueds all unpaid function running records, supported by MongoDB<br />{<br />    {taskID:1,…},<br />    {taskID:2,…}<br />}</td></tr><tr><td>Status</td><td>int</td><td>0 unpay, 1 paid</td></tr></tbody></table><h4 id="Function-Table"><a href="#Function-Table" class="headerlink" title="- Function Table"></a>- Function Table</h4><table><thead><tr><th>Item</th><th>Type</th><th>Explanation/Sample Data</th></tr></thead><tbody><tr><td>Func_ID</td><td>String</td><td></td></tr><tr><td>User_ID</td><td>String</td><td></td></tr><tr><td>Func_Args</td><td>String</td><td>{“num1”:int,”num2”,int}</td></tr><tr><td>Func_Path</td><td>String</td><td>path of func’s code in HDFS or S3</td></tr><tr><td>Func_Explanation</td><td>String</td><td></td></tr></tbody></table><h4 id="Func-Running-Record"><a href="#Func-Running-Record" class="headerlink" title="- Func Running Record"></a>- Func Running Record</h4><table><thead><tr><th>tem</th><th>Type</th><th>Explanation/Sample Data</th></tr></thead><tbody><tr><td>Running_ID</td><td>String</td><td></td></tr><tr><td>Func_ID</td><td>String</td><td></td></tr><tr><td>Running_Time</td><td>String</td><td>Example: 100ms</td></tr><tr><td>Status</td><td>Int</td><td>0: fail, 1 success, 2 pending</td></tr><tr><td>Input</td><td>String</td><td>A input json</td></tr><tr><td>Running_Date</td><td>String</td><td></td></tr><tr><td>Payment_Status</td><td>Int</td><td>0 unpay, 1 paid</td></tr></tbody></table><h4 id="Billing-Unit"><a href="#Billing-Unit" class="headerlink" title="- Billing Unit"></a>- Billing Unit</h4><table><thead><tr><th>Item</th><th>Type</th><th>Explanation/Sample Data</th></tr></thead><tbody><tr><td>ID</td><td>Bitint</td><td></td></tr><tr><td>Price</td><td>float</td><td>0.0001$ / ms</td></tr></tbody></table><h4 id="Account-Info-History"><a href="#Account-Info-History" class="headerlink" title="- Account Info History"></a>- Account Info History</h4><table><thead><tr><th>Item</th><th>Type</th><th>Explanation/Sample Data</th></tr></thead><tbody><tr><td>ID</td><td>String</td><td></td></tr><tr><td>Date</td><td>String</td><td></td></tr><tr><td>Type</td><td>Int</td><td>Payment or ADD</td></tr><tr><td>Account_num</td><td>String</td><td></td></tr><tr><td>Bill_ID</td><td>Int</td><td></td></tr><tr><td>Money</td><td>Bigint</td><td></td></tr><tr><td>User_ID</td><td>Bigint</td><td></td></tr></tbody></table><h4 id="ER-Graph"><a href="#ER-Graph" class="headerlink" title="- ER Graph"></a>- ER Graph</h4><img src="/Users/lhz/Desktop/SW/SW-final/ER.png" alt="图片替换文本" width="600" align="bottom" /><h2 id="Handbook"><a href="#Handbook" class="headerlink" title="Handbook"></a><strong>Handbook</strong></h2><p>Website &amp; Bill Service Code: <a href="https://github.com/muchengl/tamu-sw-faas">https://github.com/muchengl/tamu-sw-faas</a></p><p>Client Code: <a href="https://github.com/muchengl/Color-FaaS-Core">https://github.com/muchengl/Color-FaaS-Core</a></p><p>Docker Environment: <a href="https://drive.google.com/file/d/1UE5ZxRM66E4el5G-MV9gjSpM_WBBAFvZ/view?usp=drive_link">https://drive.google.com/file/d/1UE5ZxRM66E4el5G-MV9gjSpM_WBBAFvZ/view?usp=drive_link</a></p><h4 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a><strong>Environment</strong></h4><p>This service includes a Website, Bill service, and Client. Both the Website and Bill service rely on a Java environment (Java 1.8+), while the Client is developed using Golang and requires Golang 1.21. Website and Bill service use Maven to manager all dependent environment. Client can use Golang’s mod to get all dependents.</p><h4 id="Start-Website-and-Bill-Service"><a href="#Start-Website-and-Bill-Service" class="headerlink" title="Start Website and Bill Service"></a><strong>Start Website and Bill Service</strong></h4><p>Step 01: Download/Clone all code of project.</p><p>Step 02: Open the project with IDEA.</p><p>Step 03: Open <strong>pom.xml</strong> in project and init maven for both main-module and bill-module.</p><p>Step 04: Run project in IDEA. Website is in main module <strong>com.tamu.faas.FaasApplication</strong>. Bill is in bill module <strong>com.tamu.faas.bill.BillApplication</strong></p><p>Step 05: com.tamu.faas.FaasApplication will use port 8080 and com.tamu.faas.bill.BillApplication will use 8081.</p><h4 id="Start-Client-Cluster"><a href="#Start-Client-Cluster" class="headerlink" title="Start Client Cluster"></a><strong>Start Client Cluster</strong></h4><p>Client uses makefile to manager the project, you can use the follows commands to init and build the project:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">➜ cd [client project&#x27;s dir in your computer]</span><br><span class="line">➜ make mod</span><br><span class="line">---&gt; make mod &lt;---</span><br><span class="line">go mod tidy</span><br><span class="line">go mod download</span><br><span class="line"></span><br><span class="line">➜ make build</span><br><span class="line">---&gt; make build &lt;---</span><br><span class="line">./build.sh</span><br><span class="line">  ---&gt; make clean &lt;---</span><br><span class="line">  ---&gt; init dir &lt;---</span><br><span class="line">  ---&gt; init files &lt;---</span><br><span class="line">  ---&gt; make server &lt;---</span><br><span class="line">  ---&gt; make client &lt;---</span><br><span class="line">  ---&gt; make executor &lt;---</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>And than, use the follows commands to start the client:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜ ./output/startup.sh --client</span><br></pre></td></tr></table></figure><p>If you see the following output, the client has started successfully (<strong>only one client</strong>, if you want to start many clients to form a cluster, you need to run muit-clients in many Containers/VMs):</p><img src="/Users/lhz/Desktop/SW/SW-final/run-core.png" alt="图片替换文本" width="800" align="bottom" /><h4 id="Start-Zookeeper-and-HDFS"><a href="#Start-Zookeeper-and-HDFS" class="headerlink" title="Start Zookeeper and HDFS"></a><strong>Start Zookeeper and HDFS</strong></h4><p>Start by docker-compose in project dir (May not work perfectly, may require manual installation) :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜ cd [docker-compose&#x27;s dir in your computer]</span><br><span class="line">➜ docker-compose up -d</span><br></pre></td></tr></table></figure><h4 id="Test-the-project"><a href="#Test-the-project" class="headerlink" title="Test the project"></a><strong>Test the project</strong></h4><p>Test the project by URL in your browser: <a href="http://localhost:8080/login">http://localhost:8080/login</a></p><p>HDFS URL in browser: <a href="http://localhost:9870/">http://localhost:9870/</a></p><p>Test desktop tool:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜ pip install prettytable requests</span><br><span class="line">➜ python3 client.py</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spark Check Point</title>
      <link href="/2023/09/25/Spark-Check-Point/"/>
      <url>/2023/09/25/Spark-Check-Point/</url>
      
        <content type="html"><![CDATA[<h1 id="Spark-check-point"><a href="#Spark-check-point" class="headerlink" title="Spark check point"></a>Spark check point</h1><p>In SparkContext, when a job is completed, rdd.doCheckpoint() will be called. </p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Run a function on a given set of partitions in an RDD and pass the results to the given</span></span><br><span class="line"><span class="comment">  * handler function. This is the main entry point for all actions in Spark.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * @param rdd target RDD to run tasks on</span></span><br><span class="line"><span class="comment">  * @param func a function to run on each partition of the RDD</span></span><br><span class="line"><span class="comment">  * @param partitions set of partitions to run on; some jobs may not want to compute on all</span></span><br><span class="line"><span class="comment">  * partitions of the target RDD, e.g. for operations like `first()`</span></span><br><span class="line"><span class="comment">  * @param resultHandler callback to pass each result to</span></span><br><span class="line"><span class="comment">  */</span>  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runJob</span></span>[<span class="type">T</span>, <span class="type">U</span>: <span class="type">ClassTag</span>](</span><br><span class="line">     rdd: <span class="type">RDD</span>[<span class="type">T</span>],</span><br><span class="line">     func: (<span class="type">TaskContext</span>, <span class="type">Iterator</span>[<span class="type">T</span>]) =&gt; <span class="type">U</span>,</span><br><span class="line">     partitions: <span class="type">Seq</span>[<span class="type">Int</span>],</span><br><span class="line">     resultHandler: (<span class="type">Int</span>, <span class="type">U</span>) =&gt; <span class="type">Unit</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">   ...</span><br><span class="line">   run job</span><br><span class="line">   ...</span><br><span class="line">   <span class="comment">// job completed</span></span><br><span class="line">   rdd.doCheckpoint()</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>Check point code in RDD.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Performs the checkpointing of this RDD by saving this. It is called after a job using this RDD</span></span><br><span class="line"><span class="comment">  * has completed (therefore the RDD has been materialized and potentially stored in memory).</span></span><br><span class="line"><span class="comment">  * doCheckpoint() is called recursively on the parent RDDs.</span></span><br><span class="line"><span class="comment">  */</span>  </span><br><span class="line"><span class="keyword">private</span>[spark] <span class="function"><span class="keyword">def</span> <span class="title">doCheckpoint</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">   <span class="type">RDDOperationScope</span>.withScope(sc, <span class="string">&quot;checkpoint&quot;</span>, allowNesting = <span class="literal">false</span>, ignoreParent = <span class="literal">true</span>) &#123;</span><br><span class="line">     <span class="keyword">if</span> (!doCheckpointCalled) &#123;</span><br><span class="line">       doCheckpointCalled = <span class="literal">true</span></span><br><span class="line">       <span class="keyword">if</span> (checkpointData.isDefined) &#123;</span><br><span class="line">         <span class="keyword">if</span> (checkpointAllMarkedAncestors) &#123;</span><br><span class="line">           <span class="comment">// TODO We can collect all the RDDs that needs to be checkpointed, and then checkpoint</span></span><br><span class="line">           <span class="comment">// them in parallel.</span></span><br><span class="line">           <span class="comment">// Checkpoint parents first because our lineage will be truncated after we</span></span><br><span class="line">           <span class="comment">// checkpoint ourselves</span></span><br><span class="line">           dependencies.foreach(_.rdd.doCheckpoint())</span><br><span class="line">         &#125;</span><br><span class="line">         checkpointData.get.checkpoint()</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         dependencies.foreach(_.rdd.doCheckpoint())</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Color-FaaS</title>
      <link href="/2023/09/25/Color-FaaS/"/>
      <url>/2023/09/25/Color-FaaS/</url>
      
        <content type="html"><![CDATA[<h1 id="Color-FaaS-Design-Doc"><a href="#Color-FaaS-Design-Doc" class="headerlink" title="Color FaaS Design Doc"></a>Color FaaS Design Doc</h1><p>Designed By Hanzhong Liu, Xi Shi</p><p>Video: <a href="https://www.youtube.com/watch?v=QDuIaaMpTBo">https://www.youtube.com/watch?v=QDuIaaMpTBo</a></p><h2 id="High-Level-Design"><a href="#High-Level-Design" class="headerlink" title="High Level Design"></a>High Level Design</h2><h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h3><p>I plan to design a FaaS platform called Color FaaS. Color FaaS will has the ability to process many kinds of task like AWS Lambda. The platform will include user registration, function creation and management, billing and payment.</p><p><strong>User case 1</strong>: Development</p><table><thead><tr><th>Items</th><th></th></tr></thead><tbody><tr><td>Actor</td><td>Developer</td></tr><tr><td>Goal</td><td>A User want to deploy a application in cloud environment</td></tr><tr><td>Path</td><td>1. User must develop a func in his/her computer by a SDK and upload this function from the webpage<br />2. System saves the function file, and the function file is successfully created <br />3. User test this function from web browser.<br />4. System calls the function and returns the result</td></tr></tbody></table><p><strong>User case 2</strong>: Pay the bill</p><table><thead><tr><th>Items</th><th></th></tr></thead><tbody><tr><td>Actor</td><td>Developer</td></tr><tr><td>Goal</td><td>Pay the bill</td></tr><tr><td>Path</td><td>1. User login into the platftom<br />2. System verifies that user information is correct<br />3. User enter the account info page<br />4. System return the web page to user<br />5. User click “bill” button<br />6. System queries all unpaid records and generates a bill. Platform will show the bill in web page<br />7. User click “Pay” button<br />8. System redirects to the payment page<br />9. User enter all information in the payment form and submit<br />10. System deducts the fee and completes the payment</td></tr></tbody></table><p><strong>User case 3</strong>: Manage function</p><table><thead><tr><th>Items</th><th></th></tr></thead><tbody><tr><td>Actor</td><td>Developer</td></tr><tr><td>Goal</td><td>Trace  the running status of a Func</td></tr><tr><td>Path</td><td>1. User login into the platform<br />2. System verifies that user information is correct<br />3. User enter Task manage page<br />4. System return the manage page<br />5. User use search to find the target Func<br />6. System search from the database and return it to user<br />7. User look at the running status of the function</td></tr></tbody></table><h3 id="Architectural-design"><a href="#Architectural-design" class="headerlink" title="Architectural design"></a>Architectural design</h3><p>The system is divided into three layers: the website, the gateway, and the cluster. The website is primarily responsible for user interaction and needs to connect to the database to store user information. The gateway layer is a simplified implementation that can be replaced with gateways like AWS ELB (Elastic Load Balancer). The cluster is the core of the entire Color FaaS platform. Here, I have designed a decentralized resource scheduler and use Docker for handling user tasks.</p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/2023-09-2716.58.19.png" alt="图片替换文本" width="500" align="bottom" /><p>In Website layer, we use Java Serverlet to develop a Web application.We also use Mysql to store user’s information. Website will provide user with functions include: add/delete a Func, pay for the bill, trace Func status.</p><p>For GateWay, all request will be send to gateway, and gateway will write infomation about the task into DB. In the end, gateway will sent task to Core cluster.</p><p>Core cluster may contains many servers, so it can process many tasks in the same time. A <strong>worker</strong> program will run in In these servers. When a task is sent to a worker, it will stand up a Docker container and run this task in that container. Because, image of a container is very big, so worker will use LRU to cache some containers.</p><h2 id="Website-Detail-Design"><a href="#Website-Detail-Design" class="headerlink" title="Website Detail Design"></a>Website Detail Design</h2><h3 id="UI-Design-Prototype"><a href="#UI-Design-Prototype" class="headerlink" title="UI Design / Prototype"></a>UI Design / Prototype</h3><h4 id="Login-page"><a href="#Login-page" class="headerlink" title="- Login page"></a>- Login page</h4><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/login.png" alt="login"></p><h4 id="Register-page"><a href="#Register-page" class="headerlink" title="- Register page"></a>- Register page</h4><p><img src="/Users/lhz/Desktop/SW/register.png" alt="register"></p><h4 id="Func-manage-page"><a href="#Func-manage-page" class="headerlink" title="- Func manage page"></a>- Func manage page</h4><p>From this page, user can Add, delete, or modify a function.</p><p><img src="/Users/lhz/Desktop/SW/func.png" alt="register"></p><h4 id="Task-manage-page"><a href="#Task-manage-page" class="headerlink" title="- Task manage page"></a>- Task manage page</h4><p>This page shows all the user’s functions running.</p><p>![截屏2023-10-01 11.43.41](/Users/lhz/Library/Application Support/typora-user-images/截屏2023-10-01 11.43.41.png)</p><h4 id="Account-info-page"><a href="#Account-info-page" class="headerlink" title="- Account info page"></a>- Account info page</h4><p>This page shows the bill and account balance, and the user can pay the bill or top up the money.</p><p><img src="/Users/lhz/Desktop/SW/account.png" alt="register"></p><h3 id="Database-Design"><a href="#Database-Design" class="headerlink" title="Database Design"></a>Database Design</h3><h4 id="User-Info-Table"><a href="#User-Info-Table" class="headerlink" title="- User Info Table:"></a>- User Info Table:</h4><table><thead><tr><th>Item</th><th>Type</th><th>Explanation</th></tr></thead><tbody><tr><td>User_ID</td><td>Bigint</td><td></td></tr><tr><td>User_Email</td><td>varchar(50)</td><td></td></tr><tr><td>User_Name</td><td>Varchar(20)</td><td></td></tr><tr><td>User_Password</td><td>varchar(20)</td><td></td></tr><tr><td>User_Balance</td><td>Bigint</td><td></td></tr></tbody></table><h4 id="Bill-Table"><a href="#Bill-Table" class="headerlink" title="- Bill Table"></a>- Bill Table</h4><table><thead><tr><th>Item</th><th>Type</th><th>Explanation</th></tr></thead><tbody><tr><td>Bill_ID</td><td>Bigint</td><td></td></tr><tr><td>User_ID</td><td>Bigint</td><td>Index</td></tr><tr><td>Bill_Date</td><td>Datetime</td><td></td></tr><tr><td>Bill_Balance</td><td>Bigint</td><td></td></tr><tr><td>Bill_Detail</td><td>Text</td><td>A JSON inclueds all unpaid function running records’ ID {1,2,3}</td></tr><tr><td>Status</td><td>int</td><td>0 unsay, 1 paid</td></tr></tbody></table><h4 id="Function-Table"><a href="#Function-Table" class="headerlink" title="- Function Table"></a>- Function Table</h4><table><thead><tr><th>Item</th><th>Type</th><th>Explanation</th></tr></thead><tbody><tr><td>Func_ID</td><td>Bigint</td><td></td></tr><tr><td>User_ID</td><td>Bigint</td><td></td></tr><tr><td>Func_Args</td><td>JSON</td><td>{“num1”:int,”num2”,int}</td></tr><tr><td>Func_Path</td><td>varchar(200)</td><td>path of func’s code in OSS like S3</td></tr><tr><td>Func_Explanation</td><td>varchar(500)</td><td></td></tr><tr><td>Func_Output</td><td>Int</td><td>0=sync / 1=async</td></tr><tr><td>Func_Resource</td><td>JSON</td><td>{“CPU”:4,”MEM”:1024m,”DISK”:1024m}</td></tr></tbody></table><h4 id="Func-Running-Record"><a href="#Func-Running-Record" class="headerlink" title="- Func Running Record"></a>- Func Running Record</h4><table><thead><tr><th>tem</th><th>Type</th><th>Explanation</th></tr></thead><tbody><tr><td>Running_ID</td><td>Bigint</td><td></td></tr><tr><td>Func_ID</td><td>Bigint</td><td></td></tr><tr><td>Running_Time</td><td>Bigint</td><td>Example: 100ms</td></tr><tr><td>Status</td><td>Int</td><td>0: fail, 1 success, 2 pending</td></tr><tr><td>Input</td><td>Text</td><td>A input json</td></tr><tr><td>Running_Date</td><td>Datetime</td><td></td></tr><tr><td>Payment_Status</td><td>Int</td><td>0 unsay, 1 paid</td></tr></tbody></table><h4 id="Billing-Unit"><a href="#Billing-Unit" class="headerlink" title="- Billing Unit"></a>- Billing Unit</h4><table><thead><tr><th>Item</th><th>Type</th><th>Explanation</th></tr></thead><tbody><tr><td>ID</td><td>Bitint</td><td></td></tr><tr><td>Resource_Type</td><td>Int</td><td>CPU / MEM /  DISK</td></tr><tr><td>Price</td><td>float</td><td>Example: 0.01$/ms</td></tr></tbody></table><h4 id="Account-Info-History"><a href="#Account-Info-History" class="headerlink" title="- Account Info History"></a>- Account Info History</h4><table><thead><tr><th>Item</th><th>Type</th><th>Explanation</th></tr></thead><tbody><tr><td>ID</td><td>Bitint</td><td></td></tr><tr><td>Date</td><td>Datetime</td><td>CPU / MEM /  DISK</td></tr><tr><td>Type</td><td>Int</td><td></td></tr><tr><td>Account_num</td><td>varchar(20)</td><td></td></tr><tr><td>Bill_ID</td><td>Int</td><td></td></tr><tr><td>Money</td><td>Bigint</td><td></td></tr><tr><td>User_ID</td><td>Bigint</td><td></td></tr></tbody></table><h4 id="ER"><a href="#ER" class="headerlink" title="- ER"></a>- ER</h4><p><img src="/Users/lhz/Desktop/SW/ER.jpg"></p><h4 id="SQL-Code"><a href="#SQL-Code" class="headerlink" title="- SQL Code"></a>- SQL Code</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Account_Info_History</span><br><span class="line">(</span><br><span class="line">    ID          <span class="type">bigint</span> auto_increment</span><br><span class="line">        <span class="keyword">primary</span> key,</span><br><span class="line">    <span class="type">Date</span>        <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">null</span>,</span><br><span class="line">    Type        <span class="type">int</span>         <span class="keyword">null</span> comment <span class="string">&#x27;1:money in, pay for a bill&#x27;</span>,</span><br><span class="line">    Account_Num <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">null</span> comment <span class="string">&#x27;for type 1&#x27;</span>,</span><br><span class="line">    Bill_ID     <span class="type">bigint</span>      <span class="keyword">null</span> comment <span class="string">&#x27;for type 2&#x27;</span>,</span><br><span class="line">    Money       <span class="type">bigint</span>      <span class="keyword">null</span> comment <span class="string">&#x27;for type 1, it is a positive num.&#x27;</span>,</span><br><span class="line">    User_ID     <span class="type">bigint</span>      <span class="keyword">null</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Bill</span><br><span class="line">(</span><br><span class="line">    Bill_ID      <span class="type">bigint</span> auto_increment</span><br><span class="line">        <span class="keyword">primary</span> key,</span><br><span class="line">    User_ID      <span class="type">bigint</span>   <span class="keyword">null</span>,</span><br><span class="line">    Bill_Date    datetime <span class="keyword">null</span>,</span><br><span class="line">    Bill_Balance <span class="keyword">double</span>   <span class="keyword">null</span>,</span><br><span class="line">    Bill_Detail  text     <span class="keyword">null</span>,</span><br><span class="line">    Status       <span class="type">int</span>      <span class="keyword">null</span> comment <span class="string">&#x27;&quot;0 unpay, 1paid&quot;&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> index User_ID</span><br><span class="line">    <span class="keyword">on</span> Bill (User_ID);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Billing_Units</span><br><span class="line">(</span><br><span class="line">    ID            <span class="type">bigint</span> auto_increment</span><br><span class="line">        <span class="keyword">primary</span> key,</span><br><span class="line">    Resource_Type <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">null</span>,</span><br><span class="line">    Price         <span class="keyword">double</span>      <span class="keyword">null</span> comment <span class="string">&#x27;Example: 0.01$/ms&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Func_Running_Record</span><br><span class="line">(</span><br><span class="line">    Running_ID     <span class="type">bigint</span> auto_increment</span><br><span class="line">        <span class="keyword">primary</span> key,</span><br><span class="line">    Func_ID        <span class="type">bigint</span>   <span class="keyword">null</span>,</span><br><span class="line">    Running_Time   <span class="type">int</span>      <span class="keyword">null</span> comment <span class="string">&#x27;100ms&#x27;</span>,</span><br><span class="line">    Status         <span class="type">int</span>      <span class="keyword">null</span> comment <span class="string">&#x27;0: fail, 1 success, 2 pending&#x27;</span>,</span><br><span class="line">    Input          text     <span class="keyword">null</span>,</span><br><span class="line">    Running_Date   datetime <span class="keyword">null</span>,</span><br><span class="line">    Payment_Status <span class="type">int</span>      <span class="keyword">null</span> comment <span class="string">&#x27;&quot;0 unpay, 1 paid&quot;&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Functions</span><br><span class="line">(</span><br><span class="line">    Func_ID            <span class="type">bigint</span> auto_increment</span><br><span class="line">        <span class="keyword">primary</span> key,</span><br><span class="line">    User_ID            <span class="type">bigint</span>       <span class="keyword">null</span>,</span><br><span class="line">    Func_Args          text         <span class="keyword">null</span>,</span><br><span class="line">    Func_Path          <span class="type">varchar</span>(<span class="number">300</span>) <span class="keyword">null</span>,</span><br><span class="line">    Func_Explanation   <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">null</span>,</span><br><span class="line">    Func_Output        <span class="type">int</span>          <span class="keyword">null</span> comment <span class="string">&#x27;0=sync / 1=async&#x27;</span>,</span><br><span class="line">    Func_Resource_CPU  <span class="type">int</span>          <span class="keyword">null</span>,</span><br><span class="line">    Func_Resource_Mem  <span class="type">int</span>          <span class="keyword">null</span>,</span><br><span class="line">    Func_Resource_Disk <span class="type">int</span>          <span class="keyword">null</span>,</span><br><span class="line">    Func_Name          <span class="type">varchar</span>(<span class="number">50</span>)  <span class="keyword">null</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> index User_ID</span><br><span class="line">    <span class="keyword">on</span> Functions (User_ID);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> User_Info</span><br><span class="line">(</span><br><span class="line">    User_ID       <span class="type">bigint</span> auto_increment</span><br><span class="line">        <span class="keyword">primary</span> key,</span><br><span class="line">    User_Email    <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">null</span>,</span><br><span class="line">    User_Password <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">null</span>,</span><br><span class="line">    User_Balance  <span class="type">bigint</span>      <span class="keyword">null</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Core-Cluster-Detail-Design"><a href="#Core-Cluster-Detail-Design" class="headerlink" title="Core Cluster Detail Design"></a>Core Cluster Detail Design</h2><p>**In development! **</p><p>In core cluster, there are many servers. All servers will be managed by zookeeper. All nodes can perform the scheduling function. Zookeeper will elect a leader for scheduling.</p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-09-30%2023.10.24.png" alt="图片替换文本" width="500" align="bottom" /><p>The worker nodes will regularly report resource usage to the master node, and the master node will use the progress of DRF algorithm based on resource usage information</p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-09-30%2023.11.11.png" alt="图片替换文本" width="700" align="bottom" /><p>The following figure shows the module division of the whole scheduling system(For master):</p><img src="/Users/lhz/Desktop/SW/f.png" alt="图片替换文本" width="500" align="bottom" />]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Distributed-sys-mp1-design</title>
      <link href="/2023/09/24/Distributed-sys-mp1-design/"/>
      <url>/2023/09/24/Distributed-sys-mp1-design/</url>
      
        <content type="html"><![CDATA[<h1 id="MP1-Design-Doc"><a href="#MP1-Design-Doc" class="headerlink" title="MP1 Design Doc"></a>MP1 Design Doc</h1><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>In modern social networking applications, user login, mutual following, viewing lists, and timelines are among the common functionalities. In this project, I have created a simple social networking application called SNS from skeleton, showcasing the fundamental principles and operations of these features.</p><h2 id="Detailed-Design"><a href="#Detailed-Design" class="headerlink" title="Detailed Design"></a>Detailed Design</h2><h3 id="Login"><a href="#Login" class="headerlink" title="Login"></a>Login</h3><p>For a successful login, the client needs to connect to the server and obtain a stub. The client sends its username to the server, and if the server responds with “OK,” the login is successful.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">➜  mp1 ./tsc -u test</span><br><span class="line"></span><br><span class="line">========= TINY SNS CLIENT =========</span><br><span class="line"> Command Lists and Format:</span><br><span class="line"> FOLLOW &lt;username&gt;</span><br><span class="line"> UNFOLLOW &lt;username&gt;</span><br><span class="line"> LIST</span><br><span class="line"> TIMELINE</span><br><span class="line">=====================================</span><br><span class="line">Cmd&gt; </span><br></pre></td></tr></table></figure><p>On the server-side, it starts by traversing the client database (client_db) to determine if the client is already logged in. If not, it creates a new Client object and initializes it. Subsequently, it creates a timeline file locally named “username.txt.” If it detects that the user is already logged in, it returns a “deny” status.</p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-09-25%2023.26.07.png" alt="图片替换文本" width="300" align="bottom" /><p>The timeline file has the following format:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[username2] [msg2] [timestamp2]</span><br><span class="line">[username1] [msg1] [timestamp1]</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Where the most recent information is stored at the top.</span><br></pre></td></tr></table></figure><h3 id="Follow"><a href="#Follow" class="headerlink" title="Follow"></a>Follow</h3><p>On the client-side, a request is constructed with the username set as the user’s name and the arg set as username2. The request is then sent to the server. If an “OK” response is received, it returns IStatus::SUCCESS; otherwise, it returns an error code.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">========= TINY SNS CLIENT =========</span><br><span class="line"> Command Lists and Format:</span><br><span class="line"> FOLLOW &lt;username&gt;</span><br><span class="line"> UNFOLLOW &lt;username&gt;</span><br><span class="line"> LIST</span><br><span class="line"> TIMELINE</span><br><span class="line">=====================================</span><br><span class="line">Cmd&gt; FOLLOW default</span><br><span class="line">Command completed successfully</span><br><span class="line">Cmd&gt; </span><br></pre></td></tr></table></figure><p>On the server-side, it begins by searching for username and username2 in the client database (client_db). If username2 cannot be found, it returns “NO_TARGET” in msg. If username is equal to username2, it returns “Can’t follow self” since users cannot follow themselves. If the user is already following username2, it returns “RE-FOLLOW.” Subsequently, the server establishes a direct relationship between username and username2 and returns “OK.”</p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-09-25%2023.20.06.png" alt="图片替换文本" width="400" align="bottom" /><h3 id="Unfollow"><a href="#Unfollow" class="headerlink" title="Unfollow"></a>Unfollow</h3><p>On the client-side, a request is constructed with the username set as the user’s name and the arg set as username2. The request is then sent to the server. If an “OK” response is received, it returns IStatus::SUCCESS; otherwise, it returns an error code.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">========= TINY SNS CLIENT =========</span><br><span class="line"> Command Lists and Format:</span><br><span class="line"> FOLLOW &lt;username&gt;</span><br><span class="line"> UNFOLLOW &lt;username&gt;</span><br><span class="line"> LIST</span><br><span class="line"> TIMELINE</span><br><span class="line">=====================================</span><br><span class="line">Cmd&gt; FOLLOW default</span><br><span class="line">Command completed successfully</span><br><span class="line">Cmd&gt; UNFOLLOW default</span><br><span class="line">Command completed successfully</span><br><span class="line">Cmd&gt; </span><br></pre></td></tr></table></figure><p>On the server-side, it begins by searching for username and username2 in the client database (client_db). If username2 cannot be found, it returns “NO_TARGET.” Otherwise, it removes the relationship between the two users and returns “OK.”</p><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>On the server-side, it constructs a ListReply. It iterates through the client database, adding all usernames to the ListReply. Then, it locates username and iterates through its followers, adding them all to the ListReply too.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">========= TINY SNS CLIENT =========</span><br><span class="line"> Command Lists and Format:</span><br><span class="line"> FOLLOW &lt;username&gt;</span><br><span class="line"> UNFOLLOW &lt;username&gt;</span><br><span class="line"> LIST</span><br><span class="line"> TIMELINE</span><br><span class="line">=====================================</span><br><span class="line">Cmd&gt; LIST</span><br><span class="line">Command completed successfully</span><br><span class="line">All users: lhz, default, </span><br><span class="line">Followers: </span><br><span class="line">Cmd&gt; LIST</span><br><span class="line">Command completed successfully</span><br><span class="line">All users: lhz, default, </span><br><span class="line">Followers: lhz, </span><br><span class="line">Cmd&gt; </span><br></pre></td></tr></table></figure><h3 id="Timeline"><a href="#Timeline" class="headerlink" title="Timeline"></a>Timeline</h3><p>On the client-side, it begins by establishing a stream connection. It constructs a message request with the message set as “join_timeline.” Afterward, two threads are started: read and write. The read thread continuously reads messages from the stream, while the write thread constantly reads user input and sends it to the server by stream.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">User:</span><br><span class="line">========= TINY SNS CLIENT =========</span><br><span class="line"> Command Lists and Format:</span><br><span class="line"> FOLLOW &lt;username&gt;</span><br><span class="line"> UNFOLLOW &lt;username&gt;</span><br><span class="line"> LIST</span><br><span class="line"> TIMELINE</span><br><span class="line">=====================================</span><br><span class="line">Cmd&gt; TIMELINE</span><br><span class="line">Command completed successfully</span><br><span class="line">Now you are in the timeline</span><br><span class="line">p1</span><br><span class="line">p2</span><br><span class="line">p3</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Follower:</span><br><span class="line">========= TINY SNS CLIENT =========</span><br><span class="line"> Command Lists and Format:</span><br><span class="line"> FOLLOW &lt;username&gt;</span><br><span class="line"> UNFOLLOW &lt;username&gt;</span><br><span class="line"> LIST</span><br><span class="line"> TIMELINE</span><br><span class="line">=====================================</span><br><span class="line">Cmd&gt; FOLLOW default</span><br><span class="line">Command completed successfully</span><br><span class="line">Cmd&gt; TIMELINE</span><br><span class="line">Command completed successfully</span><br><span class="line">Now you are in the timeline</span><br><span class="line">default (Sun Sep 24 22:31:15 2023) &gt;&gt; p1</span><br><span class="line">default (Sun Sep 24 22:31:16 2023) &gt;&gt; p2</span><br><span class="line">default (Sun Sep 24 22:31:17 2023) &gt;&gt; p3</span><br></pre></td></tr></table></figure><p>On the server-side, upon receiving the “join_timeline” request, it saves the stream in the client database. It then reads up to 20 lines from the current user’s timeline file, parses them into messages, and sends them to the client. When the server receives a message, it iterates through all followers, individually checking if their stream is not null. If it’s not null, the server sends the message directly to the client through the stream. The message is then saved at the top of the follower’s timeline file.</p><img src="/Users/lhz/Desktop/截屏2023-09-25 23.33.01.png" alt="图片替换文本" width="350" align="bottom" />]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spark Memory Manager</title>
      <link href="/2023/09/14/Spark-Memory-Manager/"/>
      <url>/2023/09/14/Spark-Memory-Manager/</url>
      
        <content type="html"><![CDATA[<p>UnifiedMemoryManager:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// acquireStorageMemory</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">acquireStorageMemory</span></span>(</span><br><span class="line">      blockId: <span class="type">BlockId</span>,</span><br><span class="line">      numBytes: <span class="type">Long</span>,</span><br><span class="line">      memoryMode: <span class="type">MemoryMode</span>): <span class="type">Boolean</span> = synchronized &#123;</span><br><span class="line">    assertInvariants()</span><br><span class="line">    assert(numBytes &gt;= <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">val</span> (executionPool, storagePool, maxMemory) = memoryMode <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="type">MemoryMode</span>.<span class="type">ON_HEAP</span> =&gt; (</span><br><span class="line">        onHeapExecutionMemoryPool,</span><br><span class="line">        onHeapStorageMemoryPool,</span><br><span class="line">        maxOnHeapStorageMemory)</span><br><span class="line">      <span class="keyword">case</span> <span class="type">MemoryMode</span>.<span class="type">OFF_HEAP</span> =&gt; (</span><br><span class="line">        offHeapExecutionMemoryPool,</span><br><span class="line">        offHeapStorageMemoryPool,</span><br><span class="line">        maxOffHeapStorageMemory)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (numBytes &gt; maxMemory) &#123;</span><br><span class="line">      <span class="comment">// Fail fast if the block simply won&#x27;t fit</span></span><br><span class="line">      logInfo(<span class="string">s&quot;Will not store <span class="subst">$blockId</span> as the required space (<span class="subst">$numBytes</span> bytes) exceeds our &quot;</span> +</span><br><span class="line">        <span class="string">s&quot;memory limit (<span class="subst">$maxMemory</span> bytes)&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (numBytes &gt; storagePool.memoryFree) &#123;</span><br><span class="line">      <span class="comment">// There is not enough free memory in the storage pool, so try to borrow free memory from</span></span><br><span class="line">      <span class="comment">// the execution pool.</span></span><br><span class="line">      <span class="keyword">val</span> memoryBorrowedFromExecution = <span class="type">Math</span>.min(executionPool.memoryFree,</span><br><span class="line">        numBytes - storagePool.memoryFree)</span><br><span class="line">      executionPool.decrementPoolSize(memoryBorrowedFromExecution)</span><br><span class="line">      storagePool.incrementPoolSize(memoryBorrowedFromExecution)</span><br><span class="line">    &#125;</span><br><span class="line">    storagePool.acquireMemory(blockId, numBytes)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Try to acquire up to `numBytes` of execution memory for the current task and return the</span></span><br><span class="line"><span class="comment">   * number of bytes obtained, or 0 if none can be allocated.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * This call may block until there is enough free memory in some situations, to make sure each</span></span><br><span class="line"><span class="comment">   * task has a chance to ramp up to at least 1 / 2N of the total memory pool (where N is the # of</span></span><br><span class="line"><span class="comment">   * active tasks) before it is forced to spill. This can happen if the number of tasks increase</span></span><br><span class="line"><span class="comment">   * but an older task had a lot of memory already.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">private</span>[memory] <span class="function"><span class="keyword">def</span> <span class="title">acquireExecutionMemory</span></span>(</span><br><span class="line">      numBytes: <span class="type">Long</span>,</span><br><span class="line">      taskAttemptId: <span class="type">Long</span>,</span><br><span class="line">      memoryMode: <span class="type">MemoryMode</span>): <span class="type">Long</span> = synchronized &#123;</span><br><span class="line">    assertInvariants()</span><br><span class="line">    assert(numBytes &gt;= <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">val</span> (executionPool, storagePool, storageRegionSize, maxMemory) = memoryMode <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="type">MemoryMode</span>.<span class="type">ON_HEAP</span> =&gt; (</span><br><span class="line">        onHeapExecutionMemoryPool,</span><br><span class="line">        onHeapStorageMemoryPool,</span><br><span class="line">        onHeapStorageRegionSize,</span><br><span class="line">        maxHeapMemory)</span><br><span class="line">      <span class="keyword">case</span> <span class="type">MemoryMode</span>.<span class="type">OFF_HEAP</span> =&gt; (</span><br><span class="line">        offHeapExecutionMemoryPool,</span><br><span class="line">        offHeapStorageMemoryPool,</span><br><span class="line">        offHeapStorageMemory,</span><br><span class="line">        maxOffHeapMemory)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Grow the execution pool by evicting cached blocks, thereby shrinking the storage pool.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * When acquiring memory for a task, the execution pool may need to make multiple</span></span><br><span class="line"><span class="comment">     * attempts. Each attempt must be able to evict storage in case another task jumps in</span></span><br><span class="line"><span class="comment">     * and caches a large block between the attempts. This is called once per attempt.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maybeGrowExecutionPool</span></span>(extraMemoryNeeded: <span class="type">Long</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">if</span> (extraMemoryNeeded &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// There is not enough free memory in the execution pool, so try to reclaim memory from</span></span><br><span class="line">        <span class="comment">// storage. We can reclaim any free memory from the storage pool. If the storage pool</span></span><br><span class="line">        <span class="comment">// has grown to become larger than `storageRegionSize`, we can evict blocks and reclaim</span></span><br><span class="line">        <span class="comment">// the memory that storage has borrowed from execution.</span></span><br><span class="line">        <span class="keyword">val</span> memoryReclaimableFromStorage = math.max(</span><br><span class="line">          storagePool.memoryFree,</span><br><span class="line">          storagePool.poolSize - storageRegionSize)</span><br><span class="line">        <span class="keyword">if</span> (memoryReclaimableFromStorage &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="comment">// Only reclaim as much space as is necessary and available:</span></span><br><span class="line">          <span class="keyword">val</span> spaceToReclaim = storagePool.freeSpaceToShrinkPool(</span><br><span class="line">            math.min(extraMemoryNeeded, memoryReclaimableFromStorage))</span><br><span class="line">          storagePool.decrementPoolSize(spaceToReclaim)</span><br><span class="line">          executionPool.incrementPoolSize(spaceToReclaim)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The size the execution pool would have after evicting storage memory.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The execution memory pool divides this quantity among the active tasks evenly to cap</span></span><br><span class="line"><span class="comment">     * the execution memory allocation for each task. It is important to keep this greater</span></span><br><span class="line"><span class="comment">     * than the execution pool size, which doesn&#x27;t take into account potential memory that</span></span><br><span class="line"><span class="comment">     * could be freed by evicting storage. Otherwise we may hit SPARK-12155.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Additionally, this quantity should be kept below `maxMemory` to arbitrate fairness</span></span><br><span class="line"><span class="comment">     * in execution memory allocation across tasks, Otherwise, a task may occupy more than</span></span><br><span class="line"><span class="comment">     * its fair share of execution memory, mistakenly thinking that other tasks can acquire</span></span><br><span class="line"><span class="comment">     * the portion of storage memory that cannot be evicted.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">computeMaxExecutionPoolSize</span></span>(): <span class="type">Long</span> = &#123;</span><br><span class="line">      maxMemory - math.min(storagePool.memoryUsed, storageRegionSize)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    executionPool.acquireMemory(</span><br><span class="line">      numBytes, taskAttemptId, maybeGrowExecutionPool, () =&gt; computeMaxExecutionPoolSize)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>StorageMemoryPool:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Acquire N bytes of storage memory for the given block, evicting existing ones if necessary.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param blockId the ID of the block we are acquiring storage memory for</span></span><br><span class="line"><span class="comment"> * @param numBytesToAcquire the size of this block</span></span><br><span class="line"><span class="comment"> * @param numBytesToFree the amount of space to be freed through evicting blocks</span></span><br><span class="line"><span class="comment"> * @return whether all N bytes were successfully granted.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">acquireMemory</span></span>(</span><br><span class="line">    blockId: <span class="type">BlockId</span>,</span><br><span class="line">    numBytesToAcquire: <span class="type">Long</span>,</span><br><span class="line">    numBytesToFree: <span class="type">Long</span>): <span class="type">Boolean</span> = lock.synchronized &#123;</span><br><span class="line">  assert(numBytesToAcquire &gt;= <span class="number">0</span>)</span><br><span class="line">  assert(numBytesToFree &gt;= <span class="number">0</span>)</span><br><span class="line">  assert(memoryUsed &lt;= poolSize)</span><br><span class="line">  <span class="keyword">if</span> (numBytesToFree &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    memoryStore.evictBlocksToFreeSpace(<span class="type">Some</span>(blockId), numBytesToFree, memoryMode)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// <span class="doctag">NOTE:</span> If the memory store evicts blocks, then those evictions will synchronously call</span></span><br><span class="line">  <span class="comment">// back into this StorageMemoryPool in order to free memory. Therefore, these variables</span></span><br><span class="line">  <span class="comment">// should have been updated.</span></span><br><span class="line">  <span class="keyword">val</span> enoughMemory = numBytesToAcquire &lt;= memoryFree</span><br><span class="line">  <span class="keyword">if</span> (enoughMemory) &#123;</span><br><span class="line">    _memoryUsed += numBytesToAcquire</span><br><span class="line">  &#125;</span><br><span class="line">  enoughMemory</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>853. Car Fleet</title>
      <link href="/2023/09/01/853-Car-Fleet/"/>
      <url>/2023/09/01/853-Car-Fleet/</url>
      
        <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>There are <code>n</code> cars going to the same destination along a one-lane road. The destination is <code>target</code> miles away.</p><p>You are given two integer array <code>position</code> and <code>speed</code>, both of length <code>n</code>, where <code>position[i]</code> is the position of the <code>ith</code> car and <code>speed[i]</code> is the speed of the <code>ith</code> car (in miles per hour).</p><p>A car can never pass another car ahead of it, but it can catch up to it and drive bumper to bumper <strong>at the same speed</strong>. The faster car will <strong>slow down</strong> to match the slower car’s speed. The distance between these two cars is ignored (i.e., they are assumed to have the same position).</p><p>A <strong>car fleet</strong> is some non-empty set of cars driving at the same position and same speed. Note that a single car is also a car fleet.</p><p>If a car catches up to a car fleet right at the destination point, it will still be considered as one car fleet.</p><p>Return <em>the <strong>number of car fleets</strong> that will arrive at the destination</em>.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]</span><br><span class="line">Output: 3</span><br><span class="line">Explanation:</span><br><span class="line">The cars starting at 10 (speed 2) and 8 (speed 4) become a fleet, meeting each other at 12.</span><br><span class="line">The car starting at 0 does not catch up to any other car, so it is a fleet by itself.</span><br><span class="line">The cars starting at 5 (speed 1) and 3 (speed 3) become a fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target.</span><br><span class="line">Note that no other cars meet these fleets before the destination, so the answer is 3.</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Firstly, this problem give me some positions. These position a unsorted. So it is obvious that the first step should be sort these cars by position.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] cars=<span class="keyword">new</span> <span class="title class_">int</span>[position.length][<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;position.length;i++)&#123;</span><br><span class="line">        cars[i][<span class="number">0</span>]=position[i];</span><br><span class="line">        cars[i][<span class="number">1</span>]=speed[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Arrays.sort(cars,(a,b)-&gt;(a[<span class="number">0</span>]-b[<span class="number">0</span>]));</span><br></pre></td></tr></table></figure><p>And then, after the sort, we can fint that when there are two cars(first are is in i, second is in j, i&lt;j). There are two situations:</p><ol><li>First car need n time unit to array target and second car need m time unit to array target. If n&lt;=m, these two cars will always become a car fleet.</li><li>First car need n time unit to array target and second car need m time unit to array target. If n&gt;m, these two cars will not become a car fleet.</li></ol><p>So, we can use a stack to record car fleets. If a new car’s array time is small than peek in stack, we merge this car into peek fleet. On the contrary, the car can make up a new fleet. I just push this car into stack;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">carFleet</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] position, <span class="type">int</span>[] speed)</span> &#123;</span><br><span class="line">       </span><br><span class="line">        <span class="type">int</span>[][] cars=<span class="keyword">new</span> <span class="title class_">int</span>[position.length][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;position.length;i++)&#123;</span><br><span class="line">            cars[i][<span class="number">0</span>]=position[i];</span><br><span class="line">            cars[i][<span class="number">1</span>]=speed[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Arrays.sort(cars,(a,b)-&gt;(a[<span class="number">0</span>]-b[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">        List&lt;<span class="type">int</span>[]&gt; stack=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;cars.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(stack.size()==<span class="number">0</span>)&#123;</span><br><span class="line">                stack.add(cars[i]);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">double</span> time=((target-cars[i][<span class="number">0</span>])*<span class="number">1.0</span>) / (cars[i][<span class="number">1</span>]*<span class="number">1.0</span>);</span><br><span class="line">            <span class="comment">// stack.get(stack.size()-1)[1]</span></span><br><span class="line">            <span class="keyword">while</span>(stack.size()!=<span class="number">0</span> &amp;&amp; ((target-stack.get(stack.size()-<span class="number">1</span>)[<span class="number">0</span>])*<span class="number">1.0</span>) / (stack.get(stack.size()-<span class="number">1</span>)[<span class="number">1</span>]*<span class="number">1.0</span>) &lt;= time)&#123;</span><br><span class="line">                stack.remove(stack.size()-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            stack.add(cars[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> stack.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>823. Binary Trees With Factors</title>
      <link href="/2023/08/28/823-Binary-Trees-With-Factors/"/>
      <url>/2023/08/28/823-Binary-Trees-With-Factors/</url>
      
        <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Given an array of unique integers, <code>arr</code>, where each integer <code>arr[i]</code> is strictly greater than <code>1</code>.</p><p>We make a binary tree using these integers, and each number may be used for any number of times. Each non-leaf node’s value should be equal to the product of the values of its children.</p><p>Return <em>the number of binary trees we can make</em>. The answer may be too large so return the answer <strong>modulo</strong> <code>1^9 + 7</code>.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: arr = [2,4]</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: We can make these trees: [2], [4], [4, 2, 2]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: arr = [2,4,5,10]</span><br><span class="line">Output: 7</span><br><span class="line">Explanation: We can make these trees: [2], [4], [5], [10], [4, 2, 2], [10, 2, 5], [10, 5, 2].</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>In this question, it’s easy to find that for each number n, it is a child question which has no connect with what the parent of this number is. So, we can use the memorized dfs to solve this problem.</p><p>In addition, for number n, i assume that this number can be devided into arr[i]*arr[j]; So dfs(n) = dfs(arr[i]) * dis(arr[j]). This is because for each legal child tree with arr[i] as the root, it can be combine with each legal child tree with arr[j] as the root. So, i can sort the arr, and find out all arr[i] and arr[j] pairs. </p><p>There is a important point, when multiply two ints together and storage it into a long. These to Int number may over the limit. So, to get the right ans, i need to transfer in to long firstly. And that make the multiply.</p><p>My solution is as below: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">mod</span> <span class="operator">=</span> (<span class="type">int</span>) <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">    Map&lt;Integer,Integer&gt; con=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numFactoredBinaryTrees</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">      </span><br><span class="line">      Arrays.sort(arr);</span><br><span class="line"></span><br><span class="line">      Set&lt;Integer&gt; arrSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">        arrSet.add(arr[i]);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">        ans+=dfs(arr[i],arr,arrSet);</span><br><span class="line">        ans %= mod;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> nowNum,<span class="type">int</span>[] arr,Set&lt;Integer&gt; arrSet)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(con.containsKey(nowNum)) <span class="keyword">return</span> con.get(nowNum);</span><br><span class="line">      </span><br><span class="line">      <span class="type">long</span> res=<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]&gt;=nowNum) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> r=nowNum/arr[i];</span><br><span class="line">        <span class="keyword">if</span>(nowNum==arr[i]*r &amp;&amp; arrSet.contains(r))&#123;</span><br><span class="line">          <span class="comment">//System.out.println(nowNum+&quot;-&gt;&quot;+r+&quot; &quot;+arr[i]); </span></span><br><span class="line">          res+=((<span class="number">1l</span>)*dfs(r,arr,arrSet)) * ((<span class="number">1l</span>)*dfs(arr[i],arr,arrSet));</span><br><span class="line">          res %= mod;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      res %= mod;</span><br><span class="line">      con.put(nowNum,(<span class="type">int</span>)res);</span><br><span class="line">      <span class="comment">//if(res != (int)res) System.out.println(&quot;error&quot;);</span></span><br><span class="line">      <span class="keyword">return</span> (<span class="type">int</span>)res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// s1: sort</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4 2 2</span></span><br><span class="line"><span class="comment">  4</span></span><br><span class="line"><span class="comment"> /  \</span></span><br><span class="line"><span class="comment">2    2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MapRedece lab</title>
      <link href="/2023/08/27/MapRedece/"/>
      <url>/2023/08/27/MapRedece/</url>
      
        <content type="html"><![CDATA[<h2 id="Why-Map-Reduce"><a href="#Why-Map-Reduce" class="headerlink" title="Why Map Reduce"></a>Why Map Reduce</h2><p>When we need to figure out how many word in a great amount of web pages, the easist way is load file one by one and count up the words in them. The way may very slow and we can’t get the answer  in a resonable time. So, one better solution is load all files into memory, and then count the word in them in one time. But this approach may need a very big memory. Normal computer will not have such a high config in most of time. To balance the conflict of “one by one” and “load in on time”, MapReduce algorithm was posted by Jeff Dean when he worked in google.</p><p>The whole process of MapReduce is in the graph below:</p><ol><li>Split files into some small part</li><li>Send these splits to workers, and workers will make the map process</li><li>Map: count up the number of each word in split<ol><li>like this: Word1 number1 Word2 number2 Word1 number3</li></ol></li></ol><p>![](/Users/lhz/Library/Application Support/typora-user-images/截屏2023-08-27 09.42.55.png)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2023/08/08/test-1/"/>
      <url>/2023/08/08/test-1/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/a.png" alt="a"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>WASMEdge Runtime Structure</title>
      <link href="/2023/03/15/WASM-Runtime-Structure/"/>
      <url>/2023/03/15/WASM-Runtime-Structure/</url>
      
        <content type="html"><![CDATA[<p>Question：</p><p>拷贝数据粒度问题：</p><p><strong>Min：</strong>Page （Mitosis）</p><p>Mixture：针对Function每次拷贝完整instance。针对memory等，则按页拷贝。</p><p>Instance：每次拷贝一个instance，例如一个FunctionInstance</p><p>Module ：每次拷贝一个module</p><p><strong>Max:</strong> .wasm / .so （Faasm）</p><hr><p><strong>Plan：</strong>先用Tcp做测试，做好模块化，方便后面改quic。先做No COW</p><p><strong>Running Node：</strong></p><p>1.在TableInstance、FunctionInstance等.cpp文件，增加反序列化初始化函数（原始只有一个从Mod数据初始化的函数）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">instantiate</span>(Module &amp;Mod) <span class="comment">//原始初始化函数</span></span><br><span class="line"><span class="built_in">instantiate</span>(String obj)  <span class="comment">//反序列化初始化</span></span><br><span class="line">  </span><br><span class="line"><span class="built_in">instantiate_userfault</span>()  <span class="comment">//userfalut伪初始化</span></span><br><span class="line"><span class="built_in">instantiate_userfault</span>(String obj, fault_ref)  <span class="comment">//userfault handle</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.在module.cpp，增加一个instantiate函数的重载，进行remote初始化runtime。此instantiate函数，调用第1条中的反序列化初始化函数进行初始化</p><p><strong>Memory Node：</strong></p><p>3.设计一个“镜像类”，用于”镜像”和”储存”序列化后的runtime数据。并设计一个network方法，用于监听网络请求，根据请求发送相应的runtime数据</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">std::vector&lt;FunctionInstance *&gt; FuncInsts; <span class="comment">// 不需要postcopy,直接拷贝FuncSec即可</span></span><br><span class="line">std::vector&lt;TableInstance *&gt; TabInsts;     <span class="comment">// 不需要postcopy,直接拷贝TabSec即可</span></span><br><span class="line">std::vector&lt;MemoryInstance *&gt; MemInsts;    <span class="comment">// 需要PostCopy</span></span><br><span class="line">std::vector&lt;GlobalInstance *&gt; GlobInsts;   <span class="comment">// 直接拷贝 GlobSec</span></span><br><span class="line">std::vector&lt;ElementInstance *&gt; ElemInsts;  <span class="comment">// 直接拷贝 ElemSec</span></span><br><span class="line">std::vector&lt;DataInstance *&gt; DataInsts;     <span class="comment">// 需要PostCopy</span></span><br></pre></td></tr></table></figure><h3 id="No-COW"><a href="#No-COW" class="headerlink" title="No COW"></a>No COW</h3><p>一次性拷贝：Store，Conf。之后直接执行</p><h3 id="COW"><a href="#COW" class="headerlink" title="COW"></a>COW</h3><p>只拷贝Conf，拷贝Store的大小。然后进行userfault初始化。之后执行，遇到fault，则利用handle线程处理</p><h2 id="WASMEdge分析"><a href="#WASMEdge分析" class="headerlink" title="WASMEdge分析"></a>WASMEdge分析</h2><p>1.wasm相关数据存储在Store中</p><p>2.一个wasm程序由多个modules组成</p><p><strong>启动流程：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//待运行文件待路径</span></span><br><span class="line"><span class="type">const</span> <span class="keyword">auto</span> InputPath = std::filesystem::<span class="built_in">absolute</span>(SoName.<span class="built_in">value</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************/</span> </span><br><span class="line"><span class="comment">// 根据Config，初始化VM</span></span><br><span class="line"><span class="comment">// 需要包含全部cli参数</span></span><br><span class="line"></span><br><span class="line"><span class="function">VM::VM <span class="title">VM</span><span class="params">(Conf)</span></span>;</span><br><span class="line">-&gt; <span class="built_in">unsafeInitVM</span>(); </span><br><span class="line">-&gt; <span class="built_in">unsafeLoadBuiltInHosts</span>();     加载 <span class="function">BuiltInModInsts</span></span><br><span class="line"><span class="function"> <span class="title">unsafeRegisterBuiltInHosts</span><span class="params">()</span></span>; 登记 ExecutorEngine.registerModule</span><br><span class="line"> -&gt; <span class="built_in">instantiate</span>(StoreMgr, Mod, Name)</span><br><span class="line"><span class="comment">/*******************/</span> </span><br><span class="line">      </span><br><span class="line"><span class="comment">/*******************/</span>    </span><br><span class="line"><span class="comment">// 初始化module，包含TableSec、FunctionSec等</span></span><br><span class="line"><span class="comment">// 根据module，初始化stack</span></span><br><span class="line">      </span><br><span class="line">VM.<span class="built_in">loadWasm</span>(InputPath.<span class="built_in">u8string</span>());</span><br><span class="line">-&gt; LoaderEngine.<span class="built_in">parseModule</span>(Path)</span><br><span class="line">-&gt; FMgr.<span class="built_in">setPath</span>(FilePath)</span><br><span class="line">-&gt; <span class="keyword">module</span>.<span class="built_in">loadModule</span>()                  <span class="comment">//读取文件，初始化module </span></span><br><span class="line">    <span class="comment">//初始化 VM.Mod</span></span><br><span class="line"></span><br><span class="line">VM.<span class="built_in">validate</span>();</span><br><span class="line">-&gt; ValidatorEngine.<span class="built_in">validate</span>(*Mod.<span class="built_in">get</span>())   <span class="comment">//验证module</span></span><br><span class="line">                                            <span class="comment">//即上一步获得的 VM.Mod</span></span><br><span class="line"></span><br><span class="line">VM.<span class="built_in">instantiate</span>();</span><br><span class="line">-&gt; ExecutorEngine.<span class="built_in">instantiateModule</span>(StoreRef, *Mod.<span class="built_in">get</span>())</span><br><span class="line">-&gt; <span class="built_in">instantiate</span>(StoreMgr, Mod)         <span class="comment">//初始化StackManager + 初始化module中的参数（参考文档）</span></span><br><span class="line">-&gt; 初始化 ActiveModInst                <span class="comment">//后续使用ActiveModInst进行函数调用</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">/********************/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化系统环境,WASI</span></span><br><span class="line">WasiMod-&gt;<span class="built_in">getEnv</span>().<span class="built_in">init</span>(</span><br><span class="line">      Dir.<span class="built_in">value</span>(),</span><br><span class="line">      InputPath.<span class="built_in">filename</span>()</span><br><span class="line">      Args.<span class="built_in">value</span>(), Env.<span class="built_in">value</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化输入参数</span></span><br><span class="line">std::vector&lt;ValVariant&gt; FuncArgs;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行</span></span><br><span class="line">VM.<span class="built_in">asyncExecute</span>(FuncName, FuncArgs, FuncArgTypes);</span><br><span class="line">-&gt; ExecutorEngine.<span class="built_in">invoke</span>(*FuncInst, Params, ParamTypes)</span><br><span class="line">-&gt; <span class="built_in">runFunction</span>(StackMgr, FuncInst, Params) </span><br><span class="line">FuncInst是一个指针，指向Stack中的函数位置</span><br><span class="line"></span><br><span class="line"><span class="comment">//End：输出执行结果</span></span><br></pre></td></tr></table></figure><h2 id="Remote-Migration-steps"><a href="#Remote-Migration-steps" class="headerlink" title="Remote Migration steps"></a>Remote Migration steps</h2><h3 id="Step1-VM-init"><a href="#Step1-VM-init" class="headerlink" title="Step1: VM init"></a>Step1: VM init</h3><p>这一步，需要从远端拷贝Conf。然后返序列化Conf进行初始化。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">VM</span>(<span class="type">const</span> Configure &amp;Conf):</span><br><span class="line">  <span class="built_in">Conf</span>(Conf)                                            <span class="comment">// 给本地变量Conf赋值</span></span><br><span class="line">  <span class="built_in">Stage</span>(VMStage::Inited),                               <span class="comment">// 默认Init参数，不用改</span></span><br><span class="line">  <span class="built_in">LoaderEngine</span>(Conf, &amp;Executor::Executor::Intrinsics),  <span class="comment">// 把Conf赋值给LoaderEngine    Loader</span></span><br><span class="line">  <span class="built_in">ValidatorEngine</span>(Conf),                                <span class="comment">// 把Conf赋值给ValidatorEngine Validator</span></span><br><span class="line">  <span class="built_in">ExecutorEngine</span>(Conf, &amp;Stat),                          <span class="comment">// 把Conf赋值给ExecutorEngine  Executor</span></span><br><span class="line">  <span class="built_in">Store</span>(std::<span class="built_in">make_unique</span>&lt;Runtime::StoreManager&gt;()),     <span class="comment">// 把Store赋值为新实例化的StoreManager</span></span><br><span class="line">  <span class="built_in">StoreRef</span>(*Store.<span class="built_in">get</span>())                                <span class="comment">// 把StoreRef赋值为Store的指针</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">unsafeLoadBuiltInHosts</span>();                           <span class="comment">// 加载Wasi？</span></span><br><span class="line">    <span class="built_in">unsafeRegisterBuiltInHosts</span>();                       <span class="comment">// 在ExecutorEngine存储，StoreRef和WASI对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Stpe2-Module-amp-Stack-init"><a href="#Stpe2-Module-amp-Stack-init" class="headerlink" title="Stpe2: Module &amp; Stack init"></a>Stpe2: Module &amp; Stack init</h3><p>将以下三步：VM.loadWasm() -&gt; VM.validate() -&gt; VM.instantiate()</p><p>由本地读取文件从而实例化module，改为云端获取。需要拷贝很多个细小的变量，一个都不能漏掉</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例化 VM.Mod </span></span><br><span class="line"> <span class="comment">// 1.Postcopy VM.Mod</span></span><br><span class="line"> <span class="comment">// 2.修改Stage Stage = VMStage::Loaded</span></span><br><span class="line">VM.<span class="built_in">loadWasm</span>(InputPath.<span class="built_in">u8string</span>());</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 验证VM.Mod</span></span><br><span class="line"> <span class="comment">// 1.修改Stage</span></span><br><span class="line">VM.<span class="built_in">validate</span>();</span><br><span class="line"></span><br><span class="line"> <span class="comment">//  Stage = VMStage::Instantiated;</span></span><br><span class="line"> <span class="comment">//  实例化 ActiveModInst</span></span><br><span class="line"> <span class="comment">// 1.Postcopy StoreRef            (StoreMgr.registerModule)   初始化 StoreRef中的参数，</span></span><br><span class="line"> <span class="comment">//                                                            NamedMod，一个map，储存了所有Module</span></span><br><span class="line"> <span class="comment">// 2.Postcopy StackMgr            (StackManager StackMgr)     完整的进行反序列化（可能不用拷贝实际上）</span></span><br><span class="line"> <span class="comment">// 3.Postcopy ActiveModInst       (ActiveModInst)             完整的进行反序列化</span></span><br><span class="line"> <span class="comment">//                                                            (这个参数实际上Store中已经包含，因此可能不需要拷贝)</span></span><br><span class="line">VM.<span class="built_in">instantiate</span>();</span><br></pre></td></tr></table></figure><p>No COW：需要从远端拷贝module，直接反序列化</p><p>COW：先假初始化，遇到了page fault再从远端拷贝</p><p><strong>参考：</strong></p><p>module本地加载实现：<strong>lib/loader/ast/module.cpp</strong></p><p>module定义： <strong>include/ast/module.h</strong></p><p>StoreMgr、moduleInstance初始化：<strong>lib/executor/instantiate/module.cpp</strong><br>                                                            lib/executor/instantiate/data.cpp</p><h3 id="moduleInstance实例化"><a href="#moduleInstance实例化" class="headerlink" title="moduleInstance实例化"></a>moduleInstance实例化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义</span></span><br><span class="line">std::unique_ptr&lt;Runtime::Instance::ModuleInstance&gt; ModInst;</span><br><span class="line"></span><br><span class="line">ModInst = std::<span class="built_in">make_unique</span>&lt;Runtime::Instance::ModuleInstance&gt;(Name.<span class="built_in">value</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 FuncType</span></span><br><span class="line">ModInst-&gt;<span class="built_in">addFuncType</span>(FuncType);</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化ImportSec</span></span><br><span class="line">AST::ImportSection &amp;ImportSec = Mod.<span class="built_in">getImportSection</span>();</span><br><span class="line"><span class="built_in">instantiate</span>(StoreMgr, *ModInst, ImportSec)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//初始化FuncSec，CodeSec</span></span><br><span class="line"><span class="type">const</span> AST::FunctionSection &amp;FuncSec = Mod.<span class="built_in">getFunctionSection</span>();</span><br><span class="line"><span class="type">const</span> AST::CodeSection &amp;CodeSec = Mod.<span class="built_in">getCodeSection</span>();</span><br><span class="line"><span class="built_in">instantiate</span>(*ModInst, FuncSec, CodeSec);</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化 TabSec</span></span><br><span class="line">AST::TableSection &amp;TabSec = Mod.<span class="built_in">getTableSection</span>();</span><br><span class="line"><span class="built_in">instantiate</span>(*ModInst, TabSec);</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化 MemSec</span></span><br><span class="line"><span class="type">const</span> AST::MemorySection &amp;MemSec = Mod.<span class="built_in">getMemorySection</span>();</span><br><span class="line"><span class="built_in">instantiate</span>(*ModInst, MemSec);</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 初始化 GlobSec</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化ExportSec</span></span><br><span class="line"><span class="type">const</span> AST::ExportSection &amp;ExportSec = Mod.<span class="built_in">getExportSection</span>();</span><br><span class="line"><span class="built_in">instantiate</span>(*ModInst, ExportSec);</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化ElemSec</span></span><br><span class="line"><span class="built_in">instantiate</span>(StackMgr, *ModInst, ElemSec)</span><br><span class="line">  </span><br><span class="line"><span class="comment">//初始化   DataSec</span></span><br><span class="line"><span class="built_in">instantiate</span>(StackMgr, *ModInst, DataSec)</span><br><span class="line">  </span><br></pre></td></tr></table></figure><hr><p><a href="https://github.com/bytecodealliance/wasm-micro-runtime/blob/main/doc/memory_tune.md">https://github.com/bytecodealliance/wasm-micro-runtime/blob/main/doc/memory_tune.md</a></p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-03-16%2011.32.20.png" alt="截屏2023-03-16 11.32.20"></p><p><a href="https://juejin.cn/post/6844904062148689933">https://juejin.cn/post/6844904062148689933</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Best Time to Buy and Sell Stock</title>
      <link href="/2023/03/15/Best-Time-to-Buy-and-Sell-Stock/"/>
      <url>/2023/03/15/Best-Time-to-Buy-and-Sell-Stock/</url>
      
        <content type="html"><![CDATA[<h2 id="Question-1"><a href="#Question-1" class="headerlink" title="Question 1"></a>Question 1</h2><p>You are given an integer array prices where prices[i] is the price of a given stock on the i^th day.</p><p>On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.</p><p>Find and return the maximum profit you can achieve.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: prices = [7,1,5,3,6,4]</span><br><span class="line">Output: 7</span><br><span class="line">Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.</span><br><span class="line">Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.</span><br><span class="line">Total profit is 4 + 3 = 7.</span><br></pre></td></tr></table></figure><h3 id="Solution-01"><a href="#Solution-01" class="headerlink" title="Solution 01"></a>Solution 01</h3><p>dp(i,0) mains that the max profit i can get when i have no stock in day_i;<br>dp(i,1) mains that the max profit i can grt when i have a stock in day_i;</p><p>So,i can get this equation：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp[i][0]=max&#123;dp[i−1][0],dp[i−1][1]+prices[i]&#125;</span><br><span class="line">dp[i][1]=max&#123;dp[i−1][1],dp[i−1][0]−prices[i]&#125;</span><br></pre></td></tr></table></figure><p>The time complexity of the solution is o(n).</p><h3 id="Solution-02"><a href="#Solution-02" class="headerlink" title="Solution 02"></a>Solution 02</h3><p>For this example: [1,2,3]. It is obvious that i need to buy stock on day_1 and sell it on day_3. However i can do this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">day 1: buy</span><br><span class="line">day 2: sell and buy; profit: 1</span><br><span class="line">day 3: sell; profit: 1</span><br><span class="line">Total profit:2</span><br></pre></td></tr></table></figure><p>The profit of this choice is the same as only buying and selling for one time. So i can get the ans by calculating all increasing subsequence.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ans=SUM&#123; prices[i]-prices[i-1] &#125; (prices[i] &gt; prices[i-1])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Postcopy &amp; user-fault &amp; WASM</title>
      <link href="/2023/03/08/User-space-page-fault-handling/"/>
      <url>/2023/03/08/User-space-page-fault-handling/</url>
      
        <content type="html"><![CDATA[<h2 id="Migration-of-WebAssembly-runtime-by-Postcopy"><a href="#Migration-of-WebAssembly-runtime-by-Postcopy" class="headerlink" title="Migration of WebAssembly runtime by Postcopy"></a>Migration of WebAssembly runtime by Postcopy</h2><p>User space page fault在Live migration of virtual machines已经有大量运用（KVM，OpenStack，CRIU Lazy migration），这一思路被称为Postcopy。目前尚未发现这一技术应用于WASM runtime的状态迁移。结合Mitosis的先例，或许Postcopy技术可以良好的与WASM runtime结合，从而实现可以快速大量启动实例的Serverless平台。</p><p>（目前只找到了一篇21年的论文，其中提到了他们计划结合Postcopy+wasm做边缘计算。但是他们目前还没有发表相关后续进展，不知道是因为他们没有继续深入，还是遇到了障碍）</p><h2 id="设计方案"><a href="#设计方案" class="headerlink" title="设计方案"></a>设计方案</h2><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-03-10%2010.34.24.png" alt="截屏2023-03-10 10.34.24"></p><p>Steps：</p><ol><li>Running node启动，从Memory node获取除内存外的全部数据</li><li>Running node初始化虚拟机内存（不进行映射），将这些内存标记为userfault</li><li>Running node运行，若access到了未被分配的page，则触发page fault</li><li>内核识别到该页为userfault page，将发生错误的地址发送给用户态的handle</li><li>handle使用XQUIC获取Memory node中相应的page，初始化该page</li><li>WASM runtime被唤醒，继续运行</li></ol><p>结合Postcopy+WASM技术，应该可以实现优于原生Faasm，优于CRIU，但慢于MITOSIS的一种启动策略。同时这一策略会比MITOSIS有更好的通用性。</p><p>此外，Postcopy+WASM比起Mitosis和CRIU这类“容器迁移”工具有一个优势，这两种技术在迁移容器的过程中，都不可避免带有一些“死重”，即容器本身运行时相关的上下文。而Postcopy+WASM只需动态迁移和程序负载本身相关的Page，因此或许可以在一定条件下取得一定优势。</p><p>Follow Up：</p><p>1.由于WASM虚拟机内，各种模块大小已知，或许可以根据这个做一些规划算法</p><p>2.将部分工作放入eBPF虚拟机，从而实现加速</p><h2 id="模拟测试"><a href="#模拟测试" class="headerlink" title="模拟测试"></a>模拟测试</h2><p>代码仓库：<a href="https://github.com/muchengl/userfault-test.git">https://github.com/muchengl/userfault-test.git</a></p><p>编写代码进行模拟测试，本代码分为Server端和Client端。Server端对应Memory Node，Client端对应Running Node。</p><p><strong>Server端</strong>使用malloc申请内存，并进行初始化。<strong>Client端</strong>使用mmap初始化内存，将fd参数设置为-1，从而获得大量未被映射的内存。并将这些内存标记为UFFD_EVENT_PAGEFAULT，即内核应将该内存的Page fault交给用户处理。Client端开启一个fault触发线程，不断按顺序access page，触发page fault。client端监听描述符uffd，获取内核传来的user fault信息，并通过udp协议，从server端获取相应的page，进行内存初始化。</p><p>在两台Ali Cloud云服务器之间进行测试，Ununtu 20.04系统，1G内存，2核CPU，在同一虚拟子网内使用UDP进行数据传输，每组测量进行10次，取CPU运行时间的平均值。可以发现，远程拷贝总时间与页数呈正比。在拷贝内存为100M时（25000页），较优情况下需要约0.97秒的时间。</p><table><thead><tr><th align="center">字段名称</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">Fault process time</td><td align="center">Fault触发线程的总运行时间，也就是负载代码的实际运行时间</td></tr><tr><td align="center">Init time</td><td align="center">Client端初始化时间</td></tr><tr><td align="center">IO time</td><td align="center">等待内核通过fd传输User Fault相关信息的时间（poll轮询）</td></tr><tr><td align="center">Network time</td><td align="center">UDP协议通信时间</td></tr><tr><td align="center">Server time</td><td align="center">Server端获取page，并通过UDP发送的时间</td></tr><tr><td align="center">Handle time</td><td align="center">获取到远程页后，初始化内存，并对远程页中的数据进行拷贝的时间</td></tr><tr><td align="center">Total time</td><td align="center">Total time=Network + Server + Handle + IO + Init<br />用于证明Network、Server、Handle、IO、Init可代表整个运行流程</td></tr></tbody></table><p>经计算：Fault process time ≈ Total time</p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-03-13%2014.03.01.png" alt="截屏2023-03-13 14.03.01"></p><p>数据分析和总结：</p><ul><li><p>Network占用了约7%的时间，真实环境下由于不会使用UDP，这一时间占比可能会更大。</p></li><li><p>IO time占比较大，为53%，这一时间在本地虚拟机测试中显著降低，因此或与CPU性能有较大关系。</p><p>  (本测试中，使用的是阿里云的玩具级服务器，cpu主频和内存读写速度可能被限制了)</p></li><li><p>数据读取和拷贝部分（Server、Handle），占用了40%左右的时间。对比MITOSIS，misosis使用rdma避免了在server端的内存拷贝，因此会慢于misosis。</p></li><li><p>本测试中，测试负载为“按顺序访问内存”，这一测试与真实环境有较大区别，因此不能代表将Postcopy实际引入wasm后的实际性能。</p></li></ul><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-03-13%2011.30.41.png" alt="截屏2023-03-13 11.30.41"></p><p>附数据：</p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-03-13%2012.37.29.png" alt="截屏2023-03-13 12.37.29"></p><h2 id="资料收集"><a href="#资料收集" class="headerlink" title="资料收集"></a>资料收集</h2><p>User space page fault handling相关早期文章：<br><a href="https://lwn.net/Articles/550555/">https://lwn.net/Articles/550555/</a><br><a href="https://lwn.net/Articles/615086/">https://lwn.net/Articles/615086/</a></p><h3 id="Postcopy原始论文："><a href="#Postcopy原始论文：" class="headerlink" title="Postcopy原始论文："></a>Postcopy原始论文：</h3><p><a href="https://kartikgopalan.github.io/publications/hines09postcopy.pdf">https://kartikgopalan.github.io/publications/hines09postcopy.pdf</a></p><h3 id="CRIU-Lazy-migration"><a href="#CRIU-Lazy-migration" class="headerlink" title="CRIU Lazy migration:"></a>CRIU Lazy migration:</h3><p><a href="https://www.researchgate.net/publication/328214412_Efficient_Live_Migration_of_Linux_Containers">https://www.researchgate.net/publication/328214412_Efficient_Live_Migration_of_Linux_Containers</a><br><a href="https://criu.org/Lazy_migration">https://criu.org/Lazy_migration</a><br><a href="https://lisas.de/~adrian/pdf/lazy-process-migration.pdf">https://lisas.de/~adrian/pdf/lazy-process-migration.pdf</a></p><h3 id="Postcopy在kvm的应用："><a href="#Postcopy在kvm的应用：" class="headerlink" title="Postcopy在kvm的应用："></a>Postcopy在kvm的应用：</h3><p><a href="https://www.jstage.jst.go.jp/article/imt/7/2/7_614/_pdf/-char/ja">https://www.jstage.jst.go.jp/article/imt/7/2/7_614/_pdf/-char/ja</a></p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-03-09%2022.10.22.png" alt="截屏2023-03-09 22.10.22"></p><p>RedHat在KVM迁移中的实践ppt：<br><a href="http://events17.linuxfoundation.org/sites/events/files/slides/kvmforum2014.pdf">http://events17.linuxfoundation.org/sites/events/files/slides/kvmforum2014.pdf</a><br><a href="https://wiki.qemu.org/Features/PostCopyLiveMigration">https://wiki.qemu.org/Features/PostCopyLiveMigration</a></p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-03-09%2017.42.42.png" alt="截屏2023-03-09 17.42.42"></p><ol><li>线程1访问了一个未被映射的page，发生userfault<br> get_user_pages_locked()<br> get_user_pages_unlocked()<br> 这两个函数可以避免内核处理fault，而是交给用户线程处理</li><li>线程2收到内核的通知——userfault在某个地址被触发了</li><li>线程2将此page从“memory node”传输过来（这和mitosis的“seed”很类似）</li><li>线程2将发生错误的page进行映射<br> remap_anon_pages()</li><li>线程2告知内核，内核唤醒线程1</li><li>线程1尝试访问fault page，并继续执行下去</li></ol><h3 id="Ubuntu对userfaultfd的支持"><a href="#Ubuntu对userfaultfd的支持" class="headerlink" title="Ubuntu对userfaultfd的支持"></a>Ubuntu对userfaultfd的支持</h3><p><a href="https://manpages.ubuntu.com/manpages/bionic/man2/userfaultfd.2.html">https://manpages.ubuntu.com/manpages/bionic/man2/userfaultfd.2.html</a></p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/flow.png" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ChatRepo handbook</title>
      <link href="/2023/03/07/ChatRepo-handbook/"/>
      <url>/2023/03/07/ChatRepo-handbook/</url>
      
        <content type="html"><![CDATA[<h1 id="chatrepo"><a href="#chatrepo" class="headerlink" title="chatrepo"></a>chatrepo</h1><p>Chat with your github repo with ChatGPT in Github Actions</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-03-08%2016.20.01.png&quot; width = 800 /&gt; &lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>ChatRepo，基于ChatGPT，使用Github app + Probot + Vercel构建。</p><h3 id="1）平台整体运行逻辑"><a href="#1）平台整体运行逻辑" class="headerlink" title="1）平台整体运行逻辑"></a>1）平台整体运行逻辑</h3><ol><li>配置好git app</li><li>用户提交issue</li><li>仓库触发app运行</li><li>app向指定的webhook点，发用户的isseu相关参数</li><li>vercel serverless平台启动服务，开始计算</li><li>最后把生成的答案写回issue</li></ol><div align="center"> <img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-03-07%2023.02.05.png" width = 800 /> </div><h3 id="2）开发者测逻辑"><a href="#2）开发者测逻辑" class="headerlink" title="2）开发者测逻辑"></a>2）开发者测逻辑</h3><div align="center"> <img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-03-07%2023.02.14.png" width = 700 /> </div><p>对于开发者，为了搭建ChatRepo平台，需要完成以下几步：</p><ol><li><p>申请一个Git App，git app只有公开和私有两种选项。由于chatrepo含有chatGPT token，因此不能公开，只能私有申请一个（此处webhook随便填一个）。<br><a href="https://github.com/settings/apps/new">https://github.com/settings/apps/new</a></p></li><li><p>创建ChatRepo仓库，里面放ChatRepo代码（这个我们已经有了）</p></li><li><p>在vercel平台，从github导入ChatRepo仓库，后续该平台会自动构建<br> <a href="https://vercel.com/new">https://vercel.com/new</a></p></li><li><p>此时，ChatRepo没有任何隐私数据（Git App的密钥和chatGPT token），因此需要在vercel平台的环境变量里加入：</p></li></ol><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-03-07%2020.24.53.png" alt="截屏2023-03-07 20.24.53"></p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-03-07%2020.25.13.png" alt="截屏2023-03-07 20.25.13"><br>5. 重启vercel平台上的服务，载入环境变量</p><ol start="6"><li>在Git App配置页面修改App的权限：<br><a href="https://github.com/settings/apps/[your">https://github.com/settings/apps/[your</a> app name]/permissions</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">把这几项设置为可读写：</span><br><span class="line">Commit statuses</span><br><span class="line">Contents</span><br><span class="line">Discussions</span><br><span class="line">Issues</span><br></pre></td></tr></table></figure><p>在事件处，勾选以下事件：</p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-03-07%2020.28.55.png" alt="截屏2023-03-07 20.28.55"></p><ol start="7"><li>此时Vercel平台会分配一个Domin，将app的webhook设置为：<pre><code> domin+/api/github/webhooks</code></pre></li></ol><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-03-07%2020.36.20.png" alt="截屏2023-03-07 20.36.20"><br>应该是类似这样的一个链接：<a href="https://chatbot-rosy.vercel.app/api/github/webhooks">https://chatbot-rosy.vercel.app/api/github/webhooks</a></p><ol start="8"><li><p>安装Git App，选择需要ChatRepo的仓库<br><a href="https://github.com/settings/apps/[your">https://github.com/settings/apps/[your</a> app name]/installations</p></li><li><p>在仓库新建一个issue，进行测试。如果一切无误，则可以看到CharRepo上线自动回答</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">/Bot xxxxx</span><br><span class="line">和chat gpa普通聊天</span><br><span class="line">/chatrepo xxxxx</span><br><span class="line">询问charrepo仓库相关问题</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-开发者模式"><a href="#3-开发者模式" class="headerlink" title="3) 开发者模式"></a>3) 开发者模式</h2><p>开发过程中，不需要每次都进行部署，可以搭建一个本地开发环境：</p><p>参考：<a href="https://probot.github.io/docs/development/#running-the-app-locally">https://probot.github.io/docs/development/#running-the-app-locally</a></p><p>1.环境初始化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><p>2.根据提示，访问localhost:3000</p><p>3.根据指示创建一个新的Git App</p><p>4.此时，prebot会创建一个.env文件，在文件中添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GPT_KEY= [your chatGPT token]</span><br></pre></td></tr></table></figure><p>不要将此文件上传到git</p><p>5.参考第二章，设置app权限，并选择一个repo安装该app</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>lc1653. Minimum Deletions to Make String Balanced</title>
      <link href="/2023/03/05/lc1653-Minimum-Deletions-to-Make-String-Balanced/"/>
      <url>/2023/03/05/lc1653-Minimum-Deletions-to-Make-String-Balanced/</url>
      
        <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>You are given a string s consisting only of characters ‘a’ and ‘b’.</p><p>You can delete any number of characters in s to make s balanced. s is balanced if there is no pair of indices (i,j) such that i &lt; j and s[i] = ‘b’ and s[j]= ‘a’.</p><p>Return the minimum number of deletions needed to make s balanced.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: s = &quot;aababbab&quot;</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: You can either:</span><br><span class="line">Delete the characters at 0-indexed positions 2 and 6 (&quot;aababbab&quot; -&gt; &quot;aaabbb&quot;), or</span><br><span class="line">Delete the characters at 0-indexed positions 3 and 6 (&quot;aababbab&quot; -&gt; &quot;aabbbb&quot;).</span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line">Input: s = &quot;bbaaaaabb&quot;</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The only solution is to delete the first two characters.</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>1 &lt;= s.length &lt;= 105</code></li><li><code>s[i]</code> is <code>&#39;a&#39;</code> or <code>&#39;b&#39;</code>.</li></ul><h2 id="My-solution"><a href="#My-solution" class="headerlink" title="My solution"></a>My solution</h2><p>Very unfortunate, my solution is not the best solution.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minimumDeletions</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="comment">// The first way is to delete b before a</span></span><br><span class="line">        <span class="comment">// The second option is to delete a after b</span></span><br><span class="line">        <span class="comment">// In some conditions, I need to combine the two ways.</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// aababbab</span></span><br><span class="line">        <span class="comment">// aaabbb</span></span><br><span class="line">        <span class="comment">// aabbbb</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// dp[i][1] end with a</span></span><br><span class="line">        <span class="comment">// dp[i][2] end with b</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// dp[i][1] = dp[i-1][1]                    (s[i]==a)</span></span><br><span class="line">        <span class="comment">// dp[i][1] = dp[i-1][1]+1                  (s[i]==b)</span></span><br><span class="line">        <span class="comment">// dp[i][2] = Min(dp[i-1][1],dp[i-1][2]+1)  (s[i]==a) </span></span><br><span class="line">        <span class="comment">// dp[i][2] = Min(dp[i-1][1],dp[i-1][2])    (s[i]==b)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// ans = Min(dp[i][1],dp[i][2])</span></span><br><span class="line">      </span><br><span class="line">        <span class="type">int</span> dp[][]=<span class="keyword">new</span> <span class="title class_">int</span>[s.length()+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="type">char</span> c=s.charAt(i);</span><br><span class="line">            i++; <span class="comment">//This avoids judging boundaries</span></span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">&#x27;a&#x27;</span>)&#123;</span><br><span class="line">                dp[i][<span class="number">1</span>] = dp[i-<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">                dp[i][<span class="number">2</span>] = Math.min(dp[i-<span class="number">1</span>][<span class="number">1</span>],dp[i-<span class="number">1</span>][<span class="number">2</span>]+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                dp[i][<span class="number">1</span>] = dp[i-<span class="number">1</span>][<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">                dp[i][<span class="number">2</span>] = Math.min(dp[i-<span class="number">1</span>][<span class="number">1</span>],dp[i-<span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            i--;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.min(dp[s.length()][<span class="number">1</span>],dp[s.length()][<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Best-solution"><a href="#Best-solution" class="headerlink" title="Best solution"></a>Best solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minimumDeletions</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Delete all b to the left of this point</span></span><br><span class="line">        <span class="comment">// Delete all a to the right of this point</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// I just need to know the number of a to the left of any point.</span></span><br><span class="line">        <span class="comment">// And i need to know the number of a and b in the whole string.</span></span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> num_a=<span class="number">0</span>,num_b=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="type">char</span> c=s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">&#x27;a&#x27;</span>) num_a++;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> con_a=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> ans=num_a;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">             <span class="type">char</span> c=s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">&#x27;a&#x27;</span>) num_a--;</span><br><span class="line">            <span class="keyword">else</span> num_b++;</span><br><span class="line"></span><br><span class="line">            ans=Math.min(ans,num_a+num_b);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>eBPF(XDP &amp; sockopts)加速数据传输问题</title>
      <link href="/2023/02/27/XDP%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E9%97%AE%E9%A2%98%E7%BB%BC%E8%BF%B0/"/>
      <url>/2023/02/27/XDP%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E9%97%AE%E9%A2%98%E7%BB%BC%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<p>Best choice is XQUIC！XQUIC Yes！</p><h2 id="1）XDP网络加速方案"><a href="#1）XDP网络加速方案" class="headerlink" title="1）XDP网络加速方案"></a>1）XDP网络加速方案</h2><p>经研究，基于xdp进行serverless服务启动加速这一问题，可以分为两个子问题：</p><pre><code> 1. 如何在WASM runtime中远程恢复运行状态 2. 如何使用XDP进行高效的数据传输？(是否已经有类似的解决方案？)</code></pre><p>我认为两个问题中，问题2优先级更高。因为事实上这一问题可以拓展为：通过 xdp + sockopts 实现通用的网络加速方案。</p><p>目前网络上暂没有找到类似的解决方案（具体参考第二节），如果我们可以完成这种方案，则该方案不仅可以用于serverless加速，还可以应用于很多很多场景，将具有很好的前景。</p><p>初步构想：由于xdp本身并不具备完整的协议栈，也不能保证数据包的完整性。该设施使用ebpf-xdp技术替换某种网络协议的底层，从而实现一种高速网络通信方案</p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-02-27%2019.33.35.png" alt="截屏2023-02-27 19.33.35"></p><h2 id="2）eBPF在网络加速中的实例"><a href="#2）eBPF在网络加速中的实例" class="headerlink" title="2）eBPF在网络加速中的实例"></a>2）eBPF在网络加速中的实例</h2><p>AF_XDP技术较新，且AF_XDP的设计主要是针对数据包进行处理，目前可以找到一些AF_XDP在网关等应用的使用实例。这是由于xdp的性质，1）截获网络数据包，2）并重定向包到用户态进行处理，3）最后将数据包传输出去。这一特性非常适合应用于网关应用。</p><p>此外XDP在黑名单处理和抵御DDos攻击等方面已有较多实践。</p><p>但目前暂时没有找到使用AF_XDP进行数据传输的实践。</p><p>以下是一些关于eBPF进行网络加速的应用实例：</p><h3 id="AF-XDP在B站CDN节点QUIC网关的应用和落地"><a href="#AF-XDP在B站CDN节点QUIC网关的应用和落地" class="headerlink" title="AF_XDP在B站CDN节点QUIC网关的应用和落地"></a>AF_XDP在B站CDN节点QUIC网关的应用和落地</h3><p>原文地址：<a href="https://www.bilibili.com/read/cv20778694">https://www.bilibili.com/read/cv20778694</a></p><p>类似的东西：<a href="https://knot-resolver.readthedocs.io/en/stable/daemon-bindings-net_xdpsrv.html">https://knot-resolver.readthedocs.io/en/stable/daemon-bindings-net_xdpsrv.html</a></p><p>基于AF_XDP的QUIC网关，XDP程序对数据帧进行过滤，把发给quic-server的HTTP/3请求所对应的数据帧重定向到quic-server维护的xsk中。 </p><p>基于AF_XDP的QUIC网关与原生网关对比：</p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-02-27%2017.52.21.png" alt="截屏2023-02-27 17.52.21"></p><p>基于AF_XDP的QUIC网关执行逻辑：</p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-02-27%2020.01.25.png" alt="截屏2023-02-27 20.01.25"></p><h3 id="2）lstio"><a href="#2）lstio" class="headerlink" title="2）lstio"></a>2）lstio</h3><p>介绍：<a href="https://istio.io/v1.15/blog/2022/merbridge/">https://istio.io/v1.15/blog/2022/merbridge/</a></p><p>lstio使用了sockopts进行了同机器下的网络通信加速。</p><p>原生网络传输路径：</p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/5.png" alt="5"></p><p>使用sockopts进行跨机器加速：</p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/6.png" alt="6"></p><p>使用sockopts进行同机器加速：</p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-02-27%2018.52.48.png" alt="截屏2023-02-27 18.52.48"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>eBPF AF_XDP学习</title>
      <link href="/2023/02/21/eBPF-XDP/"/>
      <url>/2023/02/21/eBPF-XDP/</url>
      
        <content type="html"><![CDATA[<p>官方教程地址（19年版本，有些旧，包依赖关系已经发生了变化）：<a href="https://github.com/xdp-project/xdp-tutorial">https://github.com/xdp-project/xdp-tutorial</a></p><p><strong>What is AF_XDP?</strong></p><p>AF_XDP是一个为高性能数据包处理而优化的解决方案</p><p>使用XDP程序中的XDP_REDIRECT动作，该程序可以使用bpf_redirect_map()函数将入帧重定向到其他支持XDP的netdev。AF_XDP socket使XDP程序能够将帧重定向到用户空间应用程序中的内存缓冲区，从而在用户态对数据包进行各种处理</p><h2 id="1）XDP程序Easy-Example"><a href="#1）XDP程序Easy-Example" class="headerlink" title="1）XDP程序Easy Example"></a>1）XDP程序Easy Example</h2><p>下列程序可以用于在遭受DDos攻击时使用，作用是丢弃所有网络数据包(不要随意在实际网卡跑这个程序，当此程序加载成功的瞬间，ssh链接就会失效，然后就只能重启服务器了)：</p><p>XDP内核程序，会被编译为.o文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/bpf.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bpf/bpf_helpers.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">SEC(<span class="string">&quot;xdp&quot;</span>)</span><br><span class="line"><span class="type">int</span>  <span class="title function_">xdp_prog_simple</span><span class="params">(<span class="keyword">struct</span> xdp_md *ctx)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> XDP_DROP;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> _license[] SEC(<span class="string">&quot;license&quot;</span>) = <span class="string">&quot;GPL&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>加载XDP bpf模块的核心程序：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">xdp_link_attach</span><span class="params">(<span class="type">int</span> ifindex, __u32 xdp_flags, <span class="type">int</span> prog_fd)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* Next assignment this will move into ../common/ */</span></span><br><span class="line"><span class="type">int</span> err;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* libbpf provide the XDP net_device link-level hook attach helper */</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * 通过helper进行加载</span></span><br><span class="line"><span class="comment">   * ifindex 网卡设备编号</span></span><br><span class="line"><span class="comment">   * prog_fd bpf模块的fd</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">err = bpf_set_link_xdp_fd(ifindex, prog_fd, xdp_flags);</span><br><span class="line"><span class="keyword">if</span> (err == -EEXIST &amp;&amp; !(xdp_flags &amp; XDP_FLAGS_UPDATE_IF_NOEXIST)) &#123;</span><br><span class="line"><span class="comment">/* Force mode didn&#x27;t work, probably because a program of the</span></span><br><span class="line"><span class="comment"> * opposite type is loaded. Let&#x27;s unload that and try loading</span></span><br><span class="line"><span class="comment"> * again.</span></span><br><span class="line"><span class="comment"> * 使用SKB_MODE进行加载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">__u32 old_flags = xdp_flags;</span><br><span class="line"></span><br><span class="line">xdp_flags &amp;= ~XDP_FLAGS_MODES;</span><br><span class="line">xdp_flags |= (old_flags &amp; XDP_FLAGS_SKB_MODE) ? XDP_FLAGS_DRV_MODE : XDP_FLAGS_SKB_MODE;</span><br><span class="line">err = bpf_set_link_xdp_fd(ifindex, <span class="number">-1</span>, xdp_flags);</span><br><span class="line"><span class="keyword">if</span> (!err)</span><br><span class="line">err = bpf_set_link_xdp_fd(ifindex, prog_fd, old_flags);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (err &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">// 无法记载，do something</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> EXIT_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在libbpf中，可以直接使用libbpf提供的加载工具函数进行加载。</p><h2 id="2）XDP内核程序参数"><a href="#2）XDP内核程序参数" class="headerlink" title="2）XDP内核程序参数"></a>2）XDP内核程序参数</h2><h3 id="XDP输出参数："><a href="#XDP输出参数：" class="headerlink" title="XDP输出参数："></a>XDP输出参数：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">xdp_action</span> &#123;</span></span><br><span class="line">XDP_ABORTED = <span class="number">0</span>, <span class="comment">// Drop packet while raising an exception</span></span><br><span class="line">XDP_DROP, <span class="comment">//丢弃</span></span><br><span class="line">XDP_PASS, <span class="comment">//放行</span></span><br><span class="line">XDP_TX,   <span class="comment">//从同一网课返回该数据包</span></span><br><span class="line">XDP_REDIRECT, <span class="comment">//重定向，AF_XDP可以将数据包重定向到用户态，进行处理</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="XDP输入参数："><a href="#XDP输入参数：" class="headerlink" title="XDP输入参数："></a>XDP输入参数：</h3><p><strong>data</strong>和<strong>data_end</strong>字段分别是数据包开始和结束的指针，它们是用来获取和解析传来的数据，第三个值是<strong>data_meta</strong>指针，初始阶段它是一个空闲的内存地址，供XDP程序与其他层交换数据包元数据时使用。最后两个字段分别是接收数据包的接口和对应的RX队列的索引。当访问这两个值时，BPF代码会在内核内部重写，以访问实际持有这些值的内核结构<strong>struct xdp_rxq_info</strong>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">xdp_md</span> &#123;</span></span><br><span class="line">__u32 data;</span><br><span class="line">__u32 data_end;</span><br><span class="line">__u32 data_meta;</span><br><span class="line"><span class="comment">// Below access go through struct xdp_rxq_info</span></span><br><span class="line">__u32 ingress_ifindex; <span class="comment">// rxq-&gt;dev-&gt;ifindex</span></span><br><span class="line">__u32 rx_queue_index;  <span class="comment">// rxq-&gt;queue_index</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="3）Libbpf中使用AF-XDP"><a href="#3）Libbpf中使用AF-XDP" class="headerlink" title="3）Libbpf中使用AF_XDP"></a>3）Libbpf中使用AF_XDP</h2><p>由于现在libbpf已经停止了对AF_xdp socket(xsk)的直接支持，为了方便，直接在libpbf项目中手动引入XDP-TOOL，以获取xdp全部功能<br><a href="https://github.com/libbpf/libbpf/commit/277846bc6c15b603c8fdfbd757700443c95a4a96">https://github.com/libbpf/libbpf/commit/277846bc6c15b603c8fdfbd757700443c95a4a96</a><br>XDP tools: <a href="https://github.com/xdp-project/xdp-tools">https://github.com/xdp-project/xdp-tools</a></p><p>步骤如下：</p><ol><li><p>将xdp-tools包加入libbpf项目目录</p></li><li><p>修改makefile，对xdp-tools进行编译链接</p> <figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#加入编译xdp-tool的部分</span></span><br><span class="line">XDPTOOL_SRC := <span class="variable">$(<span class="built_in">abspath</span> ../../xdp-tools)</span> <span class="comment">#待编译文件</span></span><br><span class="line">LIBXDP_SOURCES := <span class="variable">$(<span class="built_in">wildcard</span> <span class="variable">$(XDPTOOL_SRC)</span>/lib/libxdp/libxdp*.[ch])</span> $(<span class="variable">$(XDPTOOL_SRC)</span>/lib/libxdp/xsk.c)</span><br><span class="line">XDPTOOL := <span class="variable">$(<span class="built_in">abspath</span> <span class="variable">$(OUTPUT)</span>/libxdp.a)</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(XDPTOOL)</span>: <span class="variable">$(LIBXDP_SOURCES)</span></span><br><span class="line"><span class="variable">$(<span class="built_in">call</span> msg,LIB,<span class="variable">$@</span>)</span></span><br><span class="line"><span class="variable">$(Q)</span><span class="variable">$(MAKE)</span> -C <span class="variable">$(XDPTOOL_SRC)</span> BUILD_STATIC_ONLY=1\</span><br><span class="line">OBJDIR=<span class="variable">$(<span class="built_in">dir</span> <span class="variable">$@</span>)</span>/xdptool DESTDIR=<span class="variable">$(<span class="built_in">dir</span> <span class="variable">$@</span>)</span>      \</span><br><span class="line">INCLUDEDIR= LIBDIR= UAPIDIR=      \</span><br><span class="line">libxdp_install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后生成可执行文件时，链接xdp-tool</span></span><br><span class="line"><span class="variable">$(APPS)</span>: %: <span class="variable">$(OUTPUT)</span>/%.o <span class="variable">$(XDPTOOL)</span> <span class="variable">$(LIBBPF_OBJ)</span>| <span class="variable">$(OUTPUT)</span>  </span><br><span class="line"><span class="variable">$(<span class="built_in">call</span> msg,BINARY,<span class="variable">$@</span>)</span></span><br><span class="line"><span class="variable">$(Q)</span><span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> <span class="variable">$^</span> <span class="variable">$(ALL_LDFLAGS)</span> -lpthread -lelf -lz -o <span class="variable">$@</span></span><br></pre></td></tr></table></figure></li><li><p>在用户态bpf程序中引入 #include &lt;xdp/xsk.h&gt;，后续即可使用AF_XDP的功能</p></li><li><p>利用Libbpf中的帮助函数attach xdp程序：</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取全部网卡信息的工具函数</span></span><br><span class="line"><span class="comment">// 参考此博客 https://blog.csdn.net/Rong_Toa/article/details/109118585</span></span><br><span class="line"><span class="type">int</span> ret = get_ifinfo(ifdisplay, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Attack bpf sec to all IF devs</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;ret;i++)&#123;</span><br><span class="line">bpf_program__attach_xdp (skel-&gt;progs.xdp_prog, i);</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Failed to attach BPF skeleton\n&quot;</span>);</span><br><span class="line"><span class="keyword">goto</span> cleanup;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>经过测试，可以在pipe中看到XDP包的信息</p><h2 id="4）利用AF-XDP将数据包redirect到用户态"><a href="#4）利用AF-XDP将数据包redirect到用户态" class="headerlink" title="4）利用AF XDP将数据包redirect到用户态"></a>4）利用AF XDP将数据包redirect到用户态</h2><h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><p><a href="https://www.kernel.org/doc/html/next/networking/af_xdp.html">https://www.kernel.org/doc/html/next/networking/af_xdp.html</a><br><a href="https://blog.cloudflare.com/a-story-about-af-xdp-network-namespaces-and-a-cookie/">https://blog.cloudflare.com/a-story-about-af-xdp-network-namespaces-and-a-cookie/</a></p><h3 id="AF-XDP用户态与内核交换数据包原理："><a href="#AF-XDP用户态与内核交换数据包原理：" class="headerlink" title="AF_XDP用户态与内核交换数据包原理："></a>AF_XDP用户态与内核交换数据包原理：</h3><p>AF_XDP在在用户和内核之间，声明了一块公共的内存区域：UMEM。xdp内核程序会将xdp数据包存储在UMEM里，<br>同时有四种ring：FILL, COMPLETION, RX , TX。内核将指向UMEM中数据包的指针放入RX queue里。供用户空间消费。同时用户态可以通过写入TX queue，将数据包传回内核处理。内核处理该数据包之后，将TX描述符放入completion queue里，表示处理完成。最后用户空间可以在Fill queue或TX队列里回收描述符。</p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/image7-6.png" alt="image7-6"></p><p>一张很有启发意义的图：</p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/unnamed1.png" alt="unnamed1"></p><h2 id="5）AF-XDP代码详解"><a href="#5）AF-XDP代码详解" class="headerlink" title="5）AF_XDP代码详解"></a>5）AF_XDP代码详解</h2><ol><li><p>分配和初始化UMEM</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">xsk_umem_info</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">xsk_ring_prod</span> <span class="title">fq</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">xsk_ring_cons</span> <span class="title">cq</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">xsk_umem</span> *<span class="title">umem</span>;</span></span><br><span class="line"><span class="type">void</span> *buffer;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">xsk_umem_info</span> *<span class="title">umem</span>;</span></span><br><span class="line"><span class="type">void</span> *packet_buffer;</span><br><span class="line"><span class="type">uint64_t</span> packet_buffer_size = NUM_FRAMES * FRAME_SIZE;</span><br><span class="line"><span class="comment">// 进行内存对齐</span></span><br><span class="line">posix_memalign(&amp;packet_buffer,</span><br><span class="line">   getpagesize(), <span class="comment">/* PAGE_SIZE aligned */</span></span><br><span class="line">   packet_buffer_size)</span><br><span class="line"><span class="comment">// 初始化UMEM</span></span><br><span class="line">umem = configure_xsk_umem(packet_buffer, packet_buffer_size);</span><br><span class="line"></span><br><span class="line"><span class="comment">// configure_xsk_umem 函数定义</span></span><br><span class="line"><span class="type">static</span> <span class="keyword">struct</span> xsk_umem_info *<span class="title function_">configure_xsk_umem</span><span class="params">(<span class="type">void</span> *buffer, <span class="type">uint64_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">xsk_umem_info</span> *<span class="title">umem</span>;</span></span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line"><span class="comment">// 声明一块内存空间</span></span><br><span class="line">umem = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="keyword">sizeof</span>(*umem));</span><br><span class="line"><span class="keyword">if</span> (!umem)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">// 进行umeme创建</span></span><br><span class="line">ret = xsk_umem__create(&amp;umem-&gt;umem, buffer, size, &amp;umem-&gt;fq, &amp;umem-&gt;cq,</span><br><span class="line">       <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (ret) &#123;</span><br><span class="line">errno = -ret;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">umem-&gt;buffer = buffer;</span><br><span class="line"><span class="keyword">return</span> umem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>开启AF_XDP socket (xsk)</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">xsk_socket_info</span> *<span class="title">xsk_socket</span>;</span></span><br><span class="line">xsk_socket = xsk_configure_socket(umem);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该函数写死了部分参数，实际使用应通过变量传入这些参数</span></span><br><span class="line"><span class="type">static</span> <span class="keyword">struct</span> xsk_socket_info *<span class="title function_">xsk_configure_socket</span><span class="params">(<span class="keyword">struct</span> xsk_umem_info *umem)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">xsk_socket_config</span> <span class="title">xsk_cfg</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">xsk_socket_info</span> *<span class="title">xsk_info</span>;</span></span><br><span class="line"><span class="type">uint32_t</span> idx;</span><br><span class="line"><span class="type">uint32_t</span> prog_id = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">xsk_info = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="keyword">sizeof</span>(*xsk_info));</span><br><span class="line"><span class="keyword">if</span> (!xsk_info)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">xsk_info-&gt;umem = umem;</span><br><span class="line">xsk_cfg.rx_size = XSK_RING_CONS__DEFAULT_NUM_DESCS;</span><br><span class="line">xsk_cfg.tx_size = XSK_RING_PROD__DEFAULT_NUM_DESCS;</span><br><span class="line">xsk_cfg.libbpf_flags = <span class="number">0</span>;</span><br><span class="line">xsk_cfg.xdp_flags = <span class="number">0</span>; <span class="comment">//***</span></span><br><span class="line">xsk_cfg.bind_flags = <span class="number">0</span>; <span class="comment">//***</span></span><br><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment">* int xsk_socket__create(</span></span><br><span class="line"><span class="comment">*  struct xsk_socket **xsk,</span></span><br><span class="line"><span class="comment">*  const char *ifname, </span></span><br><span class="line"><span class="comment">*     __u32 queue_id,</span></span><br><span class="line"><span class="comment">*  struct xsk_umem *umem,</span></span><br><span class="line"><span class="comment">*  struct xsk_ring_cons *rx,</span></span><br><span class="line"><span class="comment">*  struct xsk_ring_prod *tx,</span></span><br><span class="line"><span class="comment">*  const struct xsk_socket_config *config);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 指定将Af_XDP附加在veth-adv03网卡上</span></span><br><span class="line">ret = xsk_socket__create(&amp;xsk_info-&gt;xsk, <span class="string">&quot;veth-adv03&quot;</span>,</span><br><span class="line"> <span class="number">0</span>, umem-&gt;umem, &amp;xsk_info-&gt;rx,</span><br><span class="line"> &amp;xsk_info-&gt;tx, &amp;xsk_cfg);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ret)</span><br><span class="line"><span class="keyword">goto</span> error_exit;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断是否创建成功</span></span><br><span class="line"><span class="comment">// ifindex ,prog_id, xdp_flags</span></span><br><span class="line">ret = bpf_get_link_xdp_id(<span class="number">0</span>, &amp;prog_id, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (ret)</span><br><span class="line"><span class="keyword">goto</span> error_exit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Initialize umem frame allocation */</span></span><br><span class="line"><span class="comment">// 初始化UMEM</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; NUM_FRAMES; i++)</span><br><span class="line">xsk_info-&gt;umem_frame_addr[i] = i * FRAME_SIZE;</span><br><span class="line"></span><br><span class="line">xsk_info-&gt;umem_frame_free = NUM_FRAMES;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Stuff the receive path with buffers, we assume we have enough */</span></span><br><span class="line">  <span class="comment">// 初始化RX队列</span></span><br><span class="line">ret = xsk_ring_prod__reserve(&amp;xsk_info-&gt;umem-&gt;fq,</span><br><span class="line">     XSK_RING_PROD__DEFAULT_NUM_DESCS,</span><br><span class="line">     &amp;idx);</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ret != XSK_RING_PROD__DEFAULT_NUM_DESCS)</span><br><span class="line"><span class="keyword">goto</span> error_exit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; XSK_RING_PROD__DEFAULT_NUM_DESCS; i ++)</span><br><span class="line">*xsk_ring_prod__fill_addr(&amp;xsk_info-&gt;umem-&gt;fq, idx++) =</span><br><span class="line">xsk_alloc_umem_frame(xsk_info);</span><br><span class="line"></span><br><span class="line">xsk_ring_prod__submit(&amp;xsk_info-&gt;umem-&gt;fq,</span><br><span class="line">      XSK_RING_PROD__DEFAULT_NUM_DESCS);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> xsk_info;</span><br><span class="line"></span><br><span class="line">error_exit:</span><br><span class="line">errno = -ret;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>定数输出xdp数据包数据</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">pthread_t</span> stats_poll_thread;</span><br><span class="line"><span class="type">int</span> ret = pthread_create(&amp;stats_poll_thread, <span class="literal">NULL</span>, stats_poll,xsk_socket);</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">bool</span> global_exit;</span><br><span class="line"><span class="type">static</span> <span class="type">void</span> *<span class="title function_">stats_poll</span><span class="params">(<span class="type">void</span> *arg)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> interval = <span class="number">2</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">xsk_socket_info</span> *<span class="title">xsk</span> =</span> arg;</span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">stats_record</span> <span class="title">previous_stats</span> =</span> &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">previous_stats.timestamp = gettime();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Trick to pretty printf with thousands separators use %&#x27; */</span></span><br><span class="line">setlocale(LC_NUMERIC, <span class="string">&quot;en_US&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!global_exit) &#123;</span><br><span class="line">sleep(interval);</span><br><span class="line">xsk-&gt;stats.timestamp = gettime();</span><br><span class="line">stats_print(&amp;xsk-&gt;stats, &amp;previous_stats);</span><br><span class="line">previous_stats = xsk-&gt;stats;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>从RX队列中poll数据，并进行处理（此章节未完成）</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line">rx_and_process(xsk_socket);</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">rx_and_process</span><span class="params">(<span class="keyword">struct</span> xsk_socket_info *xsk_socket)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> <span class="title">fds</span>[2];</span></span><br><span class="line"><span class="type">int</span> ret, nfds = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(fds, <span class="number">0</span>, <span class="keyword">sizeof</span>(fds));</span><br><span class="line">fds[<span class="number">0</span>].fd = xsk_socket__fd(xsk_socket-&gt;xsk);</span><br><span class="line">fds[<span class="number">0</span>].events = POLLIN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!global_exit) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;skb-mode&quot;</span>) &#123;</span><br><span class="line">ret = poll(fds, nfds, <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span> (ret &lt;= <span class="number">0</span> || ret &gt; <span class="number">1</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">handle_receive_packets(xsk_socket); <span class="comment">//用户态处理xdp数据包核心函数</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">handle_receive_packets</span><span class="params">(<span class="keyword">struct</span> xsk_socket_info *xsk)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> rcvd, stock_frames, i;</span><br><span class="line"><span class="type">uint32_t</span> idx_rx = <span class="number">0</span>, idx_fq = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">rcvd = xsk_ring_cons__peek(&amp;xsk-&gt;rx, RX_BATCH_SIZE, &amp;idx_rx);</span><br><span class="line"><span class="keyword">if</span> (!rcvd)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Stuff the ring with as much frames as possible */</span></span><br><span class="line">stock_frames = xsk_prod_nb_free(&amp;xsk-&gt;umem-&gt;fq,</span><br><span class="line">xsk_umem_free_frames(xsk));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (stock_frames &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">ret = xsk_ring_prod__reserve(&amp;xsk-&gt;umem-&gt;fq, stock_frames,</span><br><span class="line">     &amp;idx_fq);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* This should not happen, but just in case */</span></span><br><span class="line"><span class="keyword">while</span> (ret != stock_frames)</span><br><span class="line">ret = xsk_ring_prod__reserve(&amp;xsk-&gt;umem-&gt;fq, rcvd,</span><br><span class="line">     &amp;idx_fq);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; stock_frames; i++)</span><br><span class="line">*xsk_ring_prod__fill_addr(&amp;xsk-&gt;umem-&gt;fq, idx_fq++) =</span><br><span class="line">xsk_alloc_umem_frame(xsk);</span><br><span class="line"></span><br><span class="line">xsk_ring_prod__submit(&amp;xsk-&gt;umem-&gt;fq, stock_frames);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Process received packets */</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; rcvd; i++) &#123;</span><br><span class="line"><span class="type">uint64_t</span> addr = xsk_ring_cons__rx_desc(&amp;xsk-&gt;rx, idx_rx)-&gt;addr;</span><br><span class="line"><span class="type">uint32_t</span> len = xsk_ring_cons__rx_desc(&amp;xsk-&gt;rx, idx_rx++)-&gt;len;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!process_packet(xsk, addr, len))</span><br><span class="line">xsk_free_umem_frame(xsk, addr);</span><br><span class="line"></span><br><span class="line">xsk-&gt;stats.rx_bytes += len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">xsk_ring_cons__release(&amp;xsk-&gt;rx, rcvd);</span><br><span class="line">xsk-&gt;stats.rx_packets += rcvd;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Do we need to wake up the kernel for transmission */</span></span><br><span class="line">complete_tx(xsk);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理数据包核心逻辑部分</span></span><br><span class="line"><span class="type">static</span> <span class="type">bool</span> <span class="title function_">process_packet</span><span class="params">(<span class="keyword">struct</span> xsk_socket_info *xsk,</span></span><br><span class="line"><span class="params">   <span class="type">uint64_t</span> addr, <span class="type">uint32_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> *pkt = xsk_umem__get_data(xsk-&gt;umem-&gt;buffer, addr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Lesson#3: Write an IPv6 ICMP ECHO parser to send responses</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Some assumptions to make it easier:</span></span><br><span class="line"><span class="comment"> * - No VLAN handling</span></span><br><span class="line"><span class="comment"> * - Only if nexthdr is ICMP</span></span><br><span class="line"><span class="comment"> * - Just return all data with MAC/IP swapped, and type set to</span></span><br><span class="line"><span class="comment"> *   ICMPV6_ECHO_REPLY</span></span><br><span class="line"><span class="comment"> * - Recalculate the icmp checksum */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line"><span class="type">uint32_t</span> tx_idx = <span class="number">0</span>;</span><br><span class="line"><span class="type">uint8_t</span> tmp_mac[ETH_ALEN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in6_addr</span> <span class="title">tmp_ip</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ethhdr</span> *<span class="title">eth</span> =</span> (<span class="keyword">struct</span> ethhdr *) pkt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ipv6hdr</span> *<span class="title">ipv6</span> =</span> (<span class="keyword">struct</span> ipv6hdr *) (eth + <span class="number">1</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">icmp6hdr</span> *<span class="title">icmp</span> =</span> (<span class="keyword">struct</span> icmp6hdr *) (ipv6 + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ntohs(eth-&gt;h_proto) != ETH_P_IPV6 ||</span><br><span class="line">    len &lt; (<span class="keyword">sizeof</span>(*eth) + <span class="keyword">sizeof</span>(*ipv6) + <span class="keyword">sizeof</span>(*icmp)) ||</span><br><span class="line">    ipv6-&gt;nexthdr != IPPROTO_ICMPV6 ||</span><br><span class="line">    icmp-&gt;icmp6_type != ICMPV6_ECHO_REQUEST)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(tmp_mac, eth-&gt;h_dest, ETH_ALEN);</span><br><span class="line"><span class="built_in">memcpy</span>(eth-&gt;h_dest, eth-&gt;h_source, ETH_ALEN);</span><br><span class="line"><span class="built_in">memcpy</span>(eth-&gt;h_source, tmp_mac, ETH_ALEN);</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(&amp;tmp_ip, &amp;ipv6-&gt;saddr, <span class="keyword">sizeof</span>(tmp_ip));</span><br><span class="line"><span class="built_in">memcpy</span>(&amp;ipv6-&gt;saddr, &amp;ipv6-&gt;daddr, <span class="keyword">sizeof</span>(tmp_ip));</span><br><span class="line"><span class="built_in">memcpy</span>(&amp;ipv6-&gt;daddr, &amp;tmp_ip, <span class="keyword">sizeof</span>(tmp_ip));</span><br><span class="line"></span><br><span class="line">icmp-&gt;icmp6_type = ICMPV6_ECHO_REPLY;</span><br><span class="line"></span><br><span class="line">csum_replace2(&amp;icmp-&gt;icmp6_cksum,</span><br><span class="line">      htons(ICMPV6_ECHO_REQUEST &lt;&lt; <span class="number">8</span>),</span><br><span class="line">      htons(ICMPV6_ECHO_REPLY &lt;&lt; <span class="number">8</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Here we sent the packet out of the receive port. Note that</span></span><br><span class="line"><span class="comment"> * we allocate one entry and schedule it. Your design would be</span></span><br><span class="line"><span class="comment"> * faster if you do batch processing/transmission */</span></span><br><span class="line"></span><br><span class="line">ret = xsk_ring_prod__reserve(&amp;xsk-&gt;tx, <span class="number">1</span>, &amp;tx_idx);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">/* No more transmit slots, drop the packet */</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">xsk_ring_prod__tx_desc(&amp;xsk-&gt;tx, tx_idx)-&gt;addr = addr;</span><br><span class="line">xsk_ring_prod__tx_desc(&amp;xsk-&gt;tx, tx_idx)-&gt;len = len;</span><br><span class="line">xsk_ring_prod__submit(&amp;xsk-&gt;tx, <span class="number">1</span>);</span><br><span class="line">xsk-&gt;outstanding_tx++;</span><br><span class="line"></span><br><span class="line">xsk-&gt;stats.tx_bytes += len;</span><br><span class="line">xsk-&gt;stats.tx_packets++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><p>完整代码：</p><p>在用户态输出xdp包数据，运行结果：</p><p><img src="https://github.com/muchengl/pic_storage/blob/main/uPic/%E6%88%AA%E5%B1%8F2023-02-25%2021.36.18.png?raw=true" alt="截屏2023-02-25 21.36.18"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>lc1792 Maximum Average Pass Ratio</title>
      <link href="/2023/02/19/lc1792-Maximum-Average-Pass-Ratio/"/>
      <url>/2023/02/19/lc1792-Maximum-Average-Pass-Ratio/</url>
      
        <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>There is a school that has classes of students and each class will be having a final exam. You are given a 2D integer array classes, where classes[i] = [passi, totali]. You know beforehand that in the ith class, there are totali total students, but only passi number of students will pass the exam.</p><p>You are also given an integer extraStudents. There are another extraStudents brilliant students that are guaranteed to pass the exam of any class they are assigned to. You want to assign each of the extraStudents students to a class in a way that maximizes the average pass ratio across all the classes.</p><p>The pass ratio of a class is equal to the number of students of the class that will pass the exam divided by the total number of students of the class. The average pass ratio is the sum of pass ratios of all the classes divided by the number of the classes.</p><p>Return the maximum possible average pass ratio after assigning the extraStudents students. Answers within 10-5 of the actual answer will be accepted.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: classes = [[1,2],[3,5],[2,2]], extraStudents = 2</span><br><span class="line">Output: 0.78333</span><br><span class="line">Explanation: You can assign the two extra students to the first class. The average pass ratio will be equal to (3/4 + 3/5 + 2/2) / 3 = 0.78333.</span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line">Input: classes = [[2,4],[3,9],[4,5],[2,10]], extraStudents = 4</span><br><span class="line">Output: 0.53485</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public double maxAverageRatio(int[][] classes, int extraStudents) &#123;</span><br><span class="line"></span><br><span class="line">        // So this is a two-dimensional array</span><br><span class="line">        PriorityQueue&lt;int[]&gt; queue = new PriorityQueue&lt;int[]&gt;(</span><br><span class="line">         (a, b) -&gt; &#123;</span><br><span class="line">            long val1 = (long) (b[1] + 1) * b[1] * (a[1] - a[0]);</span><br><span class="line">            long val2 = (long) (a[1] + 1) * a[1] * (b[1] - b[0]);</span><br><span class="line">            if (val1 == val2) &#123;</span><br><span class="line">                return 0;</span><br><span class="line">            &#125;</span><br><span class="line">            return val1 &lt; val2 ? 1 : -1;</span><br><span class="line">        &#125;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        for(int i=0;i&lt;classes.length;i++)&#123;</span><br><span class="line">            queue.add(classes[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // while(!queue.isEmpty())&#123;</span><br><span class="line">        //     int[] item=queue.poll();</span><br><span class="line">        //     System.out.println(item[0]+&quot; &quot;+item[1]);</span><br><span class="line">        // &#125;</span><br><span class="line"></span><br><span class="line">        for(int i=0;i&lt;extraStudents;i++)&#123;</span><br><span class="line">            int[] item=queue.poll();</span><br><span class="line">            item[0]++;</span><br><span class="line">            item[1]++;</span><br><span class="line">            queue.add(item);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        double ans=0;</span><br><span class="line">        while(!queue.isEmpty())&#123;</span><br><span class="line">            int[] item=queue.poll();</span><br><span class="line">            ans+=((double)item[0])/((double)item[1]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        return ans/classes.length;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// dp[i][j] The max pass ratio for first i class,first j extra student</span><br><span class="line">// dp[i][j]=MAX&#123; dp[i-1][j-k]*(i-1)+(classes[i][0]+k)/(classes[i][1]+k)&#125;</span><br><span class="line">// Time complexity：O(l * extraStudents^2)</span><br><span class="line">// This algorithm seems too complicated</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// So Use a greedy idea.</span><br><span class="line">// I define a priority queue</span><br><span class="line">// And the queue storage the classes and sort them by pass ratio from small to big.</span><br><span class="line"></span><br><span class="line">// I keep pulling classes from the head of the queue</span><br><span class="line">// Adding a extra student to this class and push this class back to queue.</span><br><span class="line"></span><br><span class="line">// When all extra student were used, the average pass retio has been maximized</span><br><span class="line">// the time complexity is o(log(l)*extraStudentNum)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>lc1237  Find Positive Integer Solution for a Given Equation</title>
      <link href="/2023/02/18/lc1237-Find-Positive-Integer-Solution-for-a-Given-Equation/"/>
      <url>/2023/02/18/lc1237-Find-Positive-Integer-Solution-for-a-Given-Equation/</url>
      
        <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Given a callable function f(x, y) with a hidden formula and a value z, reverse engineer the formula and return all positive integer pairs x and y where f(x,y) == z. You may return the pairs in any order.</p><p>While the exact formula is hidden, the function is monotonically increasing, i.e.:</p><p>f(x, y) &lt; f(x + 1, y)<br>f(x, y) &lt; f(x, y + 1)<br>The function interface is defined like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">interface CustomFunction &#123;</span><br><span class="line">public:</span><br><span class="line">  // Returns some positive integer f(x, y) for two positive integers x and y based on a formula.</span><br><span class="line">  int f(int x, int y);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>We will judge your solution as follows:</p><p>The judge has a list of 9 hidden implementations of CustomFunction, along with a way to generate an answer key of all valid pairs for a specific z.<br>The judge will receive two inputs: a function_id (to determine which implementation to test your code with), and the target z.<br>The judge will call your findSolution and compare your results with the answer key.<br>If your results match the answer key, your solution will be Accepted.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: function_id = 1, z = 5</span><br><span class="line">Output: [[1,4],[2,3],[3,2],[4,1]]</span><br><span class="line">Explanation: The hidden formula for function_id = 1 is f(x, y) = x + y.</span><br><span class="line">The following positive integer values of x and y make f(x, y) equal to 5:</span><br><span class="line">x=1, y=4 -&gt; f(1, 4) = 1 + 4 = 5.</span><br><span class="line">x=2, y=3 -&gt; f(2, 3) = 2 + 3 = 5.</span><br><span class="line">x=3, y=2 -&gt; f(3, 2) = 3 + 2 = 5.</span><br><span class="line">x=4, y=1 -&gt; f(4, 1) = 4 + 1 = 5.</span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line">Input: function_id = 2, z = 5</span><br><span class="line">Output: [[1,5],[5,1]]</span><br><span class="line">Explanation: The hidden formula for function_id = 2 is f(x, y) = x * y.</span><br><span class="line">The following positive integer values of x and y make f(x, y) equal to 5:</span><br><span class="line">x=1, y=5 -&gt; f(1, 5) = 1 * 5 = 5.</span><br><span class="line">x=5, y=1 -&gt; f(5, 1) = 5 * 1 = 5.</span><br></pre></td></tr></table></figure><h2 id="Solution-01"><a href="#Solution-01" class="headerlink" title="Solution 01"></a>Solution 01</h2><p>So, can i call the funtion f like this?<br>customfunction.f(x,y);</p><p>Ok, the z ranges from 1 to 100. And x and y range from 1 to 1000.<br>So. That’s not a huge amount of data.</p><p>The easy idea it to try each xy pairs. I need try a million time to get all pairs. </p><p>Considering that  f is a incresing function for both x and y. I think i can use the dichotomy to find pairs. The time complexity of this solution is O(x log(y)); x times log y.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">findSolution</span><span class="params">(CustomFunction customfunction, <span class="type">int</span> z)</span> &#123;</span><br><span class="line">        <span class="comment">// customfunction.f(x,y);</span></span><br><span class="line">        <span class="comment">// z ranges from 1 to 100</span></span><br><span class="line">        <span class="comment">// 1 &lt;= x, y &lt;= 1000</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// the easy idea is try each x and y to get all pairs.</span></span><br><span class="line">        <span class="comment">// I only need to try a million times to get all answer</span></span><br><span class="line">        <span class="comment">// Let&#x27;s consider that f is an increasing function. so i can do it by multiplying</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// for each x, Use the dichotomy to find y</span></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; ans=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> x=<span class="number">1</span>;x&lt;<span class="number">1000</span>;x++)&#123; <span class="comment">// trying all possible x</span></span><br><span class="line">            <span class="type">int</span> l=<span class="number">1</span>,r=<span class="number">1000</span>;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;=r)&#123; <span class="comment">// for each x, using dichotomy to find the target y.</span></span><br><span class="line">                <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span>(customfunction.f(x,mid)==z)&#123;</span><br><span class="line">                    List&lt;Integer&gt; item=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                    item.add(x);</span><br><span class="line">                    item.add(mid);</span><br><span class="line">                    ans.add(item);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(customfunction.f(x,mid)&gt;z) r=mid-<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="solution-02"><a href="#solution-02" class="headerlink" title="solution 02"></a>solution 02</h2><p>// x=500 y=100;  f’s return value is  z.<br>// And than, x goes up to 501.<br>// x=501 y!=100-1000<br>// Beacuse function f is increasing. So y can’t be a bigger number than 100.<br>// Based on this idea, i can reduce the time complexity to O(x+y)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">findSolution</span><span class="params">(CustomFunction customfunction, <span class="type">int</span> z)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        <span class="type">int</span> y=<span class="number">1000</span>; <span class="comment">// I&#x27;m defining y here as the maximum 1000</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>; x &lt;= <span class="number">1000</span> &amp;&amp; y &gt;= <span class="number">1</span>; x++) &#123; <span class="comment">// trying each x, and keep y bigger than 1</span></span><br><span class="line">            <span class="keyword">while</span> (y &gt;= <span class="number">1</span> &amp;&amp; customfunction.f(x, y) &gt; z) &#123;  <span class="comment">// Keep decreasing y to find the pair. In order to avoid pair nonexistence, y keeps decreasing to 1. I use the Judgment condition f(x,y)&gt;z</span></span><br><span class="line">                y--;</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="comment">// At this time, judge whether f(x,y) equals z;</span></span><br><span class="line">          <span class="comment">// if it&#x27;s true,add this pair the ans list.</span></span><br><span class="line">            <span class="keyword">if</span> (y &gt;= <span class="number">1</span> &amp;&amp; customfunction.f(x, y) == z) &#123;</span><br><span class="line">                List&lt;Integer&gt; pair = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">                pair.add(x);</span><br><span class="line">                pair.add(y);</span><br><span class="line">                res.add(pair);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>lc1139 Largest 1-Bordered Square</title>
      <link href="/2023/02/17/lc1139-Largest-1-Bordered-Square/"/>
      <url>/2023/02/17/lc1139-Largest-1-Bordered-Square/</url>
      
        <content type="html"><![CDATA[<p>Given a 2D grid of 0s and 1s, return the number of elements in the largest square subgrid that has all 1s on its border, or 0 if such a subgrid doesn’t exist in the grid.</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: grid = [[1,1,1],[1,0,1],[1,1,1]]</span><br><span class="line">Output: 9</span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line">Input: grid = [[1,1,0,0]]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><p>The easy idea is search from each point, and try each possible length of edge. But this idea need count the number of ones over and over again. So i think i can ：</p><ol><li><p>storage the number of consecutive ones in the direction of vertical and horizontal for each points.</p></li><li><p>Than i need to search from each point. At this time, I can judge whether a square can be formed by storaged date.</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">i use a array con[i][j][0] and con[i][j][1].</span><br><span class="line"></span><br><span class="line">con[i][j][0] 1 -</span><br><span class="line">con[i][j][1] 1 |</span><br><span class="line"></span><br><span class="line">*---*</span><br><span class="line">|   |</span><br><span class="line">|   |</span><br><span class="line">|   |</span><br><span class="line">*---P</span><br><span class="line">try 3</span><br><span class="line">if con[i-2][j][0]&gt;=3 &amp;&amp; con[i][j-2][1]&gt;=3 </span><br><span class="line">the square can be formed；</span><br><span class="line">Update the area of the largest rectangle；</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int largest1BorderedSquare(int[][] grid) &#123;</span><br><span class="line"></span><br><span class="line">        // con[i][j][0] number of 1 in the direction of y</span><br><span class="line">        // The number of consecutive ones in the vertical direction</span><br><span class="line">        // con[i][j][1] number of 1 in the direction of x</span><br><span class="line">        // The number of consecutive ones in the horizontal direction</span><br><span class="line"></span><br><span class="line">        int m=grid.length,n=grid[0].length;</span><br><span class="line"></span><br><span class="line">        int[][][] con=new int[m][n][2];</span><br><span class="line"></span><br><span class="line">        for(int i=0;i&lt;m;i++)&#123;</span><br><span class="line">            for(int j=0;j&lt;n;j++)&#123;</span><br><span class="line">                if(grid[i][j]==1)&#123;</span><br><span class="line">                    if(i&gt;0) con[i][j][1]=con[i-1][j][1]+1;</span><br><span class="line">                    else con[i][j][1]=1;</span><br><span class="line">                    if(j&gt;0) con[i][j][0]=con[i][j-1][0]+1;</span><br><span class="line">                    else con[i][j][0]=1;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //System.out.println(con[2][2][0]+&quot; &quot;+con[2][2][1]);</span><br><span class="line">        //System.out.println(con[2][0][0]+&quot; &quot;+con[2][0][1]);</span><br><span class="line">        //System.out.println(con[0][2][0]+&quot; &quot;+con[0][2][1]);</span><br><span class="line"></span><br><span class="line">        int ans=0;</span><br><span class="line">        for(int i=0;i&lt;m;i++)&#123;</span><br><span class="line">            for(int j=0;j&lt;n;j++)&#123;</span><br><span class="line">                // I need to go through the length of the edge from the largest to the smallest</span><br><span class="line">                for(int k=Math.min(con[i][j][0],con[i][j][1]);k&gt;0;k--)&#123;</span><br><span class="line">                    </span><br><span class="line">                    // *---k</span><br><span class="line">                    // ｜   |</span><br><span class="line">                    // ｜.  |</span><br><span class="line">                    // ｜.  |</span><br><span class="line">                    // k---p</span><br><span class="line">                    if(con[i-k+1][j][0]&gt;=k &amp;&amp; con[i][j-k+1][1]&gt;=k)&#123;</span><br><span class="line">                        ans=Math.max(ans,k*k);</span><br><span class="line">                        //System.out.println(i+&quot; &quot;+j+&quot; &quot;+k+&quot; &quot;+);</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return ans;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>lc 1234 - Sliding window</title>
      <link href="/2023/02/13/lc-1234-Sliding-window/"/>
      <url>/2023/02/13/lc-1234-Sliding-window/</url>
      
        <content type="html"><![CDATA[<h2 id="Puzzle"><a href="#Puzzle" class="headerlink" title="Puzzle"></a>Puzzle</h2><p>You are given a string s of length n containing only four kinds of characters: ‘Q’, ‘W’, ‘E’, and ‘R’.</p><p>A string is said to be balanced if each of its characters appears n / 4 times where n is the length of the string.</p><p>Return the minimum length of the substring that can be replaced with any other string of the same length to make s balanced. If s is already balanced, return 0.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;QWER&quot;</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: s is already balanced.</span><br><span class="line"></span><br><span class="line">Input: s = &quot;QQWE&quot;</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: We need to replace a &#x27;Q&#x27; to &#x27;R&#x27;, so that &quot;RQWE&quot; (or &quot;QRWE&quot;) is balanced.</span><br><span class="line"></span><br><span class="line">Input: s = &quot;QQQW&quot;</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: We can replace the first &quot;QQ&quot; to &quot;ER&quot;. </span><br></pre></td></tr></table></figure><h2 id="My-Answer"><a href="#My-Answer" class="headerlink" title="My Answer"></a>My Answer</h2><h3 id="Idea1-fault"><a href="#Idea1-fault" class="headerlink" title="Idea1 (fault)"></a>Idea1 (fault)</h3><p>// For each string, I can replace the entire string to solve the problem<br>// But that doesn’t satisfy the problem that i need to find the minimum Length of the subString<br>// Assume the following：<br>// xxxx 【sub string】 xxxx<br>// For the strings on both sides, the balance has been reached</p><p>// so i only need to  rplace the 【sub string】, the section.<br>// it no need for me to know how to replace it ,or which kinds of characters in the 【sub string】<br>// So now the question becomes, how do you find a【sub string】which can keep two sides strings balanced. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// dp[i][j] = true / false</span><br><span class="line">// dp[0][n-1] =true</span><br><span class="line">// dp[i][j]= true (  dp[i-2][j+2]==true &amp;&amp; s[i-1]+s[i-2]+s[j+1]+s[j+2]==Q+W+E+R )</span><br><span class="line">// dp[i][j]= false </span><br></pre></td></tr></table></figure><p>However, the time complexity of this answer is o(n^2). And this state transition equation doesn’t work.</p><h2 id="Idea2"><a href="#Idea2" class="headerlink" title="Idea2"></a>Idea2</h2><p>Actually, it is no need to keep both side of sub string to be balanced. To keep the string balanced, the numer of each character in the string should equal to string’s length/4. So , what i need to do is keep the num of each character in both side of the sub string less than string’s length divided by 4.  As long as it’s less than a quarter, I can complete the missing part in the sub string.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span>[] con,<span class="type">int</span> qtr)</span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(con[<span class="string">&#x27;Q&#x27;</span>-<span class="string">&#x27;A&#x27;</span>]&lt;=qtr &amp;&amp; con[<span class="string">&#x27;W&#x27;</span>-<span class="string">&#x27;A&#x27;</span>]&lt;=qtr &amp;&amp; con[<span class="string">&#x27;E&#x27;</span>-<span class="string">&#x27;A&#x27;</span>]&lt;=qtr &amp;&amp; con[<span class="string">&#x27;R&#x27;</span>-<span class="string">&#x27;A&#x27;</span>]&lt;=qtr) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>To find the minimum sub string, i can maintain a array to storage each character’s number. Usering to points to r,l to form a sliding window. The point r keep growing until the check return true. And than, point l begins to grow until the check return false. When l is growing, constantly update the size of the sliding window. The answer of this question is minimun window’s size.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">balancedString</span><span class="params">(String s)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] con=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>]; <span class="comment">// QWER</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            con[s.charAt(i)-<span class="string">&#x27;A&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ans=s.length();</span><br><span class="line">        <span class="type">int</span> qtr=s.length()/<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> r=<span class="number">0</span>,l=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//if(check(con,qtr)) return 0;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(r=<span class="number">0</span>;r&lt;s.length();r++)&#123;</span><br><span class="line">            con[s.charAt(r)-<span class="string">&#x27;A&#x27;</span>]--;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(l&lt;s.length() &amp;&amp; check(con,qtr))&#123;</span><br><span class="line">            </span><br><span class="line">                ans=Math.min(ans,r-l+<span class="number">1</span>);</span><br><span class="line">                <span class="comment">//System.out.println(r+&quot; &quot;+l);</span></span><br><span class="line">                l++;</span><br><span class="line">                con[s.charAt(l-<span class="number">1</span>)-<span class="string">&#x27;A&#x27;</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>libbpf spinglock &amp; map</title>
      <link href="/2023/02/10/libbpf-01/"/>
      <url>/2023/02/10/libbpf-01/</url>
      
        <content type="html"><![CDATA[<h2 id="minimal"><a href="#minimal" class="headerlink" title="minimal"></a>minimal</h2><ol><li>bpf程序，这一代码会被加载进bpf虚拟机，由事件触发执行。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/bpf.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bpf/bpf_helpers.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> LICENSE[] SEC(<span class="string">&quot;license&quot;</span>) = <span class="string">&quot;Dual BSD/GPL&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> my_pid = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义 ELF section</span></span><br><span class="line">SEC(<span class="string">&quot;tp/syscalls/sys_enter_write&quot;</span>)</span><br><span class="line"><span class="type">int</span> <span class="title function_">handle_tp</span><span class="params">(<span class="type">void</span> *ctx)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// globle变量，读取pid</span></span><br><span class="line"><span class="type">int</span> pid = bpf_get_current_pid_tgid() &gt;&gt; <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pid != my_pid)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 向pipe发送字符串</span></span><br><span class="line">bpf_printk(<span class="string">&quot;BPF triggered from PID %d.\n&quot;</span>, pid);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>用户空间代码</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/resource.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bpf/libbpf.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;minimal.skel.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">libbpf_print_fn</span><span class="params">(<span class="keyword">enum</span> libbpf_print_level level, <span class="type">const</span> <span class="type">char</span> *format, va_list args)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">vfprintf</span>(<span class="built_in">stderr</span>, format, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">minimal_bpf</span> *<span class="title">skel</span>;</span></span><br><span class="line"><span class="type">int</span> err;</span><br><span class="line"></span><br><span class="line">libbpf_set_strict_mode(LIBBPF_STRICT_ALL);</span><br><span class="line"><span class="comment">/* Set up libbpf errors and debug info callback */</span></span><br><span class="line">libbpf_set_print(libbpf_print_fn);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Open BPF application */</span></span><br><span class="line">skel = minimal_bpf__open();</span><br><span class="line"><span class="keyword">if</span> (!skel) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Failed to open BPF skeleton\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ensure BPF program only handles write() syscalls from our process */</span></span><br><span class="line">skel-&gt;bss-&gt;my_pid = getpid();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Load &amp; verify BPF programs */</span></span><br><span class="line">err = minimal_bpf__load(skel);</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Failed to load and verify BPF skeleton\n&quot;</span>);</span><br><span class="line"><span class="keyword">goto</span> cleanup;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Attach tracepoint handler */</span></span><br><span class="line">err = minimal_bpf__attach(skel);</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Failed to attach BPF skeleton\n&quot;</span>);</span><br><span class="line"><span class="keyword">goto</span> cleanup;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Successfully started! Please run `sudo cat /sys/kernel/debug/tracing/trace_pipe` &quot;</span></span><br><span class="line">       <span class="string">&quot;to see output of the BPF programs.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line"><span class="comment">/* 触发bpf程序，用于测试 */</span></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;.&quot;</span>);</span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cleanup:</span><br><span class="line">minimal_bpf__destroy(skel);</span><br><span class="line"><span class="keyword">return</span> -err;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="bpf-Spinlocks"><a href="#bpf-Spinlocks" class="headerlink" title="bpf Spinlocks"></a>bpf Spinlocks</h2><p><a href="https://libbpf.readthedocs.io/en/latest/program_types.html">https://libbpf.readthedocs.io/en/latest/program_types.html</a></p><p><a href="https://libbpf.readthedocs.io/en/latest/program_types.html">https://libbpf.readthedocs.io/en/latest/program_types.html</a></p><p>spinglock目前无法用于tracking和sccket filter相关ELF</p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-02-10%2018.15.29.png" alt="截屏2023-02-10 18.15.29"></p><p><a href="https://www.edony.ink/deepinsight-of-ebpf-map/">https://www.edony.ink/deepinsight-of-ebpf-map/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Serverless服务快速启动方案</title>
      <link href="/2023/02/06/MITOSIS-by-WASM-ebpf-in-Faasm/"/>
      <url>/2023/02/06/MITOSIS-by-WASM-ebpf-in-Faasm/</url>
      
        <content type="html"><![CDATA[<p>Version：2023-3-5</p><h2 id="1-问题综述"><a href="#1-问题综述" class="headerlink" title="1. 问题综述"></a>1. 问题综述</h2><p>现尝试使用WASM、eBPF等技术优化Serverless服务。这一优化可以针对：实例启动速度、实例与外界交互能力、实例调度等方面。</p><p>逻辑上来说，一个Serverless实例的运行，必然经过以下几个步骤：<br>    1.获取待运行负载（负载可以是:WebAssembly、java字节码、go字节码等，是待运行的核心逻辑）<br>    2.实例加载负载，进行启动<br>    3.实例接受待处理数据，进行运算，并返回结果<br>    4.运行结束，实例销毁</p><p><strong>针对步骤1</strong>，获取负载的常规方式是从对象存储服务下载负载，这一方法显然较慢。<strong>AWS Lambda</strong>对此提出了”预置并发”，这一服务可以在用户的虚拟子网中维持一个活跃的Lambda实例，从而避免冷启动。 <strong>MITOSIS</strong>某种意义上可以说是对”预置并发”进行了极致的优化，即使用RDMA从一个活跃的实例——Seed进行远程克隆，并使用COW渐进式的获取内存数据。<strong>Faasm</strong>针对此问题，则引入了一个KV数据库，存储各个server上实例的运行情况，从而实现了在已存在目标实例的server上处理任务，尽可能避免冷启动。这一优化是一种调度策略上的优化。</p><p>概括来说，步骤一的优化有三个方面：<br>    1.将实例负载存放比较“近”的地方，如保留一个活跃实例<br>    2.使用尽可能快速的方式获取负载，如RDMA<br>    3.避免冷启动，进行调度优化</p><p><strong>针对步骤2</strong>，可以尝试优化启动速度本身，常见方式有优化编译产物、减小内存配置等，目前我们尝试采用的优化策略是使用WASM。（Faasm针对此步骤，使用了直接通过WASM runtime镜像启动的方法，优化了WASM容器启动的速度）</p><p><strong>针对步骤3</strong>，原生WASM需使用WASI与系统交互，这一方法可能性能较差/适用范围较小。因此尝试采用WASM-eBPF工具，将部分运算下沉到eBPF虚拟机进行，从而获得serverless服务与外界更好的交互能力。</p><p>注：粗略估计，实际使用中Serverless服务绝大多数的对外交互都是网络交互，主要是读写数据。</p><p><strong>针对步骤4</strong>，暂无优化措施</p><h2 id="2-加速Serverless启动的方案（运行状态恢复的三种路线）"><a href="#2-加速Serverless启动的方案（运行状态恢复的三种路线）" class="headerlink" title="2. 加速Serverless启动的方案（运行状态恢复的三种路线）"></a>2. 加速Serverless启动的方案（运行状态恢复的三种路线）</h2><p>由于原生MITOSIS对RDMA硬件有硬性要求，且需要修改内核，通用性相对较低。因此尝试利用WASM+eBPF+XDP等，实现一种更友好的Serverless快速启动策略，以下将这一策略称为MITOSIS-eBPF。（此处的mitosis取英文本身意思：有丝分裂，这是由于下列方案思路依然与原生mitosis类似，是从一个活跃实例快速分裂出大量子实例）</p><p>目前实现MITOSIS-eBPF有三种思路： </p><h3 id="1）在内核恢复进程"><a href="#1）在内核恢复进程" class="headerlink" title="1）在内核恢复进程"></a>1）在内核恢复进程</h3><p>在内核恢复进程状态，这一思路与原生MITOSIS一致，需实现以下几点：</p><ol><li>对“被Fork进程”进行Metadata快照，并将此快照传递给“子进程”</li><li>子进程需根据pte探知该Page是否在本地，若不在本地，则需要进行远程页获取</li><li>MITOSIS-eBPF需要能够读取指定进程的数据，从而通过rpc/XQUIC等方式传递给子进程</li></ol><p>其中步骤二，原生MITOSIS的实现方式是利用pte中未被使用的高位作为标记，从而判断该page是否在本地。这一操作涉及内核修改，似乎无法通过eBPF实现，因此“在内核恢复进程”这一方案无法避免修改内核。</p><p>此外，XDP本身不具有完整的协议栈，无法保证数据传输的可靠。基于AF_XDP的成熟数据传输工具XQUIC，实现的是一个纯用户态的协议栈，因此似乎不适合对内核的Page进行传输。</p><h3 id="2）在用户态WASM虚拟机中恢复进程（无COW）"><a href="#2）在用户态WASM虚拟机中恢复进程（无COW）" class="headerlink" title="2）在用户态WASM虚拟机中恢复进程（无COW）"></a>2）在用户态WASM虚拟机中恢复进程（无COW）</h3><p>以Faasm为例，Faasm会将容器快照保存在AWS S3中，收到相应请求时进行下载，并根据快照进行运行状态恢复。为了解决S3读取速度较慢的问题，可以在Faasm中添加一个类似MITOSIS的特性：即任意两个Faasm实例之间，可以进行容器状态拷贝。具体细节如下：</p><ol><li>当一个Faasm容器收到了“拷贝请求”后，对自身的容器状态进行快照。之后使用基于xdp (XQUIC)的数据传输方式将快照发送至发起“拷贝请求”的实例</li><li>Faasm被拷贝后，将快照缓存在内存中，下次被拷贝就不需要再次生成快照。同时之后其他Faasm实例都通过该fassm进行快照获取(可能需要在kv数据库中加入记录)。</li></ol><p>在加速冷启动方面，Faasm本身有使用kv数据库寻找已存在目标负载的实例的机制。这一机制存在一个问题，若某一请求大量存在，则将会有大量wasm实例在同一server上启动。此时，“远程状态恢复”就可以帮助实现快速跨机器启动实例，或可以提升faasm的性能。</p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-03-01%2020.41.43.png" alt="截屏2023-03-01 20.41.43"></p><p>这一方案仅仅针对Faasm或其他serverless平台进行拓展，无法形成通用解决方案，属于一个工程性问题。</p><h3 id="3）在用户态WASM虚拟机中恢复进程（有COW）"><a href="#3）在用户态WASM虚拟机中恢复进程（有COW）" class="headerlink" title="3）在用户态WASM虚拟机中恢复进程（有COW）"></a>3）在用户态WASM虚拟机中恢复进程（有COW）</h3><p><strong>进一步研究</strong>：<a href="https://muchengl.github.io/2023/03/09/User-space-page-fault-handling/">https://muchengl.github.io/2023/03/09/User-space-page-fault-handling/</a></p><p>针对Faasm这一Serverless平台，Faasm中的Function实际运行在WASM虚拟机中。因此按照以下步骤进行远程Fork：</p><ol><li>子进程的WASM虚拟机初始化</li><li>利用XQUIC，从“被Fork进程”获取“元数据”，在WASM虚拟机中进行状态恢复</li><li>若子进程的WASM虚拟机遇到“缺页”，则利用XQUIC从进行远程页获取</li></ol><p>这一方案的优势：</p><ol><li>Faasm使用了Photo Faaslet快照+COW进行冷启动加速，因此“在WASM虚拟机中运用COW恢复进程状态”的可行性已知</li><li>和MITOSIS思路完全一致，但全部在用户态完成，避免修改内核</li></ol><p>这一方案的缺点：</p><ol><li><p>这一方案需要改WASM runtime的源代码，不是通用解决方案。</p></li><li><p>由于用户态COW过程跨越了较多层，若Function涉及较多的远程页获取，可能会导致程序运行较慢，甚至有可能慢于原生Faasm的冷启动。</p></li></ol><h2 id="3-在WASM虚拟机中COW恢复进程的可行性论证"><a href="#3-在WASM虚拟机中COW恢复进程的可行性论证" class="headerlink" title="3. 在WASM虚拟机中COW恢复进程的可行性论证"></a>3. 在WASM虚拟机中COW恢复进程的可行性论证</h2><h3 id="1-Faasm怎么实现cow的，以及如何进行快照，并在WAVM里恢复运行状态"><a href="#1-Faasm怎么实现cow的，以及如何进行快照，并在WAVM里恢复运行状态" class="headerlink" title="1.Faasm怎么实现cow的，以及如何进行快照，并在WAVM里恢复运行状态"></a>1.Faasm怎么实现cow的，以及如何进行快照，并在WAVM里恢复运行状态</h3><p>Faasm用了WARM里的AOT接口进行快照生成：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">aot_comp_context_t</span> <span class="title function_">aot_create_comp_context</span><span class="params">(<span class="type">aot_comp_data_t</span> comp_data, <span class="type">aot_comp_option_t</span> option)</span>;</span><br></pre></td></tr></table></figure><p>WAMR源代码分析：</p><p><em><strong>WAMR runtime(WAMR)的内存结构是分页的，且页是在内存上连续的片段，有明确的起始地址和Page size（数组），因此也许可以比较方便的进行远程页拷贝，需要改AOT的代码。</strong></em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Compiler context</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">AOTCompContext</span> &#123;</span></span><br><span class="line">    AOTCompData *comp_data;      <span class="comment">// 内存数据，是分页的</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// Many llvm config data</span></span><br><span class="line">...</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/* Function contexts */</span></span><br><span class="line">    AOTFuncContext **func_ctxes; <span class="comment">// 函数context</span></span><br><span class="line">    uint32 func_ctx_count;       <span class="comment">// 程序计数器</span></span><br><span class="line">    <span class="type">char</span> **custom_sections_wp;</span><br><span class="line">    uint32 custom_sections_count;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3rd-party toolchains */</span></span><br><span class="line">    <span class="comment">/* External llc compiler, if specified, wamrc will emit the llvm-ir file and</span></span><br><span class="line"><span class="comment">     * invoke the llc compiler to generate object file.</span></span><br><span class="line"><span class="comment">     * This can be used when we want to benefit from the optimization of other</span></span><br><span class="line"><span class="comment">     * LLVM based toolchains */</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *external_llc_compiler;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *llc_compiler_flags;</span><br><span class="line">    <span class="comment">/* External asm compiler, if specified, wamrc will emit the text-based</span></span><br><span class="line"><span class="comment">     * assembly file (.s) and invoke the llc compiler to generate object file.</span></span><br><span class="line"><span class="comment">     * This will be useful when the upstream LLVM doesn&#x27;t support to emit object</span></span><br><span class="line"><span class="comment">     * file for some architecture (such as arc) */</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *external_asm_compiler;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *asm_compiler_flags;</span><br><span class="line">&#125; AOTCompContext;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">AOTCompData</span> &#123;</span></span><br><span class="line">    <span class="comment">/* Import memories */</span></span><br><span class="line">    uint32 import_memory_count;</span><br><span class="line">    AOTImportMemory *import_memories;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Memories */</span></span><br><span class="line">    uint32 memory_count;</span><br><span class="line">    AOTMemory *memories;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  typedef struct AOTMemory &#123;</span></span><br><span class="line"><span class="comment">    uint32 memory_flags;</span></span><br><span class="line"><span class="comment">    uint32 num_bytes_per_page;</span></span><br><span class="line"><span class="comment">    uint32 mem_init_page_count;</span></span><br><span class="line"><span class="comment">    uint32 mem_max_page_count;</span></span><br><span class="line"><span class="comment">&#125; AOTMemory;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Memory init data info */</span></span><br><span class="line">    uint32 mem_init_data_count;</span><br><span class="line">    AOTMemInitData **mem_init_data_list;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Import tables */</span></span><br><span class="line">    uint32 import_table_count;</span><br><span class="line">    AOTImportTable *import_tables;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Tables */</span></span><br><span class="line">    uint32 table_count;</span><br><span class="line">    AOTTable *tables;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Table init data info */</span></span><br><span class="line">    uint32 table_init_data_count;</span><br><span class="line">    AOTTableInitData **table_init_data_list;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Import globals */</span></span><br><span class="line">    uint32 import_global_count;</span><br><span class="line">    AOTImportGlobal *import_globals;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Globals */</span></span><br><span class="line">    uint32 global_count;</span><br><span class="line">    AOTGlobal *globals;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Function types */</span></span><br><span class="line">    uint32 func_type_count;</span><br><span class="line">    AOTFuncType **func_types;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Import functions */</span></span><br><span class="line">    uint32 import_func_count;</span><br><span class="line">    AOTImportFunc *import_funcs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Functions */</span></span><br><span class="line">    uint32 func_count;</span><br><span class="line">    AOTFunc **funcs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Custom name sections */</span></span><br><span class="line">    <span class="type">const</span> uint8 *name_section_buf;</span><br><span class="line">    <span class="type">const</span> uint8 *name_section_buf_end;</span><br><span class="line">    uint8 *aot_name_section_buf;</span><br><span class="line">    uint32 aot_name_section_size;</span><br><span class="line"></span><br><span class="line">    uint32 global_data_size;</span><br><span class="line"></span><br><span class="line">    uint32 start_func_index;</span><br><span class="line">    uint32 malloc_func_index;</span><br><span class="line">    uint32 free_func_index;</span><br><span class="line">    uint32 retain_func_index;</span><br><span class="line"></span><br><span class="line">    uint32 aux_data_end_global_index;</span><br><span class="line">    uint32 aux_data_end;</span><br><span class="line">    uint32 aux_heap_base_global_index;</span><br><span class="line">    uint32 aux_heap_base;</span><br><span class="line">    uint32 aux_stack_top_global_index;</span><br><span class="line">    uint32 aux_stack_bottom;</span><br><span class="line">    uint32 aux_stack_size;</span><br><span class="line"></span><br><span class="line">    WASMModule *wasm_module;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> WASM_ENABLE_DEBUG_AOT != 0</span></span><br><span class="line">    <span class="type">dwar_extractor_handle_t</span> extractor;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125; AOTCompData;</span><br></pre></td></tr></table></figure><h3 id="2-ebpf高速网络通信方案"><a href="#2-ebpf高速网络通信方案" class="headerlink" title="2.ebpf高速网络通信方案"></a>2.ebpf高速网络通信方案</h3><p>XQUIC</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Faasm / WASM serverless</title>
      <link href="/2023/02/05/Faasm-WASM-serverless/"/>
      <url>/2023/02/05/Faasm-WASM-serverless/</url>
      
        <content type="html"><![CDATA[<p>论文地址：<a href="https://arxiv.org/abs/2002.09344">https://arxiv.org/abs/2002.09344</a></p><h2 id="Faaslet-Faasm总结"><a href="#Faaslet-Faasm总结" class="headerlink" title="Faaslet/Faasm总结"></a>Faaslet/Faasm总结</h2><h3 id="1）Faaslet"><a href="#1）Faaslet" class="headerlink" title="1）Faaslet"></a>1）Faaslet</h3><p>Faaslet是一种software-based isolation。这是一种用于高性能无服务计算的隔离抽象。Faaslet使用WebAssembly提供的软件故障隔离（SFI，<em>software-fault isolation</em>, provided by <em>WebAssembly</em>）来隔离已执行函数的内存，并允许同一地址空间的函数之间共享内存区域。</p><p>Faaslet具有以下几个特性：</p><ol><li><a href="#is">隔离</a>：每个fasslet由一个thread进行执行，利用CGroup进行约束</li><li>为实现高效的Function间通信，1）提供本地<a href="#memy">共享内存机制</a>（由WASM的特性保证内存安全，<a href="https://zhuanlan.zhihu.com/p/386849387">WASM内存模型</a>）。2）同时提供由distributed key-value store (KVS，Redis)支持的全局状态共享</li><li>为了Function可以<strong>安全</strong>且<strong>高效</strong>的进行功能调用，实现了<a href="#inter">Host interface</a> API（类<a href="https://zh.wikipedia.org/wiki/%E5%8F%AF%E7%A7%BB%E6%A4%8D%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%8E%A5%E5%8F%A3">POSIX</a>的子集，基于WASI），function可以调用API以使用各种系统功能（相当于在函数和os之间加了一层抽象层，实现了低水平的虚拟化）。使用message bus与父进程通信，接收函数调用、共享、调用和等待其他函数等信息</li><li>快速启动，Faasm使用存储在对象存储中的Proto-Faaslet快照优化冷启动时间 。</li></ol><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-02-06%2012.58.20.png" alt="截屏2023-02-06 12.58.20"></p><h3 id="2）Faasm"><a href="#2）Faasm" class="headerlink" title="2）Faasm"></a>2）Faasm</h3><p>Faasm是一个负责调度Faaslet的runtime。Faasm可以管理多个Faaslet。Faasm通过Faaslet的状态共享机制进行调度。</p><p>如下图，ABC三个函数调用事件，Faasm instance1具有实例A，因此直接执行。Faasm instance1 缺少BC实例，为了避免冷启动，则将BC任务共享到Faasm instance2.</p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-02-06%2014.19.51.png" alt="截屏2023-02-06 14.19.51"></p><p>此外，Faasm使用LLVM编译function，用WAVM进行执行。</p><blockquote><p>编译过程：<br>(1) 用户调用Faaslet工具链将函数编译成WebAssembly二进制文件，链接到Faaslet host interface的特定语言声明;<br>(2) 生成一个由WebAssembly创建的“object file with machine code”<br>(3) Host interface与machine code链接以生成Faaslet可执行文件（Faaslet executable）</p></blockquote><h2 id="如何基于WASM设计一个serverless平台"><a href="#如何基于WASM设计一个serverless平台" class="headerlink" title="如何基于WASM设计一个serverless平台"></a>如何基于WASM设计一个serverless平台</h2><p>由于WASM具有<strong>内存安全</strong>的特性，使用WASM实现轻量级的隔离，以取得较高的性能：</p><ol><li>将用户function编译成WebAssembly，采用WASM runtime（例如WAVM）对function进行<strong>执行</strong>。</li><li><strong>执行</strong>操作由“调度器”进行（Faasm），“调度器”使用一个“执行线程”进行function执行和调度，并使用CGroup对“执行线程”进行约束。</li><li>为了实现完整的serverless平台，例如提供io调用、function间状态共享，需要加入相应的API支持（Faaalets提供了相应的API——Host interface），供用户function调用。</li></ol><hr><p><em>细节部分</em>:</p><h2 id="Faaslet概述"><a href="#Faaslet概述" class="headerlink" title="Faaslet概述"></a>Faaslet概述</h2><p>Faaslet是一种software-based isolation。这是一种用于高性能无服务器计算的新的隔离抽象。Faaslet使用WebAssembly提供的软件故障隔离（SFI，<em>software-fault isolation</em> (SFI), provided by <em>WebAssembly</em>）来隔离已执行函数的内存，同时允许同一地址空间的函数之间共享内存区域。</p><p> FAASM是一个基于Faaslet的runtime，使用标准的Linux cgroups隔离其他资源，如CPU和网络。并为网络、文件系统访问和动态加载提供一个低级别的POSIX主机接口</p><blockquote><p>现在的容器/vm，启动慢，内存占用大</p></blockquote><p>无服务器计算可以通过一种新的isolation abstraction，以更好地支持数据密集型应用程序：</p><p>(i) 在函数之间，提供强的<strong>内存和资源隔离</strong>，保证安全性<br>(ii) 支持高效的<strong>状态共享</strong>。数据应该与功能共存（co-located），并直接获取，尽量减少数据运输<br>(iii) 允许在多个主机上扩展状态<br>(iv) 低内存消耗，允许在一台机器上有许多实例；<br>(v) 快速的实例化<br>(vi) 支持多种编程语言</p><p>为了实现以上特性，Faaslet具有以下特性：</p><ol><li><strong>Faasles轻量级的隔离</strong><br> Faaslet依赖于软件故障隔离（SFI），它将函数限制在对其自身内存的访问。一个与Faaslet函数，连同其库和语言运行时的依赖，被编译成WebAssembly。FAASM运行时在一个地址空间内执行多个Faaslet，每个都有一个专用线程。为了实现资源隔离，每个线程的CPU周期使用Linux cgroups进行约束，网络访问使用“<em>network namespaces</em>”和“<em>traffic shaping</em>”进行限制。</li><li><strong>faaslet 高效本地/全局状态访问</strong><br> 由于faaslet共享相同的地址空间，它们可以有效地使用本地状态访问共享内存区域。这允许数据和函数的共同定位，并避免串行化的开销。faaslet使用两层状态架构，本地层提供内存共享，全局层支持跨主机分布式访问状态。<br> Faasm运行时为Faaslet提供了一个状态管理API，可以对两层的状态进行细粒度控制。</li><li><strong>faaslet快速初始化</strong><br> 为了减少Faaslet第一次执行时的冷启动时间，Faaslet从suspended state启动<br> suspended state：FAASM预先初始化一个Faaslet，并对其内存进行快照以获得一个原始Faaslet。proto-Faaslet用于快速创建新的Faaslet实例，可以避免初始化语言运行库的时间。理论上proto - faaslet支持跨主机恢复，并且与操作系统无关。<br> （这一块类似MITOSIS，是直接使用了从内存恢复运行状态）</li><li><strong>Faaslet Host interface</strong><br> Faaslet通过POSIX-like calls与主机环境进行交互。包括网络、文件I/O、全局状态访问和库加载/链接。主机接口提供了足够的虚拟化以确保隔离，同时增加的开销可以忽略不计。</li></ol><p>FAASM runtime使用LLVM编译器工具链将应用程序转换为WebAssembly，这一方法支持用多种编程语言编写的函数。可现有的无服务器平台集成，例如Knative。</p><h2 id="Faaslet-detail-design"><a href="#Faaslet-detail-design" class="headerlink" title="Faaslet detail design"></a>Faaslet detail design</h2><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-02-06%2012.58.20.png" alt="截屏2023-02-06 12.58.20"></p><ol><li><p><a id="memy">内存设计</a>：函数被编译为WebAssembly，被放置在它自己的私有连续内存区域中。同时Faaslet也支持共享内存区域，这允许Faaslet在WebAssembly的内存安全保证的约束下访问共享的内存状态(当需要内存共享时，Faaslet扩展WASM的字节数组，但将新页面映射到公共进程内存的指定区域（mmap）。然后可以给函数一个指向字节数组新区域的指针，但所有访问都在共享区域上执行)。<br> <img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-02-06%2015.22.09.png" alt="截屏2023-02-06 15.22.09"></p></li><li><p><a id="is">隔离</a>：faaslet确保了公平的资源访问。对于CPU隔离，使用“Linux cgroups的CPU子集”。每个函数都由共享运行时进程的专用线程执行，这个线程被分配了一个cgroup。</p></li><li><p>IO接口：Faaslet通过网络命名空间、虚拟网络接口和流量整形实现安全公平的网络访问。每个Faaslet在单独的名称空间中都有自己的网络接口，使用iptables规则进行配置。为了确保共享租户之间的公平性，每个Faaslet使用tc在其虚拟网络接口上应用流量整形，从而强制执行入口和出口流量速率限制。</p></li><li><p><a id="inter">Faaslet host interface</a>：Faaslet host interface是一个virtualisation layer，提供了一系列API，以隔离函数于外界环境。这些接口基于WASI（这个设计有点类似gVisor，但是gVisor是模拟了整个内核）</p></li></ol><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-02-06%2013.15.25.png" alt="截屏2023-02-06 13.15.25"></p><ol start="5"><li>Faaslet使用message bus与父进程（Faasm）通信，接收函数调用，共享工作，调用和等待其他函数等信息。</li><li>Proto Faaslet快照包括函数的堆栈，WebAssembly规范的函数表、堆栈指针和数据。Faasm使用copy-on-write memory mapping将快照还原到新的Faaslet中。Faasm提供了一个Http end point，例如s3，以供上传快照.</li></ol><h2 id="Faaslet状态共享"><a href="#Faaslet状态共享" class="headerlink" title="Faaslet状态共享"></a>Faaslet状态共享</h2><p>Faaslet提供了两层架构的状态共享机制，这一机制可帮助实现Faasm的调度。</p><p>本地层：提供对同一主机上的状态的共享内存访问;</p><p>全局层：允许Faaslet在主机间同步状态。全局层使用distributed key-value store (KVS)实现，具体实现方式是redis。</p><p>DDOs隐藏了两层状态架构，提供了对分布式数据的透明的访问。</p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-02-06%2018.31.18.png" alt="截屏2023-02-06 18.31.18"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MITOSIS test</title>
      <link href="/2023/02/02/MITOSIS-test/"/>
      <url>/2023/02/02/MITOSIS-test/</url>
      
        <content type="html"><![CDATA[<p>服务器无root权限，需修改Kernel，因此用KVM，把device映射到KVM里。</p><h2 id="服务器物理配置"><a href="#服务器物理配置" class="headerlink" title="服务器物理配置"></a>服务器物理配置</h2><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-02-02%2020.44.46.png" alt="截屏2023-02-02 20.44.46"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ ifconfig</span><br><span class="line">enp65s0f0np0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.9.2  netmask 255.255.255.0  broadcast 192.168.9.255</span><br><span class="line">        inet6 fe80::e8a7:6d0b:c437:47a2  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 64:b3:79:00:01:5a  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 429758  bytes 103736820 (103.7 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 804262  bytes 138138879 (138.1 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">enp66s0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.9.4  netmask 255.255.255.0  broadcast 192.168.9.255</span><br><span class="line">        inet6 fe80::2dde:7d4f:df48:59ca  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether e4:1d:2d:97:92:34  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 431116  bytes 104497752 (104.4 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 811031  bytes 138523138 (138.5 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">enp66s0d1: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.9.14  netmask 255.255.255.0  broadcast 192.168.9.255</span><br><span class="line">        inet6 fe80::c238:ad53:dfc8:2d14  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether e4:1d:2d:97:92:35  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 434024  bytes 104743872 (104.7 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 791748  bytes 136537921 (136.5 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><h2 id="KVM安装ubuntu18-04"><a href="#KVM安装ubuntu18-04" class="headerlink" title="KVM安装ubuntu18.04"></a>KVM安装ubuntu18.04</h2><p>教程：<a href="https://www.jianshu.com/p/d0e4ed80b8a1">https://www.jianshu.com/p/d0e4ed80b8a1</a></p><p>下载ubuntu镜像：<a href="http://mirrors.zju.edu.cn/ubuntu-releases/16.04/">http://mirrors.zju.edu.cn/ubuntu-releases/16.04/</a></p><h3 id="安装ubuntu："><a href="#安装ubuntu：" class="headerlink" title="安装ubuntu："></a>安装ubuntu：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virt-install --virt-type kvm  --name=ubuntu16-x86 --memory=2048,maxmemory=2048 --vcpus=2,maxvcpus=2 --os-type=linux --os-variant=ubuntu16.04 --network network=default --location=/home/hanzhong/ubuntu-16.04.7-server-amd64.iso --disk path=~/kvm/ubuntu16-x86.img,size=10 --graphics=none --check path_in_use=off --check all=off --extra-args=<span class="string">&#x27;console=ttyS0&#x27;</span></span><br></pre></td></tr></table></figure><p>出现权限不足报错，执行：chmod 755 ~，后重新执行命令安装</p><h3 id="ssh-登录虚拟机："><a href="#ssh-登录虚拟机：" class="headerlink" title="ssh 登录虚拟机："></a>ssh 登录虚拟机：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ virsh list <span class="comment">#获取目标虚拟机名</span></span><br><span class="line">$ virsh domifaddr [<span class="built_in">id</span> | name] <span class="comment">#获取虚拟机信息</span></span><br><span class="line"> Name       MAC address          Protocol     Address</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line"> vnet20     xx:xx:xx:xx:xx:xx    ipv4         192.168.122.116/24</span><br><span class="line"> </span><br><span class="line">$ ssh username@192.168.122.116</span><br></pre></td></tr></table></figure><h3 id="无法进入命令行问题修复"><a href="#无法进入命令行问题修复" class="headerlink" title="无法进入命令行问题修复"></a>无法进入命令行问题修复</h3><p>安装完毕后直接使用以下指令无法登录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~$ virsh console ubuntu18</span><br><span class="line">Connected to domain <span class="string">&#x27;ubuntu18&#x27;</span></span><br><span class="line">Escape character is ^] (Ctrl + ]) <span class="comment">#卡在这里</span></span><br></pre></td></tr></table></figure><p>在安装虚拟机时，应选择安装openSSH服务，从而可以使用ssh登录虚拟机。</p><p><a href="https://blog.csdn.net/weixin_28730403/article/details/111975038">https://blog.csdn.net/weixin_28730403/article/details/111975038</a><br><a href="https://blog.csdn.net/qq_36885515/article/details/112367143">https://blog.csdn.net/qq_36885515/article/details/112367143</a></p><h2 id="RDMA网卡设备穿透到KVM"><a href="#RDMA网卡设备穿透到KVM" class="headerlink" title="RDMA网卡设备穿透到KVM"></a>RDMA网卡设备穿透到KVM</h2><p><a href="https://blog.csdn.net/zhongbeida_xue/article/details/103602105">https://blog.csdn.net/zhongbeida_xue/article/details/103602105</a></p><ol><li><p>lspci | grep Ethernet，获取host主机上的网卡列表</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ lspci | grep Ethernet</span><br><span class="line">41:00.0 Ethernet controller: Broadcom Inc. and subsidiaries BCM57414 NetXtreme-E 10Gb/25Gb RDMA Ethernet Controller (rev 01)</span><br><span class="line">41:00.1 Ethernet controller: Broadcom Inc. and subsidiaries BCM57414 NetXtreme-E 10Gb/25Gb RDMA Ethernet Controller (rev 01)</span><br><span class="line">42:00.0 Ethernet controller: Mellanox Technologies MT27500 Family [ConnectX-3]</span><br></pre></td></tr></table></figure></li><li><p>vim pci-01.xml ，建立直连设备定义文件</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hostdev</span> <span class="attr">mode</span>=<span class="string">&#x27;subsystem&#x27;</span> <span class="attr">type</span>=<span class="string">&#x27;pci&#x27;</span> <span class="attr">managed</span>=<span class="string">&#x27;yes&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">address</span> <span class="attr">domain</span>=<span class="string">&#x27;0x0000&#x27;</span> <span class="attr">bus</span>=<span class="string">&#x27;0x41&#x27;</span> <span class="attr">slot</span>=<span class="string">&#x27;0x00&#x27;</span> <span class="attr">function</span>=<span class="string">&#x27;0x0&#x27;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hostdev</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>virsh attach-device [kvm-name] [config.xml]，进行设备直连<br> 在虚拟机内执行lspci，可以发现出现了，因此RDMA直连接已生效</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">07:00.0 Ethernet controller: Broadcom Inc. and subsidiaries BCM57414 NetXtreme-E 10Gb/25Gb RDMA Ethernet Controller (rev 01)</span><br></pre></td></tr></table></figure></li></ol><h2 id="安装MITOSIS-core"><a href="#安装MITOSIS-core" class="headerlink" title="安装MITOSIS core"></a>安装MITOSIS core</h2><p>1.安装rust</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ curl https://sh.rustup.rs -sSf | sh</span><br><span class="line"></span><br><span class="line">$ rustup install nightly-2022-02-04  <span class="comment"># 安装mitosis所需的工具链</span></span><br><span class="line">$ rustup default nightly-2022-02-04-x86_64-unknown-linux-gnu</span><br><span class="line"></span><br><span class="line">$ apt-get install clang-9</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>eBPF学习-01</title>
      <link href="/2023/01/19/eBPF%E5%AD%A6%E4%B9%A0-01/"/>
      <url>/2023/01/19/eBPF%E5%AD%A6%E4%B9%A0-01/</url>
      
        <content type="html"><![CDATA[<h2 id="Prepare"><a href="#Prepare" class="headerlink" title="Prepare"></a>Prepare</h2><p>安装eBPF教程（For ubuntu 18.04）：<br><a href="https://blog.csdn.net/qq_33344148/article/details/123255679">https://blog.csdn.net/qq_33344148/article/details/123255679</a></p><p>在这里可以找到各个内核版本bcc的release，可以进行手工下载：<br><a href="https://github.com/iovisor/bcc/releases/">https://github.com/iovisor/bcc/releases/</a></p><p>eBPF BCC：<br><a href="https://github.com/iovisor/bcc">https://github.com/iovisor/bcc</a></p><p>Py BCC开发教程：<br>官方：<a href="https://github.com/iovisor/bcc/blob/master/docs/tutorial_bcc_python_developer.md">https://github.com/iovisor/bcc/blob/master/docs/tutorial_bcc_python_developer.md</a><br>中文：<a href="https://blog.cyru1s.com/posts/ebpf-bcc.html">https://blog.cyru1s.com/posts/ebpf-bcc.html</a></p><h2 id="Example-01"><a href="#Example-01" class="headerlink" title="Example-01"></a>Example-01</h2><p>该代码对clone sys call进行追踪。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bcc <span class="keyword">import</span> BPF</span><br><span class="line"><span class="keyword">from</span> bcc.utils <span class="keyword">import</span> printb</span><br><span class="line"></span><br><span class="line"><span class="comment"># define BPF program</span></span><br><span class="line">prog = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">int hello(void *ctx) &#123;</span></span><br><span class="line"><span class="string">    bpf_trace_printk(&quot;Hello, World!\\n&quot;);</span></span><br><span class="line"><span class="string">    return 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># load BPF program</span></span><br><span class="line">b = BPF(text=prog)</span><br><span class="line"><span class="comment"># 添加探测点，追踪clone，可以添加多个探测点</span></span><br><span class="line">b.attach_kprobe(event=b.get_syscall_fnname(<span class="string">&quot;clone&quot;</span>), fn_name=<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># header，表头</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%-18s %-16s %-6s %s&quot;</span> % (<span class="string">&quot;TIME(s)&quot;</span>, <span class="string">&quot;COMM&quot;</span>, <span class="string">&quot;PID&quot;</span>, <span class="string">&quot;MESSAGE&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># format output</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      <span class="comment"># 从trace_pipe返回多个参数</span></span><br><span class="line">        (task, pid, cpu, flags, ts, msg) = b.trace_fields()</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        exit()</span><br><span class="line">    printb(<span class="string">b&quot;%-18.9f %-16s %-6d %s&quot;</span> % (ts, task, pid, msg))</span><br></pre></td></tr></table></figure><h2 id="Example-02"><a href="#Example-02" class="headerlink" title="Example-02"></a>Example-02</h2><p>该代码用于连续执行sync指令时进行打印</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> bcc <span class="keyword">import</span> BPF</span><br><span class="line"><span class="keyword">from</span> bcc.utils <span class="keyword">import</span> printb</span><br><span class="line"></span><br><span class="line"><span class="comment"># load BPF program</span></span><br><span class="line">b = BPF(text=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">#include &lt;uapi/linux/ptrace.h&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 创建一个名为 last 的 BPF hash 映射</span></span><br><span class="line"><span class="string">BPF_HASH(last);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">int do_trace(struct pt_regs *ctx) &#123;</span></span><br><span class="line"><span class="string">    u64 ts, *tsp, delta, key = 0;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // attempt to read stored timestamp</span></span><br><span class="line"><span class="string">    // 读取存储的上一次时间戳</span></span><br><span class="line"><span class="string">    tsp = last.lookup(&amp;key);</span></span><br><span class="line"><span class="string">    if (tsp != NULL) &#123;</span></span><br><span class="line"><span class="string">        // 计算过了多久</span></span><br><span class="line"><span class="string">        delta = bpf_ktime_get_ns() - *tsp;</span></span><br><span class="line"><span class="string">        // 小于1秒</span></span><br><span class="line"><span class="string">        if (delta &lt; 1000000000) &#123;</span></span><br><span class="line"><span class="string">            // output if time is less than 1 second</span></span><br><span class="line"><span class="string">            bpf_trace_printk(&quot;%d\\n&quot;, delta / 1000000);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        last.delete(&amp;key);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // update stored timestamp</span></span><br><span class="line"><span class="string">    // 更新时间戳</span></span><br><span class="line"><span class="string">    ts = bpf_ktime_get_ns();</span></span><br><span class="line"><span class="string">    last.update(&amp;key, &amp;ts);</span></span><br><span class="line"><span class="string">    return 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">b.attach_kprobe(event=b.get_syscall_fnname(<span class="string">&quot;sync&quot;</span>), fn_name=<span class="string">&quot;do_trace&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Tracing for quick sync&#x27;s... Ctrl-C to end&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># format output</span></span><br><span class="line">start = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 从trace pipe中读取数据，只有有数据时才会读取，否则阻塞</span></span><br><span class="line">        (task, pid, cpu, flags, ts, ms) = b.trace_fields()</span><br><span class="line">        <span class="keyword">if</span> start == <span class="number">0</span>:</span><br><span class="line">            start = ts</span><br><span class="line">        ts = ts - start</span><br><span class="line">        printb(<span class="string">b&quot;At time %.2f s: multiple syncs detected, last %s ms ago&quot;</span> % (ts, ms))</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        exit()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>RDMA-soft config</title>
      <link href="/2023/01/17/RDMA-soft-config/"/>
      <url>/2023/01/17/RDMA-soft-config/</url>
      
        <content type="html"><![CDATA[<p><a href="https://so.csdn.net/so/search?q=modprobe&spm=1001.2101.3001.7020">modprobe</a> rdma_rxe</p><p>rxe_cfg start</p><p>ifconfig</p><p>rxe_cfg add ens33</p><p>我在运行于VMware中的ubuntu环境搭建了Soft-RoCE软件模拟环境，并成功测试了两台虚拟机器间的通信，但是MITOSIS似乎需要“A machine with Mellanox RDMA-capable IB NIC ”，RoCE和IB两种RDMA技术有一定区别，因此可能导致无法成功。</p><p>在MITOSIS的readme中有这么一句“In principle there is no difficult in supporting RoCE, but we have lack such NIC for testing. ”，意思应该是不支持RoCE？但是，我目前没有找到软件模拟IB的方式</p><p>IB（InfiniBand）：基于 InfiniBand 架构的 RDMA 技术，由 IBTA（InfiniBand Trade Association）提出。搭建基于 IB 技术的 RDMA 网络需要专用的 IB 网卡和 IB 交换机。</p><p>iWARP（Internet Wide Area RDMA Protocal）：基于 TCP/IP 协议的 RDMA 技术，由 IETF 标 准定义。iWARP 支持在标准以太网基础设施上使用 RDMA 技术，但服务器需要使用支持iWARP 的网卡。</p><p>RoCE（RDMA over Converged Ethernet）：基于以太网的 RDMA 技术，也是由 IBTA 提出。RoCE支持在标准以太网基础设施上使用RDMA技术，但是需要交换机支持无损以太网传输，需要服务器使用 RoCE 网卡。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MIT 6.s081 Lab5 COW</title>
      <link href="/2023/01/15/MIT-6-s081-Lab5-COW/"/>
      <url>/2023/01/15/MIT-6-s081-Lab5-COW/</url>
      
        <content type="html"><![CDATA[<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p>COW标志位，/rich.h。储存在保留位里</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define COW_FLAG (1L &lt;&lt; 8)</span><br></pre></td></tr></table></figure><p>复制内存的代码，在fork中有被调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">int</span><br><span class="line">uvmcopy_u(pagetable_t old, pagetable_t new, uint64 sz)</span><br><span class="line">&#123;</span><br><span class="line">    pte_t *pte;</span><br><span class="line">    uint64 pa, i;</span><br><span class="line">    int flags;</span><br><span class="line"></span><br><span class="line">    for(i = 0; i &lt; sz; i += PGSIZE)&#123;</span><br><span class="line">        if((pte = walk(old, i, 0)) == 0)</span><br><span class="line">            panic(&quot;uvmcopy: pte should exist&quot;);</span><br><span class="line">        if((*pte &amp; PTE_V) == 0)</span><br><span class="line">            panic(&quot;uvmcopy: page not present&quot;);</span><br><span class="line"></span><br><span class="line">        // 旧进程的物理内存</span><br><span class="line">        pa = PTE2PA(*pte);</span><br><span class="line"></span><br><span class="line">        // COW</span><br><span class="line">        *pte = (*pte &amp; ~PTE_W) | COW_FLAG;</span><br><span class="line">        flags = PTE_FLAGS(*pte);</span><br><span class="line"></span><br><span class="line">        if(mappages(new, i, PGSIZE, (uint64)pa, flags) != 0)&#123;</span><br><span class="line">            goto err;</span><br><span class="line">        &#125;</span><br><span class="line">        con[getrefindex((uint64*)pa)]++;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line"></span><br><span class="line">err:</span><br><span class="line">uvmunmap(new, 0, i / PGSIZE, 1);</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>处理内存非法访问（页）中断的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">else if(r_scause() == 15)&#123;</span><br><span class="line">//      printf(&quot;page\n&quot;);</span><br><span class="line">        struct proc *p = myproc();</span><br><span class="line"></span><br><span class="line">        /* 【xv6对页的操控粒度为Page】</span><br><span class="line">         * 需要将当前虚拟地址所对应的page进行拷贝</span><br><span class="line">         * 由于虚拟地址可能指向页的中间</span><br><span class="line">         * 因此需要向下对其到页的边界</span><br><span class="line">         * 从而将这一页全部都进行拷贝（COW）</span><br><span class="line">         */</span><br><span class="line">        uint64 va=PGROUNDDOWN(r_stval()); // 虚拟地址</span><br><span class="line"></span><br><span class="line">        pte_t *pte; // pte</span><br><span class="line">        pte = walk(p-&gt;pagetable, va, 0);</span><br><span class="line"></span><br><span class="line">        if(*pte &amp; COW_FLAG)&#123; //是cow页面</span><br><span class="line">            uint64 pa=PTE2PA(*pte); // 物理地址</span><br><span class="line"></span><br><span class="line">            char *mem;</span><br><span class="line">            //分配一页新内存</span><br><span class="line">            if((mem = kalloc()) == 0)</span><br><span class="line">                panic(&quot;uvmtrap: pte alloc exist&quot;);</span><br><span class="line"></span><br><span class="line">            // 拷贝旧数据的值到新page</span><br><span class="line">            memmove(mem, (char*)pa, PGSIZE);</span><br><span class="line"></span><br><span class="line">            int flags = PTE_FLAGS(*pte);</span><br><span class="line"></span><br><span class="line">            flags =flags | PTE_W;</span><br><span class="line">            flags &amp;= ~COW_FLAG;</span><br><span class="line">//            *pte &amp;=~PTE_V;</span><br><span class="line">            // 进行内存映射</span><br><span class="line">            mappages(p-&gt;pagetable, va, PGSIZE, (uint64)mem, flags);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            kfree((void*)pa);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>释放内存代码（引用计数）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// derf.h</span><br><span class="line">extern int con[];</span><br><span class="line">extern int getrefindex(void*);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">void</span><br><span class="line">kfree(void *pa)</span><br><span class="line">&#123;</span><br><span class="line">  struct run *r;</span><br><span class="line"></span><br><span class="line">  if(((uint64)pa % PGSIZE) != 0 || (char*)pa &lt; end || (uint64)pa &gt;= PHYSTOP) &#123;</span><br><span class="line">      panic(&quot;kfree&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  con[getrefindex(pa)]--;</span><br><span class="line">  //printf(&quot;%d&quot;,con[(uint64)pa/PGSIZE]);</span><br><span class="line">  if(con[getrefindex(pa)]&gt;0)&#123;</span><br><span class="line">      return;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // Fill with junk to catch dangling refs.</span><br><span class="line">  memset(pa, 1, PGSIZE);</span><br><span class="line"></span><br><span class="line">  r = (struct run*)pa;</span><br><span class="line"></span><br><span class="line">  acquire(&amp;kmem.lock);</span><br><span class="line">  r-&gt;next = kmem.freelist;</span><br><span class="line">  kmem.freelist = r;</span><br><span class="line">  release(&amp;kmem.lock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-01-16%2010.31.45.png" alt="截屏2023-01-16 10.31.45"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MITOSIS note</title>
      <link href="/2023/01/13/MITOSIS-learning/"/>
      <url>/2023/01/13/MITOSIS-learning/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/ProjectMitosisOS">MITOSIS Repo</a></p><h2 id="Remote-Fork-C-R"><a href="#Remote-Fork-C-R" class="headerlink" title="Remote Fork(C/R)"></a>Remote Fork(C/R)</h2><p>现有容器只能通过C/R的方法进行远程Fork。这种方法需要父进程首先需要<em>checkpoints</em> its states，并将state储存到文件里。在通过remote file copy或distributed file system将文件复制到子进程。子进程根据文件信息对夫进程进行恢复。由于C/R需要复制全部内存信息，因此很慢。例如需要对1G内存进行拷贝，C/R甚至比冷启动还要慢2.7倍。</p><h2 id="MITOSIS"><a href="#MITOSIS" class="headerlink" title="MITOSIS"></a>MITOSIS</h2><p>MITOSIS【maɪˈtoʊsɪs】通过RDMA模拟本地Fork来实现高效的远程分叉（具有类似COW机制）。</p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-01-16%2011.36.26.png" alt="截屏2023-01-16 11.36.26"></p><p>首先，我们将父对象的Metadata(例如页表)复制到一个压缩描述符来派生子对象。Note:不将父进程的内存页复制到描述符中。然后通过RDMA将描述符复制到子进程以恢复父进程的Metadata。子进程的“远程内存访问”会触发页面错误，内核将读区读取远程页面。避免了传输整个容器状态。同时，MITOSIS直接使用单边RDMA Read来读取远程物理内存，绕过所有软件开销。</p><h3 id="MITOSIS和C-R-fork的比较"><a href="#MITOSIS和C-R-fork的比较" class="headerlink" title="MITOSIS和C/R fork的比较"></a>MITOSIS和C/R fork的比较</h3><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-01-14%2013.40.51.png" alt="截屏2023-01-14 13.40.51"></p><p><strong>MITOSIS由以下四个模块组成：</strong></p><p>The <em>fork orchestrator</em> rehearsals the remote fork execution；准备fork和进行fork，使用rpc进行校验</p><p>The <em>network daemon</em> manages a scalable RDMA connection pool；单侧RDMA，维护RDMA连接pool</p><p>Extend OS’s <em>virtual memory subsystems</em> to utilize the remote memory with RDMA ；远程内存访问</p><p><em>Fallback daemon</em> provides RPC handlers to restore rare remote memory accesses that cannot utilize RDMA；恢复机制，回退到RPC</p><h2 id="1）准备fork和进行fork"><a href="#1）准备fork和进行fork" class="headerlink" title="1）准备fork和进行fork"></a>1）准备fork和进行fork</h2><h3 id="1-fork-prepare"><a href="#1-fork-prepare" class="headerlink" title="1.fork_prepare"></a>1.fork_prepare</h3><p>准备fork，使用一个结构体保存：</p><ul><li>CPU寄存器状态（用于恢复运行状态）</li><li>cGroup和Namespace（用于进行容器化）</li><li>页表和虚拟内存区（用于远程内存访问）</li><li>打开文件信息（重新打开文件，使用CRIU）</li></ul><p>保存这些信息，结构体很小，大概是KB级别</p><h3 id="2-fork-resume"><a href="#2-fork-resume" class="headerlink" title="2.fork_resume"></a>2.fork_resume</h3><p>fork_resume从父进程获取descriptor，并恢复执行状态。</p><p>使用oneside RDMA获取descriptor。首先子进程通过RPC向父进程发一个authentication RPC，若认证通过，则父进程会返回descriptor’s stored address和payload。之后子进程就可以使用oneside RDMA获取descriptor。</p><p>获取到descriptor后，恢复容器状态。(1)设置cgroups和命名空间以匹配父操作系统的设置 (2)切换:用父进程的CPU寄存器、页表和I/O描述符替换调用方的CPU寄存器。此外引入SOCK以完成快速容器恢复。</p><h2 id="2）单侧RDMA"><a href="#2）单侧RDMA" class="headerlink" title="2）单侧RDMA"></a>2）单侧RDMA</h2><p>RDMA：有三种QP类型</p><p>RDMA连接消耗较大，速度较慢。因此使用无连接的oneside RDMA。因此改进RDMA连接（DCT-dynamic connected transport），DCT保留了RC的功能，并进一步提供了一种无连接的方式:单个DCQP可以与不同的节点通信。</p><p>目标节点只需要创建一个DC，该DC由节点的RDMA地址和12B DC key标识。在知道key后，子节点可以在没有连接的情况下向相应的目标发送单侧RDMA请求，硬件会承载数据处理连接，速度极快(1μs以内).</p><p>基于DCT，网络守护进程管理一个小型内核空间DCQP池，用于处理来自子进程的RDMA请求。通常，每个cpu一个DCQP就足以充分利用RDMA。但是，仅使用DCT是不够的，因为孩子需要提前知道DCT key才能与父母通信。因此，MITOSIS实现了一个内核空间”fast RPC”来引导DCT。fast是一个基于ud的RPC，支持无连接。使用RPC，我们在RPC请求中装载与父对象关联的DCT键，以查询父对象的描述符。为了节省CPU资源，我们只部署了两个内核线程来处理rpc.</p><h2 id="3）Virtual-memory-management"><a href="#3）Virtual-memory-management" class="headerlink" title="3）Virtual memory management"></a>3）Virtual memory management</h2><p>为了提高resume效率，直接将子节点映射页面的页表项(PTE)设置为父节点的物理地址(PA)。使用一个PTE中的remote bit来进行区分（remote bit位于PTE未被利用的高位）。在resume过程中，系统会设置remote bit并清除present bit，当子进程访问里该PTE，就会进入缺页中断，从而出发RDMA远程读取。</p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-01-16%2013.18.22.png" alt="截屏2023-01-16 13.18.22"></p><p>如果错误页没有映射到父页，例如堆栈增长，我们就像处理普通的页错误一样在本地处理它。<br>否则，检查故障虚拟地址VA (virtual address)是否映射了远端PA。使用单边RDMA将远程page读到本地页。大多数子页面都可以通过RDMA恢复。在错过映射的情况下，则使用RPC映射。</p><p>RPC：每个节点有一个回退守护进程，该守护进程生成内核线程来处理子节点的页请求（包含父节点标识符和请求的虚拟地址）。回退逻辑: 在检查请求的有效性之后，守护进程线程将代表父进程加载页面。如果加载成功，我们将把结果发回给子进程。</p><p><strong>Access control and isolation</strong></p><p>我们需要拒绝对不再属于父节点的映射页的访问，并正确隔离对不同容器的访问。</p><p>直接暴露父节点的物理内存可以提高远程fork的速度。然而，我们需要拒绝对不再属于父节点的映射页的访问，并正确隔离对不同容器的访问。由于我们以cpu旁路的方式通过单边RDMA公开内存，因此只能利用RNIC进行控制。</p><p>MITOSIS用一种基于连接的内存访问控制方法。将不同的RDMA连接分配到父虚拟内存区域(VMA)的不同部分，例如，每个VMA一个连接。如果映射的物理页不再属于父页，我们将破坏与该页的VMA相关的连接。因此，child对页面的访问将被RNIC拒绝。所有连接都在内核中进行管理，以防止恶意用户访问错误的远程容器内存。</p><p>为了实现基于连接的访问控制，每个连接在创建和存储时都必须高效。幸运的是，DCQP很好地满足了这些要求。在子端，每个连接(DC key)只消耗12B ，不同的DC连接可以共享相同的DCQP。parent-side DC target consumes 144B。</p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-01-16%2013.34.56.png" alt="截屏2023-01-16 13.34.56"></p><p>图片表示了基于dct的访问控制。在准备分叉时，MITOSIS从目标池中选择一个DC目标分配给每个parent VMA。pool在启动时初始化，并在后台定期填充。这些目标的DC key被装载在父进程的描述符中，以便子进程在恢复过程中可以将它们记录在VMA中。在读取父节点的page时，子节点将使用与页面VMA对应的key来发出RDMA请求。使用此方案，如果parent想要拒绝对该页的访问，它可以销毁相应的DC目标。</p><h2 id="Pre-fetching-and-caching"><a href="#Pre-fetching-and-caching" class="headerlink" title="Pre-fetching and caching"></a>Pre-fetching and caching</h2><p>此处似乎有一定优化空间？可以采用计数法提升cache命中率。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MIT 6.s081 Lab4 Trap</title>
      <link href="/2023/01/13/MIT-6-s081-Lab4/"/>
      <url>/2023/01/13/MIT-6-s081-Lab4/</url>
      
        <content type="html"><![CDATA[<h2 id="RISC-V-assembly"><a href="#RISC-V-assembly" class="headerlink" title="RISC-V assembly"></a>RISC-V assembly</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int g(int x) &#123;</span><br><span class="line">  return x+3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int f(int x) &#123;</span><br><span class="line">  return g(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void main(void) &#123;</span><br><span class="line">  printf(&quot;%d %d\n&quot;, f(8)+1, 13);</span><br><span class="line">  exit(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">0000000000000000 &lt;g&gt;:</span><br><span class="line">#include &quot;kernel/param.h&quot;</span><br><span class="line">#include &quot;kernel/types.h&quot;</span><br><span class="line">#include &quot;kernel/stat.h&quot;</span><br><span class="line">#include &quot;user/user.h&quot;</span><br><span class="line"></span><br><span class="line">int g(int x) &#123;</span><br><span class="line">   0:1141                addisp,sp,-16</span><br><span class="line">   2:e422                sds0,8(sp)</span><br><span class="line">   4:0800                addis0,sp,16</span><br><span class="line">  return x+3;</span><br><span class="line">&#125;</span><br><span class="line">   6:250d                addiwa0,a0,3</span><br><span class="line">   8:6422                lds0,8(sp)</span><br><span class="line">   a:0141                addisp,sp,16</span><br><span class="line">   c:8082                ret</span><br><span class="line"></span><br><span class="line">000000000000000e &lt;f&gt;:</span><br><span class="line"></span><br><span class="line">int f(int x) &#123;</span><br><span class="line">   e:1141                addisp,sp,-16</span><br><span class="line">  10:e422                sds0,8(sp)</span><br><span class="line">  12:0800                addis0,sp,16</span><br><span class="line">  return g(x);</span><br><span class="line">&#125;</span><br><span class="line">  14:250d                addiwa0,a0,3</span><br><span class="line">  16:6422                lds0,8(sp)</span><br><span class="line">  18:0141                addisp,sp,16</span><br><span class="line">  1a:8082                ret</span><br><span class="line"></span><br><span class="line">000000000000001c &lt;main&gt;:</span><br><span class="line"></span><br><span class="line">void main(void) &#123;</span><br><span class="line">  1c:1141                addisp,sp,-16</span><br><span class="line">  1e:e406                sdra,8(sp)</span><br><span class="line">  20:e022                sds0,0(sp)</span><br><span class="line">  22:0800                addis0,sp,16</span><br><span class="line">  printf(&quot;%d %d\n&quot;, f(8)+1, 13);</span><br><span class="line">  24:4635                lia2,13</span><br><span class="line">  26:45b1                lia1,12</span><br><span class="line">  28:00000517          auipca0,0x0</span><br><span class="line">  2c:7a850513          addia0,a0,1960 # 7d0 &lt;malloc+0xe8&gt;</span><br><span class="line">  30:00000097          auipcra,0x0</span><br><span class="line">  34:600080e7          jalr1536(ra) # 630 &lt;printf&gt;</span><br><span class="line">  exit(0);</span><br><span class="line">  38:4501                lia0,0</span><br><span class="line">  3a:00000097          auipcra,0x0</span><br><span class="line">  3e:28e080e7          jalr654(ra) # 2c8 &lt;exit&gt;</span><br><span class="line"></span><br><span class="line">0000000000000042 &lt;_main&gt;:</span><br><span class="line">//</span><br><span class="line">// wrapper so that it&#x27;s OK if main() does not call exit().</span><br><span class="line">//</span><br><span class="line">void</span><br><span class="line">_main()</span><br><span class="line">&#123;</span><br><span class="line">  42:1141                addisp,sp,-16</span><br><span class="line">  44:e406                sdra,8(sp)</span><br><span class="line">  46:e022                sds0,0(sp)</span><br><span class="line">  48:0800                addis0,sp,16</span><br><span class="line">  extern int main();</span><br><span class="line">  main();</span><br><span class="line">  4a:00000097          auipcra,0x0</span><br><span class="line">  4e:fd2080e7          jalr-46(ra) # 1c &lt;main&gt;</span><br><span class="line">  exit(0);</span><br><span class="line">  52:4501                lia0,0</span><br><span class="line">  54:00000097          auipcra,0x0</span><br><span class="line">  58:274080e7          jalr628(ra) # 2c8 &lt;exit&gt;</span><br><span class="line"></span><br><span class="line">000000000000005c &lt;strcpy&gt;:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RISC-V-trap-machinery"><a href="#RISC-V-trap-machinery" class="headerlink" title="RISC-V trap machinery"></a>RISC-V trap machinery</h2><ul><li>stvec ：内核在这里写入它的trap处理程序的地址;RISC-V跳转到stvec中的地址来处理trap。</li><li>sepc：当一个trap发生时，RISC-V将程序计数器保存在这里(因为pc会被stvec中的值覆盖)。sret (return from trap)指令将sepc复制到pc上。内核可以编写sepc来控制sret的位置。</li><li>scause：RISC-V在这里放了一个数字来描述trap的原因。</li><li>sscratch： trap处理程序代码使用sscratch来避免在 保存用户寄存器之前覆盖用户寄存器。</li><li>sstatus：sstatus中的SIE位控制是否启用设备中断。如果内核清除了SIE, RISC-V将延迟设备中断，直到内核设置了SIE。SPP位表示trap来自用户模式还是管理模式，并控制sret返回哪种模式。</li></ul><p>RISC-V中断发生过程：</p><ol><li>如果设备中断，且sstatus SIE位为清零，则无需执行以下操作</li><li>通过清除sstatus中的SIE位来禁用中断。</li><li>Copy the pc to sepc.</li><li>将当前模式(user或supervisor)保存在sstatus的SPP位中。</li><li>设置原因以反映陷阱的原因。</li><li>Set the mode to supervisor</li><li>Copy stvec to the pc.</li><li>在新的pc位置开始执行</li></ol><h2 id="User-Trap"><a href="#User-Trap" class="headerlink" title="User Trap"></a>User Trap</h2><p>用户中断当用户调用了ecall指令时发生（或发生了非法操作或硬件中断）。</p><p>用户发生中断：<br>step1: uservec<br>step2: usertrap</p><p>当中断返回：<br>step1: usertrapret<br>step2: userret</p><h3 id="1-发生中断"><a href="#1-发生中断" class="headerlink" title="1. 发生中断"></a>1. 发生中断</h3><p>TRAMPOLINE page在程序初始化时放置，位于user虚拟地址的顶部，同时TRAMPOLINE在内核页表也被映射。且没有 PTE_U标志。因此trap handler在切换到内核page后可以继续执行。</p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-01-13%2023.20.51.png" alt="截屏2023-01-13 23.20.51"></p><p>为了保存用户状态，uservec会将用户寄存器状态保存在TRAPFRAME（一个结构体）。TRAPFRAME 在 TRAMPOLINE之下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">struct trapframe &#123;</span><br><span class="line">  /*   0 */ uint64 kernel_satp;   // kernel page table</span><br><span class="line">  /*   8 */ uint64 kernel_sp;     // top of process&#x27;s kernel stack</span><br><span class="line">  /*  16 */ uint64 kernel_trap;   // usertrap()</span><br><span class="line">  /*  24 */ uint64 epc;           // saved user program counter</span><br><span class="line">  /*  32 */ uint64 kernel_hartid; // saved kernel tp</span><br><span class="line">  /*  40 */ uint64 ra;</span><br><span class="line">  /*  48 */ uint64 sp;</span><br><span class="line">  /*  56 */ uint64 gp;</span><br><span class="line">  /*  64 */ uint64 tp;</span><br><span class="line">  /*  72 */ uint64 t0;</span><br><span class="line">  /*  80 */ uint64 t1;</span><br><span class="line">  ......</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>TRAPFRAME中保存了内核page的信息和cpu信息，uservec从这里获取信息。然后执行usertrap。</p><p> usertrap的工作是确定trap的原因, 运行trap并返回。usertrap首先会保存sepc（用户程序计数器）。如果该trap是一个系统调用，则usertrap调用sycall来处理它;如果设备中断，devintr;否则它是一个异常，内核会终止发生故障的进程。</p><p>系统调用路径在保存的用户程序计数器上增加了4，因为RISC-V在系统调用的情况下，用户代码需要在后续指令处恢复执行（不能反复执行sys call）。在退出过程中，usertrap检查进程是否已经被杀死或应该产生CPU(如果这个trap是一个定时器中断)。</p><h3 id="2-中断返回"><a href="#2-中断返回" class="headerlink" title="2. 中断返回"></a>2. 中断返回</h3><p>返回第一步是运行usertrapret。然后执行userret。这俩恢复了一些寄存器状态，返回用户空间。</p><h2 id="initcode-S（如何调用sys-call）"><a href="#initcode-S（如何调用sys-call）" class="headerlink" title="initcode.S（如何调用sys call）"></a>initcode.S（如何调用sys call）</h2><p>initcode.S将exec的参数放在寄存器a0和a1中，并将系统调用号放在a7中。系统调用号匹配syscalls数组中的条目，syscalls数组是一个函数指针(kernel/syscall.c:107)。调用指令被捕获到内核中，并导致uservec、usertrap和sycall执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">la a0, init</span><br><span class="line">la a1, argv</span><br><span class="line">li a7, SYS_exec</span><br><span class="line">ecall</span><br></pre></td></tr></table></figure><p>Syscall (kernel/ Syscall .c:132) 从trapframe中保存的a7中获取系统调用号，并使用它索引到系统调用中。对于第一个系统调用，a7包含SYS_exec (ker- nel/ sycall .h:8)，导致调用系统调用实现函数SYS_exec。</p><p>当sys_exec返回时，系统调用将返回值记录在p-&gt;trapframe-&gt;a0中。这将导致对exec()的原始用户空间调用返回该值，因为RISC-V上的Ccall约定将返回值放在a0中。</p><p>系统调用通常返回负数表示错误，返回零或正数表示成功。如果系统调用号无效，系统调用将打印错误并返回−1。</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-01-15%2000.09.58.png" alt="截屏2023-01-15 00.09.58"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MIT 6.s081 Lab3 Page Table</title>
      <link href="/2023/01/10/MIT6-s081-Lab3-Page-Table/"/>
      <url>/2023/01/10/MIT6-s081-Lab3-Page-Table/</url>
      
        <content type="html"><![CDATA[<h2 id="页表结构推导"><a href="#页表结构推导" class="headerlink" title="页表结构推导"></a>页表结构推导</h2><p>RICS-V架构，2^39bit内存可用，2^37Byte。每页是4096Byte，2^12 Byte</p><p>逻辑上，页表需要2^27个pte，以映射全部物理地址(pte是页表中对以应一个物理内存地址的信息存储单元)。</p><p>每个pte包含64bit（44bit PNN，一些Flag）。以下为pte结构：</p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-01-11%2013.57.28.png" alt="截屏2023-01-11 13.57.28"></p><p>但是，2^27个pte需要内存：2^27 * 2^6 bit = 2^29 bit = 2^27byte = 2^10 * 2^10 * 2^9 byte = 512MB。若存储全部进程的pte则需要占用大量内存。因此使用三级页表结构：</p><p>一个页表页，包含512个pte。512^3=(2^9)^3，因此理论上可以使用三级页表表示全部的物理地址。当一块虚拟地址没有被使用，则相应的页表不会被初始化，则不需要使用内存。</p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-01-11%2013.30.54.png" alt="截屏2023-01-11 13.30.54"></p><p>根据虚拟地址，获取相应pte (若该虚拟地址未被初始化，则进行相应的页表初始化)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// pagetable 根页表</span><br><span class="line">// va 虚拟地址</span><br><span class="line">// alloc是否初始化</span><br><span class="line">pte_t* walk(pagetable_t pagetable, uint64 va, int alloc)&#123;</span><br><span class="line">  if(va &gt;= MAXVA)</span><br><span class="line">    panic(&quot;walk&quot;);</span><br><span class="line"></span><br><span class="line">// 三级页表</span><br><span class="line">  for(int level = 2; level &gt; 0; level--) &#123;</span><br><span class="line">    pte_t *pte = &amp;pagetable[PX(level, va)];</span><br><span class="line">    if(*pte &amp; PTE_V) &#123; //已经分配</span><br><span class="line">      pagetable = (pagetable_t)PTE2PA(*pte); //跳转到下一级页表</span><br><span class="line">    &#125; else &#123; // 为分配此级页表</span><br><span class="line">      if(!alloc || (pagetable = (pde_t*)kalloc()) == 0) //分配一页，并跳转到下一级页表</span><br><span class="line">        return 0;</span><br><span class="line">      memset(pagetable, 0, PGSIZE); //初始化页</span><br><span class="line">      *pte = PA2PTE(pagetable) | PTE_V; </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return &amp;pagetable[PX(0, va)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内核地址空间"><a href="#内核地址空间" class="headerlink" title="内核地址空间"></a>内核地址空间</h2><h2 id="进程地址空间"><a href="#进程地址空间" class="headerlink" title="进程地址空间"></a>进程地址空间</h2><h2 id="Lab结果"><a href="#Lab结果" class="headerlink" title="Lab结果"></a>Lab结果</h2><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-01-13%2015.03.29.png" alt="截屏2023-01-13 15.03.29"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MIT 6.s081 Lab2 System Call</title>
      <link href="/2023/01/10/6-s081-Lab2-System-Call/"/>
      <url>/2023/01/10/6-s081-Lab2-System-Call/</url>
      
        <content type="html"><![CDATA[<h2 id="xv6系统用户态调用syscall过程分析"><a href="#xv6系统用户态调用syscall过程分析" class="headerlink" title="xv6系统用户态调用syscall过程分析"></a>xv6系统用户态调用syscall过程分析</h2><ul><li>/user/usys.S 是用户态进入内核态的汇编脚本，该文件由usys.pl生成</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.global sysinfo</span><br><span class="line">sysinfo:</span><br><span class="line"> li a7, SYS_sysinfo  # 将syscall的标识写入a7寄存器</span><br><span class="line"> ecall               # 使用ecall指令，使用a7寄存器，进入内核态</span><br><span class="line"> ret</span><br></pre></td></tr></table></figure><ul><li>/kernal/syscall.c，该函数获取用户态传递的syscall id，并进行调用</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">void syscall(void) &#123;</span><br><span class="line">  int num;</span><br><span class="line">  struct proc *p = myproc(); //获取进入内核态的进程</span><br><span class="line"></span><br><span class="line">  num = p-&gt;trapframe-&gt;a7;    //获取需要执行的系统调用id，该id由usys.S写入了a7寄存器</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  if(num &gt; 0 &amp;&amp; num &lt; NELEM(syscalls) &amp;&amp; syscalls[num]) &#123; # 使用syscall的函数指针调用</span><br><span class="line">  </span><br><span class="line">    // Use num to lookup the system call function for num, call it,</span><br><span class="line">    // and store its return value in p-&gt;trapframe-&gt;a0</span><br><span class="line">    p-&gt;trapframe-&gt;a0 = syscalls[num](); #将syscall返回值保存在a0寄存器，通过此方法将返回值传递给用户态</span><br><span class="line">    </span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    printf(&quot;%d %s: unknown sys call %d\n&quot;,</span><br><span class="line">            p-&gt;pid, p-&gt;name, num);</span><br><span class="line">    p-&gt;trapframe-&gt;a0 = -1;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>/kernal/sysproc.c，该文件是lab2中syscall的实现代码文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//实现syscall,该函数需在syscall.c中声明</span><br><span class="line">uint64 sys_trace(void)&#123;</span><br><span class="line"></span><br><span class="line">// 获取system call 参数</span><br><span class="line">    int muskid;</span><br><span class="line">    argint(0,&amp;muskid);</span><br><span class="line"></span><br><span class="line">    return trace(muskid); //do something and return</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加syscall流程"><a href="#添加syscall流程" class="headerlink" title="添加syscall流程"></a>添加syscall流程</h2><ol><li><p>在syscall.h中添加一个syscall id</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#define SYS_trace  22</span><br><span class="line">#define SYS_sysinfo  23</span><br></pre></td></tr></table></figure></li><li><p>在syscall.c中添加syscall的函数定义</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">extern uint64 sys_trace(void);</span><br><span class="line">extern uint64 sys_sysinfo(void);</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[SYS_trace]   sys_trace,</span><br><span class="line">[SYS_sysinfo]   sys_sysinfo</span><br></pre></td></tr></table></figure></li><li><p>在sysproc中实现syscall函数</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">uint64 sys_trace(void)&#123;</span><br><span class="line">    int muskid;</span><br><span class="line"></span><br><span class="line">    // 获取system call 参数</span><br><span class="line">    argint(0,&amp;muskid);</span><br><span class="line"></span><br><span class="line">    return trace(muskid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在/user/usys.pl加入系统调用声明</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">entry(&quot;trace&quot;);</span><br><span class="line">entry(&quot;sysinfo&quot;);</span><br></pre></td></tr></table></figure></li></ol><p>这样以来，用户态向内核态传递syscall id(a7)，内核态根据id对相应的syscall进行调用，并将返回值储存在a0寄存器。</p><h2 id="Trace"><a href="#Trace" class="headerlink" title="Trace"></a>Trace</h2><h2 id="Sysinfo"><a href="#Sysinfo" class="headerlink" title="Sysinfo"></a>Sysinfo</h2><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-01-10%2002.03.22.png" alt="截屏2023-01-10 02.03.22"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Log framework High level design</title>
      <link href="/2022/12/06/Log-fremawork-High-level-design/"/>
      <url>/2022/12/06/Log-fremawork-High-level-design/</url>
      
        <content type="html"><![CDATA[<p>为了提升go语言的熟练程度，使用go语言编写一个easy log framework. This is the high level design for this framework.</p><h2 id="Requirement-Analysis"><a href="#Requirement-Analysis" class="headerlink" title="Requirement Analysis"></a>Requirement Analysis</h2><h3 id="1-Log-levels"><a href="#1-Log-levels" class="headerlink" title="1. Log levels"></a>1. Log levels</h3><p>​    ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE</p><h3 id="2-Basic-requirement"><a href="#2-Basic-requirement" class="headerlink" title="2. Basic requirement"></a>2. Basic requirement</h3><p>用户需要在每个需要使用日志的类中声明一个EasyLog对象。利用工厂模式声明，工厂方法可选一下几种参数：</p><ul><li></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cross-domain security in SSO</title>
      <link href="/2022/12/01/Cross-domain-security-in-SSO/"/>
      <url>/2022/12/01/Cross-domain-security-in-SSO/</url>
      
        <content type="html"><![CDATA[<p>由于Casdoor Flutter Sdk遇到了跨域问题，故调研Okta和Auth0的跨域问题的解决方案，方案初步整理如下：</p><h2 id="解决策略"><a href="#解决策略" class="headerlink" title="解决策略"></a>解决策略</h2><p>在单点登录系统中，Single-Page App需要从浏览器跨域访问SSO服务器。为支持这一需求，单点登录系统应支持配置“Allowed Web Origins”和“Allowed API”。SSO服务可以根据这两个配置对跨域请求进行校验。</p><blockquote><p>定义：</p><ul><li><p><strong>Single-Page App</strong>：单页应用。为不包含后端的纯web页面</p></li><li><p><strong>Allowed Web Origins</strong>：允许跨域访问的网络源(Web Origin)。尽管Single-Page App不包含后端，但其依然会挂在一个服务器上以支持用户访问，这个服务器的Host就是Web Origin</p></li><li><p> <strong>Allowed API</strong>：支持跨域访问的API</p></li></ul></blockquote><p>以下为Okta和Auth0对两种配置的支持情况：</p><table><thead><tr><th align="center"></th><th align="center">Okta</th><th align="center">Auth0</th></tr></thead><tbody><tr><td align="center">Allowed Web Origins</td><td align="center">✅</td><td align="center">✅</td></tr><tr><td align="center">Allowed API</td><td align="center">✅</td><td align="center">⭕️</td></tr></tbody></table><p>对于Js sdk，需对跨域访问的请求头进行配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">referrer : Web Origin/path</span><br><span class="line">origin : Web Origin</span><br></pre></td></tr></table></figure><p>此外，需针对Token的存储模式提供安全保障，例如localstorage和设定过期策略。<br>（Okta和Auth0的整个跨域支持逻辑比较复杂，暂未弄清整个流程全部细节）</p><h2 id="Okta对跨域问题的支持"><a href="#Okta对跨域问题的支持" class="headerlink" title="Okta对跨域问题的支持"></a>Okta对跨域问题的支持</h2><p>Okta跨域配置教程：<a href="https://developer.okta.com/docs/guides/enable-cors/main/">https://developer.okta.com/docs/guides/enable-cors/main/</a></p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2022-12-01%2019.50.59.png" alt="截屏2022-12-01 19.50.59"></p><p>Okta js sdk repo：<a href="https://github.com/okta/okta-auth-js">https://github.com/okta/okta-auth-js</a><br>Okta js sdk教程：<a href="https://developer.okta.com/docs/guides/auth-js/main/">https://developer.okta.com/docs/guides/auth-js/main/</a></p><h2 id="Auth0对跨域问题的支持"><a href="#Auth0对跨域问题的支持" class="headerlink" title="Auth0对跨域问题的支持"></a>Auth0对跨域问题的支持</h2><p>Auth0 js sdk教程：<a href="https://auth0.com/docs/quickstart/spa/vanillajs/interactive">https://auth0.com/docs/quickstart/spa/vanillajs/interactive</a></p><p><img src="https://github.com/muchengl/pic_storage/blob/main/uPic/%E6%88%AA%E5%B1%8F2022-12-01%2019.48.51.png?raw=true" alt="截屏2022-12-01 19.48.51"></p><p>Auth0 js sdk: <a href="https://github.com/auth0/auth0.js/blob/master/src/web-auth/cross-origin-authentication.js">https://github.com/auth0/auth0.js/blob/master/src/web-auth/cross-origin-authentication.js</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Casdoor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Study Notes about Virtualization 01</title>
      <link href="/2022/11/29/Study-Notes-about-Virtualization-01/"/>
      <url>/2022/11/29/Study-Notes-about-Virtualization-01/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker-runtime-environment"><a href="#Docker-runtime-environment" class="headerlink" title="Docker runtime environment"></a>Docker runtime environment</h2><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/img_3faaf387af747fdecd5530e05bfceeb0.jpg" alt="img_3faaf387af747fdecd5530e05bfceeb0"></p><p>Docker初始发展高度封闭，后期转向开放路线。此时Docker的运行依赖为Runc。Runc是一个实现了OCI（<a href="https://www.opencontainers.org/">Open Container Initiative</a>）协议的组件。因此可以通过支持OCI协议，实现对Runc的替换，从而实现自己的Docker运行时依赖。</p><p>Userful Link：<br>Blog：<a href="https://xuanwo.io/2019/08/06/oci-intro/">https://xuanwo.io/2019/08/06/oci-intro/</a><br>OCI Repo：<a href="https://github.com/opencontainers/runtime-spec">https://github.com/opencontainers/runtime-spec</a></p><h2 id="gVisor"><a href="#gVisor" class="headerlink" title="gVisor"></a>gVisor</h2><p><a href="https://cloud-atlas.readthedocs.io/zh_CN/latest/kubernetes/virtual/gvisor/gvisor_quickstart.html%EF%BC%89">gVisor</a>是一个谷歌的开源项目。实现了OCI协议，因此可以作为Docker的runtime。Docker存在安全问题，程序有可能逃逸出Container，从而威胁操作系统本身运行。因此需要一款更加安全的Runtime application。gVisor就是这样的一款app。</p><p>gVisor是一个sandbox，实现了一个“应用内核”——Sentry。原理是劫持了应用程序的全部sys call，利用Ptrace(or KVM)。Sentry劫持到sys call后，使用go语言模拟出了sys call的功能，从而实现了一个虚拟内核。隔离了程序和Host Kernel。</p><p>同时gVisor有一个Gofer模块，用于处理应用程序的IO。</p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/665372-20210108180022427-177964885.png" alt="665372-20210108180022427-177964885"></p><h2 id="Learning-Plan"><a href="#Learning-Plan" class="headerlink" title="Learning Plan"></a>Learning Plan</h2><ul><li>Step1: 学完go</li><li>Step2: 看<a href="https://github.com/opencontainers/runc">Runc</a>的代码，研究OCI怎么实现的</li><li>Step3: 看<a href="https://cloud-atlas.readthedocs.io/zh_CN/latest/kubernetes/virtual/gvisor/gvisor_quickstart.html">gVisor</a>的代码，研究实现细节</li><li>Step4: 实现一个自己的Docker runtime，这个Runtime应该具有以下特点：<ul><li>使用go实现</li><li>简单轻量，但具有完备的功能，可以完美的作为一个OJ系统的Sandbox</li><li>利用Ptrace实现</li><li>支持使用json自定义sys call的调用规则（Allow List），以及进行内存时间限制，<del>并实现一套简易的对外交互接口(<a href="https://github.com/kubernetes/cri-api/blob/master/pkg/apis/runtime/v1/api.proto">CRI</a>)</del></li><li>支持OCI，可以作为Docker的runtime，支持K8S分发部署user code，从而可以作为OJ系统的评测集群Worker，</li><li>严格保证高代码质量，保证高可读性，可维护性</li></ul></li></ul><p>​    </p>]]></content>
      
      
      
        <tags>
            
            <tag> Virtualization </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Casdoor Flutter Sdk Bug Fix</title>
      <link href="/2022/11/27/Casdoor-Flutter-Sdk-Bug-Fix/"/>
      <url>/2022/11/27/Casdoor-Flutter-Sdk-Bug-Fix/</url>
      
        <content type="html"><![CDATA[<h2 id="1-安卓，不能跳转回app问题"><a href="#1-安卓，不能跳转回app问题" class="headerlink" title="1.安卓，不能跳转回app问题"></a>1.安卓，不能跳转回app问题</h2><p>安装了一个第三方浏览器，就解决问题了，因此sdk的代码本身应该是是正确的（原始浏览器不能跳转的问题暂不清楚原因，还需研究）  </p><h2 id="2-Flutter-web端存在跨域问题"><a href="#2-Flutter-web端存在跨域问题" class="headerlink" title="2.Flutter web端存在跨域问题"></a>2.Flutter web端存在跨域问题</h2><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/5DC1E696AFA5781CE5B8C30C59AEFA8F.jpg" alt="5DC1E696AFA5781CE5B8C30C59AEFA8F"></p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/D306359D80BF70C7E5350EE14321E2DF.jpg" alt="D306359D80BF70C7E5350EE14321E2DF"></p><p>这个问题网上有很多讨论，单从Flutter的角度来说，好像没有完美解决方案。 </p><blockquote><p>这一块我不清楚我理解的对不对：</p><p>我研究了一下Casdoor js sdk的逻辑，使用了js sdk的项目里，我没有找到浏览器直接向Casdoor发送请求获取token的例子。 </p><p>1.casdoor-python-vue-sdk-example这个repo，token是通过后端的py程序获取的，应该不是浏览器直接向casdoor发请求。</p><p>2.casdoor-raw-js-example这个repo，是用node.js启动项目（并且启动了一个代理server，由这个server向Casdoor发送请求），也不是原生js在浏览器直接请求token。</p></blockquote><p>但是Flutter-web就等于是编译出来一个静态web项目，原生运行在浏览器，浏览器中的原生js直接去请求其他域名下的casdoor必然遇到跨域问题</p><p>为解决这个问题，我目前想到了四种方法：</p><ul><li>为Casdoor的token获取接口添加CORS跨域资源分享支持</li><li>用Flutter调用原生js代码，通过一些不太优美的原生js方式绕过跨域问题</li><li>在Flutter内置一个代理程序（类似casdoor-raw-js-example）.但是这样没有实际意义，因为这个代理必须在Dart环境下才能启动，对于用户而言没用。</li><li>调整Flutter web的逻辑，不再提供其直接获取token的功能。或告知用户，直接用Flutter web整合Casdoor会遇到跨域问题，建议结合后端使用</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Casdoor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tree Generator (随机生成一颗树)</title>
      <link href="/2022/11/23/Tree/"/>
      <url>/2022/11/23/Tree/</url>
      
        <content type="html"><![CDATA[<p>This is a very interesting program which can generate parenthesis expressions of a tree at random and draw it.</p><p>Link: <a href="https://muchengl.github.io/tree/">https://muchengl.github.io/tree/</a></p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2022-11-23%2014.06.22.png" alt="截屏2022-11-23 14.06.22"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Casdoor Flutter Sdk Test</title>
      <link href="/2022/11/21/Casdoor-Flutter-sdk-Test/"/>
      <url>/2022/11/21/Casdoor-Flutter-sdk-Test/</url>
      
        <content type="html"><![CDATA[<h2 id="Step-1-Clone-casdoor-flutter-example-from-Github"><a href="#Step-1-Clone-casdoor-flutter-example-from-Github" class="headerlink" title="Step 1: Clone casdoor-flutter-example from Github"></a>Step 1: Clone casdoor-flutter-example from Github</h2><p>Link: <a href="https://github.com/casdoor/casdoor-flutter-example">https://github.com/casdoor/casdoor-flutter-example</a></p><h2 id="Step-2-Test-in-Chrome-Web"><a href="#Step-2-Test-in-Chrome-Web" class="headerlink" title="Step 2: Test in Chrome(Web)"></a>Step 2: Test in Chrome(Web)</h2><p>Encountered a cross-domain problem. So the token could not be obtained.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cross-domain code</span></span><br><span class="line"><span class="comment">// Post: localhost -&gt; door.casdoor.com</span></span><br><span class="line"><span class="keyword">final</span> response = <span class="keyword">await</span> _casdoor.requestOauthAccessToken(code);</span><br></pre></td></tr></table></figure><p>Error:</p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2022-11-26%2014.12.45.png" alt="截屏2022-11-26 14.12.45"></p><h2 id="Step-3-Test-in-Android-Emulator"><a href="#Step-3-Test-in-Android-Emulator" class="headerlink" title="Step 3: Test in Android Emulator"></a>Step 3: Test in Android Emulator</h2><p>Android app can get a Token. But the automatic jump from browser back to App cannot be triggered. (Perhaps the emulator causes this bug)</p><p>Graphic：</p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2022-11-26%2014.41.25.png" alt="截屏2022-11-26 14.41.25"></p><h2 id="Step-4-Test-in-IOS-Emulator"><a href="#Step-4-Test-in-IOS-Emulator" class="headerlink" title="Step 4: Test in IOS Emulator"></a>Step 4: Test in IOS Emulator</h2><p>Working well.</p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2022-11-26%2015.38.58.png" alt="截屏2022-11-26 15.38.58"></p>]]></content>
      
      
      
        <tags>
            
            <tag> casdoor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Amazon internship Doc</title>
      <link href="/2022/11/19/Amazon-Doc/"/>
      <url>/2022/11/19/Amazon-Doc/</url>
      
        <content type="html"><![CDATA[<object data="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/File-analysis-tool-high-level-design.pdf" type="application/pdf" width="700px" height="800px" >    <embed src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/File-analysis-tool-high-level-design.pdf">        <p>This browser does not support PDFs. Please download the PDF to view it: <a href="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/File-analysis-tool-high-level-design.pdf">Download PDF</a>.</p>    </embed></object>]]></content>
      
      
      
        <tags>
            
            <tag> intern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OS Learning 01</title>
      <link href="/2022/11/13/OS%20Learning%2001/"/>
      <url>/2022/11/13/OS%20Learning%2001/</url>
      
        <content type="html"><![CDATA[<h1 id="C-basic-knowledge"><a href="#C-basic-knowledge" class="headerlink" title="C basic knowledge"></a>C basic knowledge</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spin()</span><br></pre></td></tr></table></figure><p>等一秒钟返回</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assert( 表达式 );</span><br></pre></td></tr></table></figure><p>若表达式值为0，则终止程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">malloc</span>(num);</span><br><span class="line"><span class="type">int</span> *p=<span class="built_in">malloc</span>(num);</span><br></pre></td></tr></table></figure><p>动态分配内存函数，分配长度为num字节的内存块，需要使用free释放。</p><p>p是一个指针变量，表示内存中的一个地址。*p表示这个地址内存中存的值。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Operation Systems Three Easy Pieces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>first-blog Test</title>
      <link href="/2022/11/13/my-first-blog/"/>
      <url>/2022/11/13/my-first-blog/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/1.jpeg" alt="1"></p><h1 id="Spring学习笔记（1）"><a href="#Spring学习笔记（1）" class="headerlink" title="Spring学习笔记（1）"></a>Spring学习笔记（1）</h1><h3 id="1-依赖注入，控制反转的理解"><a href="#1-依赖注入，控制反转的理解" class="headerlink" title="1.依赖注入，控制反转的理解"></a>1.依赖注入，控制反转的理解</h3><h3 id="2-Spring程序结构"><a href="#2-Spring程序结构" class="headerlink" title="2.Spring程序结构"></a>2.Spring程序结构</h3><ul><li>实体类（pojo）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liu.pojo;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStr</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.str = str;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getStr</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;str=&#x27;&quot;</span> + str + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>配置文件<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.liu.pojo.Hello&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;str&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>测试类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//获取Spring的上下文对象</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Hello hello=(Hello)context.getBean(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(hello.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-set注入方法（di）"><a href="#3-set注入方法（di）" class="headerlink" title="3.set注入方法（di）"></a>3.set注入方法（di）</h3></li><li>实体类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Students</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="keyword">private</span> String[] book;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobby;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; card;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; game;</span><br><span class="line">    <span class="keyword">private</span> Properties info;</span><br><span class="line">    <span class="keyword">private</span> String wife;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>配置文件<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.liu.pojo.Address&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.liu.pojo.Students&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        普通值注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;刘瀚中&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        bean注入，使用ref--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--              数组注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;book&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>傲慢与偏见<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>呼啸山庄<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>瓦尔登湖<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--              列表注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>傲慢与偏见<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>呼啸山庄<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>瓦尔登湖<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--              map注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;饭卡&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;工资卡&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--              集合注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;game&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span>&gt;</span>吃鸡<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span>&gt;</span>lol<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        properties注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;administrator&quot;</span>&gt;</span>administrator@example.org<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;support&quot;</span>&gt;</span>support@example.org<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;development&quot;</span>&gt;</span>development@example.org<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        null注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">null</span>&gt;</span><span class="tag">&lt;/<span class="name">null</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-自动装配（autowiring）"><a href="#4-自动装配（autowiring）" class="headerlink" title="4.自动装配（autowiring）"></a>4.自动装配（autowiring）</h3>自动装配首先会根据name寻找对象，<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;1&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(value = &quot;dog1&quot;)</span><span class="comment">//若dog对象不唯一，需设置类名</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><span class="line">    &lt;context:annotation-config/&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;cat&quot;</span> class=<span class="string">&quot;com.liu.pojo.Cat&quot;</span>/&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;dog1&quot;</span> class=<span class="string">&quot;com.liu.pojo.Dog&quot;</span>/&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;dog2&quot;</span> class=<span class="string">&quot;com.liu.pojo.Dog&quot;</span>/&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;people&quot;</span> class=<span class="string">&quot;com.liu.pojo.People&quot;</span> autowire=<span class="string">&quot;byName&quot;</span>/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h3 id="5-注解编程"><a href="#5-注解编程" class="headerlink" title="5.注解编程"></a>5.注解编程</h3></li><li>配置文件（xml）与注解并存<ul><li>dao层：@Repository</li><li>pojo层：@Component</li><li>service：@Service</li><li>Controller层：@Controller<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//等价于&lt;bean id=&quot;user&quot; class=&quot;com.liu.pojo.User&quot;/&gt;</span></span><br><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span><span class="comment">//单例，prototype原型模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;lhz&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.liu&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    扫描包下的注解--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="6-代理模式"><a href="#6-代理模式" class="headerlink" title="6.代理模式"></a>6.代理模式</h3><h3 id="7-面向切面编程-aop"><a href="#7-面向切面编程-aop" class="headerlink" title="7.面向切面编程(aop)"></a>7.面向切面编程(aop)</h3><p>面向切面编程，是在不改变原有代码的基础上，增强代码的功能。Spring-aop有三种实现方式。</p><ul><li>方法一：Spring原生API接口实现<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.liu.service.UserServiceImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.liu.log.AfterLog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;beforeLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.liu.log.BeforeLog&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--方式1:原生Spring的API接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.liu.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;beforeLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>在一个包下建立以下两个类，分别作为执行前和执行后<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeforeLog</span> <span class="keyword">implements</span> <span class="title class_">MethodBeforeAdvice</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(Method method, Object[] objects, Object target)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(target.getClass().getName()+<span class="string">&quot;的&quot;</span>+method.getName()+<span class="string">&quot;被执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AfterLog</span> <span class="keyword">implements</span> <span class="title class_">AfterReturningAdvice</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(Object o, Method method, Object[] objects, Object o1)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了&quot;</span>+method.getName()+<span class="string">&quot;方法，返回结果为：&quot;</span>+o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>方法二：使用自定义类<br>定义一个DiyPointCut类，在里面写after和before方法<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--方式2：自定义类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;diy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.liu.diy.DiyPointCut&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--自定义切面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;diy&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.liu.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--通知--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DiyPointCut</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=========方法执行后========&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=========方法执行前========&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>方法三：使用注解<br>需在xml文件中开启注解<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--方式3--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span><span class="comment">&lt;!--开启注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;annotationPointCut&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.liu.diy.AnnotationPointCut&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span><span class="comment">//标记为切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationPointCut</span> &#123;</span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.liu.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===方法执行前===&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.liu.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===方法执行后===&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-Spring和MyBatis整合"><a href="#8-Spring和MyBatis整合" class="headerlink" title="8.Spring和MyBatis整合"></a>8.Spring和MyBatis整合</h3>需使用maven导入相应的jar包<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--测试--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注解--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        spring依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        Spring操控数据库--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        aop织入包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>Spring-Mybatis使用Spring将Mybatis的配置整合，可以选择在原来的MyBatis-config文件中配置一些简单的Mapper注册和引用别名，在Spring-dao.xml文件中写各种配置，最后在applicationContext.xml文件中注册各个类。与Mybatis不同，Spring-Mybatis只能获得SqlSessionFactoryBean和SqlSessionTemplate。Spring-Mybatis有两种实现方式。</li><li>第一种方式</li></ul><p>首先需要建立实体类，并建立接口和对应的xml文件，然后开始配置xml文件<br>MyBatis-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    引用别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.liu.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/liu/dao/StudentsMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Spring-dao.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    datasource数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSl=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    sqlSessionFactory--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        绑定MyBatis配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注册接口 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:com/liu/dao/StudentsMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-dao.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentsMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.liu.dao.StudentsMapperImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSession&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在完成xml配置之后，一般可以建立一个接口的实现类，并在这个类获取sqlSession,在application文件中注册这个类，并将sqlSession通过set注入这个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentsMapperImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentsMapper</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> SqlSessionTemplate sqlSession;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSqlSession</span><span class="params">(SqlSessionTemplate sqlSession)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sqlSession = sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Students&gt; <span class="title function_">getStudents</span><span class="params">()</span> &#123;</span><br><span class="line">        StudentsMapper studentsMapper=sqlSession.getMapper(StudentsMapper.class);</span><br><span class="line">        <span class="keyword">return</span> studentsMapper.getStudents();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后就可以进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Test2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);<span class="comment">//Spring配置文件</span></span><br><span class="line">        StudentsMapper studentsMapper=context.getBean(<span class="string">&quot;studentsMapper1&quot;</span>,StudentsMapper.class);<span class="comment">//接口，获取实现类</span></span><br><span class="line">        List&lt;Students&gt; list=studentsMapper.getStudents();</span><br><span class="line">        <span class="keyword">for</span> (Students students : list) &#123;</span><br><span class="line">            System.out.println(students);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>方法二<br>向接口的实现类注入sqlSeeeionFectory，该实现类需继承SqlSessionDaoSupport</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentsMapperImpl2</span> <span class="keyword">extends</span> <span class="title class_">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title class_">StudentsMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Students&gt; <span class="title function_">getStudents</span><span class="params">()</span> &#123;</span><br><span class="line">        StudentsMapper studentsMapper=getSqlSession().getMapper(StudentsMapper.class);<span class="comment">//此处使用getSqlSession()</span></span><br><span class="line">        <span class="keyword">return</span> studentsMapper.getStudents();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注入sqlSessionFactory</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;studentsMapper2&quot;</span> class=<span class="string">&quot;com.liu.dao.StudentsMapperImpl2&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;sqlSessionFactory&quot;</span> ref=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
